"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a2, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a2, prop, b2[prop]);
      }
    return a2;
  };
  var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject2) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject2(e2);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e2) {
          reject2(e2);
        }
      };
      var step = (x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // ../assets/node_modules/react/cjs/react.production.min.js
  var require_react_production_min = __commonJS({
    "../assets/node_modules/react/cjs/react.production.min.js"(exports) {
      "use strict";
      var l2 = Symbol.for("react.element");
      var n2 = Symbol.for("react.portal");
      var p2 = Symbol.for("react.fragment");
      var q2 = Symbol.for("react.strict_mode");
      var r2 = Symbol.for("react.profiler");
      var t2 = Symbol.for("react.provider");
      var u2 = Symbol.for("react.context");
      var v2 = Symbol.for("react.forward_ref");
      var w2 = Symbol.for("react.suspense");
      var x2 = Symbol.for("react.memo");
      var y2 = Symbol.for("react.lazy");
      var z2 = Symbol.iterator;
      function A2(a2) {
        if (null === a2 || "object" !== typeof a2)
          return null;
        a2 = z2 && a2[z2] || a2["@@iterator"];
        return "function" === typeof a2 ? a2 : null;
      }
      var B2 = { isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      } };
      var C2 = Object.assign;
      var D2 = {};
      function E2(a2, b2, e2) {
        this.props = a2;
        this.context = b2;
        this.refs = D2;
        this.updater = e2 || B2;
      }
      E2.prototype.isReactComponent = {};
      E2.prototype.setState = function(a2, b2) {
        if ("object" !== typeof a2 && "function" !== typeof a2 && null != a2)
          throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, a2, b2, "setState");
      };
      E2.prototype.forceUpdate = function(a2) {
        this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
      };
      function F2() {
      }
      F2.prototype = E2.prototype;
      function G2(a2, b2, e2) {
        this.props = a2;
        this.context = b2;
        this.refs = D2;
        this.updater = e2 || B2;
      }
      var H2 = G2.prototype = new F2();
      H2.constructor = G2;
      C2(H2, E2.prototype);
      H2.isPureReactComponent = true;
      var I2 = Array.isArray;
      var J2 = Object.prototype.hasOwnProperty;
      var K = { current: null };
      var L2 = { key: true, ref: true, __self: true, __source: true };
      function M2(a2, b2, e2) {
        var d2, c3 = {}, k2 = null, h2 = null;
        if (null != b2)
          for (d2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
            J2.call(b2, d2) && !L2.hasOwnProperty(d2) && (c3[d2] = b2[d2]);
        var g2 = arguments.length - 2;
        if (1 === g2)
          c3.children = e2;
        else if (1 < g2) {
          for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
            f2[m2] = arguments[m2 + 2];
          c3.children = f2;
        }
        if (a2 && a2.defaultProps)
          for (d2 in g2 = a2.defaultProps, g2)
            void 0 === c3[d2] && (c3[d2] = g2[d2]);
        return { $$typeof: l2, type: a2, key: k2, ref: h2, props: c3, _owner: K.current };
      }
      function N2(a2, b2) {
        return { $$typeof: l2, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
      }
      function O2(a2) {
        return "object" === typeof a2 && null !== a2 && a2.$$typeof === l2;
      }
      function escape(a2) {
        var b2 = { "=": "=0", ":": "=2" };
        return "$" + a2.replace(/[=:]/g, function(a3) {
          return b2[a3];
        });
      }
      var P2 = /\/+/g;
      function Q(a2, b2) {
        return "object" === typeof a2 && null !== a2 && null != a2.key ? escape("" + a2.key) : b2.toString(36);
      }
      function R2(a2, b2, e2, d2, c3) {
        var k2 = typeof a2;
        if ("undefined" === k2 || "boolean" === k2)
          a2 = null;
        var h2 = false;
        if (null === a2)
          h2 = true;
        else
          switch (k2) {
            case "string":
            case "number":
              h2 = true;
              break;
            case "object":
              switch (a2.$$typeof) {
                case l2:
                case n2:
                  h2 = true;
              }
          }
        if (h2)
          return h2 = a2, c3 = c3(h2), a2 = "" === d2 ? "." + Q(h2, 0) : d2, I2(c3) ? (e2 = "", null != a2 && (e2 = a2.replace(P2, "$&/") + "/"), R2(c3, b2, e2, "", function(a3) {
            return a3;
          })) : null != c3 && (O2(c3) && (c3 = N2(c3, e2 + (!c3.key || h2 && h2.key === c3.key ? "" : ("" + c3.key).replace(P2, "$&/") + "/") + a2)), b2.push(c3)), 1;
        h2 = 0;
        d2 = "" === d2 ? "." : d2 + ":";
        if (I2(a2))
          for (var g2 = 0; g2 < a2.length; g2++) {
            k2 = a2[g2];
            var f2 = d2 + Q(k2, g2);
            h2 += R2(k2, b2, e2, f2, c3);
          }
        else if (f2 = A2(a2), "function" === typeof f2)
          for (a2 = f2.call(a2), g2 = 0; !(k2 = a2.next()).done; )
            k2 = k2.value, f2 = d2 + Q(k2, g2++), h2 += R2(k2, b2, e2, f2, c3);
        else if ("object" === k2)
          throw b2 = String(a2), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
        return h2;
      }
      function S2(a2, b2, e2) {
        if (null == a2)
          return a2;
        var d2 = [], c3 = 0;
        R2(a2, d2, "", "", function(a3) {
          return b2.call(e2, a3, c3++);
        });
        return d2;
      }
      function T2(a2) {
        if (-1 === a2._status) {
          var b2 = a2._result;
          b2 = b2();
          b2.then(function(b3) {
            if (0 === a2._status || -1 === a2._status)
              a2._status = 1, a2._result = b3;
          }, function(b3) {
            if (0 === a2._status || -1 === a2._status)
              a2._status = 2, a2._result = b3;
          });
          -1 === a2._status && (a2._status = 0, a2._result = b2);
        }
        if (1 === a2._status)
          return a2._result.default;
        throw a2._result;
      }
      var U2 = { current: null };
      var V2 = { transition: null };
      var W2 = { ReactCurrentDispatcher: U2, ReactCurrentBatchConfig: V2, ReactCurrentOwner: K };
      exports.Children = { map: S2, forEach: function(a2, b2, e2) {
        S2(a2, function() {
          b2.apply(this, arguments);
        }, e2);
      }, count: function(a2) {
        var b2 = 0;
        S2(a2, function() {
          b2++;
        });
        return b2;
      }, toArray: function(a2) {
        return S2(a2, function(a3) {
          return a3;
        }) || [];
      }, only: function(a2) {
        if (!O2(a2))
          throw Error("React.Children.only expected to receive a single React element child.");
        return a2;
      } };
      exports.Component = E2;
      exports.Fragment = p2;
      exports.Profiler = r2;
      exports.PureComponent = G2;
      exports.StrictMode = q2;
      exports.Suspense = w2;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W2;
      exports.cloneElement = function(a2, b2, e2) {
        if (null === a2 || void 0 === a2)
          throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a2 + ".");
        var d2 = C2({}, a2.props), c3 = a2.key, k2 = a2.ref, h2 = a2._owner;
        if (null != b2) {
          void 0 !== b2.ref && (k2 = b2.ref, h2 = K.current);
          void 0 !== b2.key && (c3 = "" + b2.key);
          if (a2.type && a2.type.defaultProps)
            var g2 = a2.type.defaultProps;
          for (f2 in b2)
            J2.call(b2, f2) && !L2.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
        }
        var f2 = arguments.length - 2;
        if (1 === f2)
          d2.children = e2;
        else if (1 < f2) {
          g2 = Array(f2);
          for (var m2 = 0; m2 < f2; m2++)
            g2[m2] = arguments[m2 + 2];
          d2.children = g2;
        }
        return { $$typeof: l2, type: a2.type, key: c3, ref: k2, props: d2, _owner: h2 };
      };
      exports.createContext = function(a2) {
        a2 = { $$typeof: u2, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
        a2.Provider = { $$typeof: t2, _context: a2 };
        return a2.Consumer = a2;
      };
      exports.createElement = M2;
      exports.createFactory = function(a2) {
        var b2 = M2.bind(null, a2);
        b2.type = a2;
        return b2;
      };
      exports.createRef = function() {
        return { current: null };
      };
      exports.forwardRef = function(a2) {
        return { $$typeof: v2, render: a2 };
      };
      exports.isValidElement = O2;
      exports.lazy = function(a2) {
        return { $$typeof: y2, _payload: { _status: -1, _result: a2 }, _init: T2 };
      };
      exports.memo = function(a2, b2) {
        return { $$typeof: x2, type: a2, compare: void 0 === b2 ? null : b2 };
      };
      exports.startTransition = function(a2) {
        var b2 = V2.transition;
        V2.transition = {};
        try {
          a2();
        } finally {
          V2.transition = b2;
        }
      };
      exports.unstable_act = function() {
        throw Error("act(...) is not supported in production builds of React.");
      };
      exports.useCallback = function(a2, b2) {
        return U2.current.useCallback(a2, b2);
      };
      exports.useContext = function(a2) {
        return U2.current.useContext(a2);
      };
      exports.useDebugValue = function() {
      };
      exports.useDeferredValue = function(a2) {
        return U2.current.useDeferredValue(a2);
      };
      exports.useEffect = function(a2, b2) {
        return U2.current.useEffect(a2, b2);
      };
      exports.useId = function() {
        return U2.current.useId();
      };
      exports.useImperativeHandle = function(a2, b2, e2) {
        return U2.current.useImperativeHandle(a2, b2, e2);
      };
      exports.useInsertionEffect = function(a2, b2) {
        return U2.current.useInsertionEffect(a2, b2);
      };
      exports.useLayoutEffect = function(a2, b2) {
        return U2.current.useLayoutEffect(a2, b2);
      };
      exports.useMemo = function(a2, b2) {
        return U2.current.useMemo(a2, b2);
      };
      exports.useReducer = function(a2, b2, e2) {
        return U2.current.useReducer(a2, b2, e2);
      };
      exports.useRef = function(a2) {
        return U2.current.useRef(a2);
      };
      exports.useState = function(a2) {
        return U2.current.useState(a2);
      };
      exports.useSyncExternalStore = function(a2, b2, e2) {
        return U2.current.useSyncExternalStore(a2, b2, e2);
      };
      exports.useTransition = function() {
        return U2.current.useTransition();
      };
      exports.version = "18.2.0";
    }
  });

  // ../assets/node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../assets/node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState5(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef4(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect6(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback2(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo5(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]) {
                  c3--;
                }
                for (; s2 >= 1 && c3 >= 0; s2--, c3--) {
                  if (sampleLines[s2] !== controlLines[c3]) {
                    if (s2 !== 1 || c3 !== 1) {
                      do {
                        s2--;
                        c3--;
                        if (c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject2) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject2);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject2(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject2) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject2);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject2) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject2) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject2);
                    }
                  });
                } catch (error2) {
                  reject2(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback2;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect6;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo5;
          exports.useReducer = useReducer;
          exports.useRef = useRef4;
          exports.useState = useState5;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../assets/node_modules/react/index.js
  var require_react = __commonJS({
    "../assets/node_modules/react/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_react_production_min();
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // ../assets/node_modules/scheduler/cjs/scheduler.production.min.js
  var require_scheduler_production_min = __commonJS({
    "../assets/node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
      "use strict";
      function f2(a2, b2) {
        var c3 = a2.length;
        a2.push(b2);
        a:
          for (; 0 < c3; ) {
            var d2 = c3 - 1 >>> 1, e2 = a2[d2];
            if (0 < g2(e2, b2))
              a2[d2] = b2, a2[c3] = e2, c3 = d2;
            else
              break a;
          }
      }
      function h2(a2) {
        return 0 === a2.length ? null : a2[0];
      }
      function k2(a2) {
        if (0 === a2.length)
          return null;
        var b2 = a2[0], c3 = a2.pop();
        if (c3 !== b2) {
          a2[0] = c3;
          a:
            for (var d2 = 0, e2 = a2.length, w2 = e2 >>> 1; d2 < w2; ) {
              var m2 = 2 * (d2 + 1) - 1, C2 = a2[m2], n2 = m2 + 1, x2 = a2[n2];
              if (0 > g2(C2, c3))
                n2 < e2 && 0 > g2(x2, C2) ? (a2[d2] = x2, a2[n2] = c3, d2 = n2) : (a2[d2] = C2, a2[m2] = c3, d2 = m2);
              else if (n2 < e2 && 0 > g2(x2, c3))
                a2[d2] = x2, a2[n2] = c3, d2 = n2;
              else
                break a;
            }
        }
        return b2;
      }
      function g2(a2, b2) {
        var c3 = a2.sortIndex - b2.sortIndex;
        return 0 !== c3 ? c3 : a2.id - b2.id;
      }
      if ("object" === typeof performance && "function" === typeof performance.now) {
        l2 = performance;
        exports.unstable_now = function() {
          return l2.now();
        };
      } else {
        p2 = Date, q2 = p2.now();
        exports.unstable_now = function() {
          return p2.now() - q2;
        };
      }
      var l2;
      var p2;
      var q2;
      var r2 = [];
      var t2 = [];
      var u2 = 1;
      var v2 = null;
      var y2 = 3;
      var z2 = false;
      var A2 = false;
      var B2 = false;
      var D2 = "function" === typeof setTimeout ? setTimeout : null;
      var E2 = "function" === typeof clearTimeout ? clearTimeout : null;
      var F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
      "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function G2(a2) {
        for (var b2 = h2(t2); null !== b2; ) {
          if (null === b2.callback)
            k2(t2);
          else if (b2.startTime <= a2)
            k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
          else
            break;
          b2 = h2(t2);
        }
      }
      function H2(a2) {
        B2 = false;
        G2(a2);
        if (!A2)
          if (null !== h2(r2))
            A2 = true, I2(J2);
          else {
            var b2 = h2(t2);
            null !== b2 && K(H2, b2.startTime - a2);
          }
      }
      function J2(a2, b2) {
        A2 = false;
        B2 && (B2 = false, E2(L2), L2 = -1);
        z2 = true;
        var c3 = y2;
        try {
          G2(b2);
          for (v2 = h2(r2); null !== v2 && (!(v2.expirationTime > b2) || a2 && !M2()); ) {
            var d2 = v2.callback;
            if ("function" === typeof d2) {
              v2.callback = null;
              y2 = v2.priorityLevel;
              var e2 = d2(v2.expirationTime <= b2);
              b2 = exports.unstable_now();
              "function" === typeof e2 ? v2.callback = e2 : v2 === h2(r2) && k2(r2);
              G2(b2);
            } else
              k2(r2);
            v2 = h2(r2);
          }
          if (null !== v2)
            var w2 = true;
          else {
            var m2 = h2(t2);
            null !== m2 && K(H2, m2.startTime - b2);
            w2 = false;
          }
          return w2;
        } finally {
          v2 = null, y2 = c3, z2 = false;
        }
      }
      var N2 = false;
      var O2 = null;
      var L2 = -1;
      var P2 = 5;
      var Q = -1;
      function M2() {
        return exports.unstable_now() - Q < P2 ? false : true;
      }
      function R2() {
        if (null !== O2) {
          var a2 = exports.unstable_now();
          Q = a2;
          var b2 = true;
          try {
            b2 = O2(true, a2);
          } finally {
            b2 ? S2() : (N2 = false, O2 = null);
          }
        } else
          N2 = false;
      }
      var S2;
      if ("function" === typeof F2)
        S2 = function() {
          F2(R2);
        };
      else if ("undefined" !== typeof MessageChannel) {
        T2 = new MessageChannel(), U2 = T2.port2;
        T2.port1.onmessage = R2;
        S2 = function() {
          U2.postMessage(null);
        };
      } else
        S2 = function() {
          D2(R2, 0);
        };
      var T2;
      var U2;
      function I2(a2) {
        O2 = a2;
        N2 || (N2 = true, S2());
      }
      function K(a2, b2) {
        L2 = D2(function() {
          a2(exports.unstable_now());
        }, b2);
      }
      exports.unstable_IdlePriority = 5;
      exports.unstable_ImmediatePriority = 1;
      exports.unstable_LowPriority = 4;
      exports.unstable_NormalPriority = 3;
      exports.unstable_Profiling = null;
      exports.unstable_UserBlockingPriority = 2;
      exports.unstable_cancelCallback = function(a2) {
        a2.callback = null;
      };
      exports.unstable_continueExecution = function() {
        A2 || z2 || (A2 = true, I2(J2));
      };
      exports.unstable_forceFrameRate = function(a2) {
        0 > a2 || 125 < a2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a2 ? Math.floor(1e3 / a2) : 5;
      };
      exports.unstable_getCurrentPriorityLevel = function() {
        return y2;
      };
      exports.unstable_getFirstCallbackNode = function() {
        return h2(r2);
      };
      exports.unstable_next = function(a2) {
        switch (y2) {
          case 1:
          case 2:
          case 3:
            var b2 = 3;
            break;
          default:
            b2 = y2;
        }
        var c3 = y2;
        y2 = b2;
        try {
          return a2();
        } finally {
          y2 = c3;
        }
      };
      exports.unstable_pauseExecution = function() {
      };
      exports.unstable_requestPaint = function() {
      };
      exports.unstable_runWithPriority = function(a2, b2) {
        switch (a2) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a2 = 3;
        }
        var c3 = y2;
        y2 = a2;
        try {
          return b2();
        } finally {
          y2 = c3;
        }
      };
      exports.unstable_scheduleCallback = function(a2, b2, c3) {
        var d2 = exports.unstable_now();
        "object" === typeof c3 && null !== c3 ? (c3 = c3.delay, c3 = "number" === typeof c3 && 0 < c3 ? d2 + c3 : d2) : c3 = d2;
        switch (a2) {
          case 1:
            var e2 = -1;
            break;
          case 2:
            e2 = 250;
            break;
          case 5:
            e2 = 1073741823;
            break;
          case 4:
            e2 = 1e4;
            break;
          default:
            e2 = 5e3;
        }
        e2 = c3 + e2;
        a2 = { id: u2++, callback: b2, priorityLevel: a2, startTime: c3, expirationTime: e2, sortIndex: -1 };
        c3 > d2 ? (a2.sortIndex = c3, f2(t2, a2), null === h2(r2) && a2 === h2(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K(H2, c3 - d2))) : (a2.sortIndex = e2, f2(r2, a2), A2 || z2 || (A2 = true, I2(J2)));
        return a2;
      };
      exports.unstable_shouldYield = M2;
      exports.unstable_wrapCallback = function(a2) {
        var b2 = y2;
        return function() {
          var c3 = y2;
          y2 = b2;
          try {
            return a2.apply(this, arguments);
          } finally {
            y2 = c3;
          }
        };
      };
    }
  });

  // ../assets/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../assets/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i2) {
            var index2 = i2;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i2) {
            var index2 = i2;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../assets/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../assets/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_scheduler_production_min();
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../assets/node_modules/react-dom/cjs/react-dom.production.min.js
  var require_react_dom_production_min = __commonJS({
    "../assets/node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
      "use strict";
      var aa = require_react();
      var ca = require_scheduler();
      function p2(a2) {
        for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c3 = 1; c3 < arguments.length; c3++)
          b2 += "&args[]=" + encodeURIComponent(arguments[c3]);
        return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var da = /* @__PURE__ */ new Set();
      var ea = {};
      function fa(a2, b2) {
        ha(a2, b2);
        ha(a2 + "Capture", b2);
      }
      function ha(a2, b2) {
        ea[a2] = b2;
        for (a2 = 0; a2 < b2.length; a2++)
          da.add(b2[a2]);
      }
      var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
      var ja = Object.prototype.hasOwnProperty;
      var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
      var la = {};
      var ma = {};
      function oa(a2) {
        if (ja.call(ma, a2))
          return true;
        if (ja.call(la, a2))
          return false;
        if (ka.test(a2))
          return ma[a2] = true;
        la[a2] = true;
        return false;
      }
      function pa(a2, b2, c3, d2) {
        if (null !== c3 && 0 === c3.type)
          return false;
        switch (typeof b2) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            if (d2)
              return false;
            if (null !== c3)
              return !c3.acceptsBooleans;
            a2 = a2.toLowerCase().slice(0, 5);
            return "data-" !== a2 && "aria-" !== a2;
          default:
            return false;
        }
      }
      function qa(a2, b2, c3, d2) {
        if (null === b2 || "undefined" === typeof b2 || pa(a2, b2, c3, d2))
          return true;
        if (d2)
          return false;
        if (null !== c3)
          switch (c3.type) {
            case 3:
              return !b2;
            case 4:
              return false === b2;
            case 5:
              return isNaN(b2);
            case 6:
              return isNaN(b2) || 1 > b2;
          }
        return false;
      }
      function v2(a2, b2, c3, d2, e2, f2, g2) {
        this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
        this.attributeName = d2;
        this.attributeNamespace = e2;
        this.mustUseProperty = c3;
        this.propertyName = a2;
        this.type = b2;
        this.sanitizeURL = f2;
        this.removeEmptyString = g2;
      }
      var z2 = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a2) {
        z2[a2] = new v2(a2, 0, false, a2, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a2) {
        var b2 = a2[0];
        z2[b2] = new v2(b2, 1, false, a2[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a2) {
        z2[a2] = new v2(a2, 2, false, a2.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a2) {
        z2[a2] = new v2(a2, 2, false, a2, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a2) {
        z2[a2] = new v2(a2, 3, false, a2.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(a2) {
        z2[a2] = new v2(a2, 3, true, a2, null, false, false);
      });
      ["capture", "download"].forEach(function(a2) {
        z2[a2] = new v2(a2, 4, false, a2, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(a2) {
        z2[a2] = new v2(a2, 6, false, a2, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(a2) {
        z2[a2] = new v2(a2, 5, false, a2.toLowerCase(), null, false, false);
      });
      var ra = /[\-:]([a-z])/g;
      function sa(a2) {
        return a2[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a2) {
        var b2 = a2.replace(
          ra,
          sa
        );
        z2[b2] = new v2(b2, 1, false, a2, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a2) {
        var b2 = a2.replace(ra, sa);
        z2[b2] = new v2(b2, 1, false, a2, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(a2) {
        var b2 = a2.replace(ra, sa);
        z2[b2] = new v2(b2, 1, false, a2, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(a2) {
        z2[a2] = new v2(a2, 1, false, a2.toLowerCase(), null, false, false);
      });
      z2.xlinkHref = new v2("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(a2) {
        z2[a2] = new v2(a2, 1, false, a2.toLowerCase(), null, true, true);
      });
      function ta(a2, b2, c3, d2) {
        var e2 = z2.hasOwnProperty(b2) ? z2[b2] : null;
        if (null !== e2 ? 0 !== e2.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
          qa(b2, c3, e2, d2) && (c3 = null), d2 || null === e2 ? oa(b2) && (null === c3 ? a2.removeAttribute(b2) : a2.setAttribute(b2, "" + c3)) : e2.mustUseProperty ? a2[e2.propertyName] = null === c3 ? 3 === e2.type ? false : "" : c3 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, null === c3 ? a2.removeAttribute(b2) : (e2 = e2.type, c3 = 3 === e2 || 4 === e2 && true === c3 ? "" : "" + c3, d2 ? a2.setAttributeNS(d2, b2, c3) : a2.setAttribute(b2, c3)));
      }
      var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var va = Symbol.for("react.element");
      var wa = Symbol.for("react.portal");
      var ya = Symbol.for("react.fragment");
      var za = Symbol.for("react.strict_mode");
      var Aa = Symbol.for("react.profiler");
      var Ba = Symbol.for("react.provider");
      var Ca = Symbol.for("react.context");
      var Da = Symbol.for("react.forward_ref");
      var Ea = Symbol.for("react.suspense");
      var Fa = Symbol.for("react.suspense_list");
      var Ga = Symbol.for("react.memo");
      var Ha = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      Symbol.for("react.debug_trace_mode");
      var Ia = Symbol.for("react.offscreen");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.cache");
      Symbol.for("react.tracing_marker");
      var Ja = Symbol.iterator;
      function Ka(a2) {
        if (null === a2 || "object" !== typeof a2)
          return null;
        a2 = Ja && a2[Ja] || a2["@@iterator"];
        return "function" === typeof a2 ? a2 : null;
      }
      var A2 = Object.assign;
      var La;
      function Ma(a2) {
        if (void 0 === La)
          try {
            throw Error();
          } catch (c3) {
            var b2 = c3.stack.trim().match(/\n( *(at )?)/);
            La = b2 && b2[1] || "";
          }
        return "\n" + La + a2;
      }
      var Na = false;
      function Oa(a2, b2) {
        if (!a2 || Na)
          return "";
        Na = true;
        var c3 = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b2)
            if (b2 = function() {
              throw Error();
            }, Object.defineProperty(b2.prototype, "props", { set: function() {
              throw Error();
            } }), "object" === typeof Reflect && Reflect.construct) {
              try {
                Reflect.construct(b2, []);
              } catch (l2) {
                var d2 = l2;
              }
              Reflect.construct(a2, [], b2);
            } else {
              try {
                b2.call();
              } catch (l2) {
                d2 = l2;
              }
              a2.call(b2.prototype);
            }
          else {
            try {
              throw Error();
            } catch (l2) {
              d2 = l2;
            }
            a2();
          }
        } catch (l2) {
          if (l2 && d2 && "string" === typeof l2.stack) {
            for (var e2 = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e2[g2] !== f2[h2]; )
              h2--;
            for (; 1 <= g2 && 0 <= h2; g2--, h2--)
              if (e2[g2] !== f2[h2]) {
                if (1 !== g2 || 1 !== h2) {
                  do
                    if (g2--, h2--, 0 > h2 || e2[g2] !== f2[h2]) {
                      var k2 = "\n" + e2[g2].replace(" at new ", " at ");
                      a2.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a2.displayName));
                      return k2;
                    }
                  while (1 <= g2 && 0 <= h2);
                }
                break;
              }
          }
        } finally {
          Na = false, Error.prepareStackTrace = c3;
        }
        return (a2 = a2 ? a2.displayName || a2.name : "") ? Ma(a2) : "";
      }
      function Pa(a2) {
        switch (a2.tag) {
          case 5:
            return Ma(a2.type);
          case 16:
            return Ma("Lazy");
          case 13:
            return Ma("Suspense");
          case 19:
            return Ma("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a2 = Oa(a2.type, false), a2;
          case 11:
            return a2 = Oa(a2.type.render, false), a2;
          case 1:
            return a2 = Oa(a2.type, true), a2;
          default:
            return "";
        }
      }
      function Qa(a2) {
        if (null == a2)
          return null;
        if ("function" === typeof a2)
          return a2.displayName || a2.name || null;
        if ("string" === typeof a2)
          return a2;
        switch (a2) {
          case ya:
            return "Fragment";
          case wa:
            return "Portal";
          case Aa:
            return "Profiler";
          case za:
            return "StrictMode";
          case Ea:
            return "Suspense";
          case Fa:
            return "SuspenseList";
        }
        if ("object" === typeof a2)
          switch (a2.$$typeof) {
            case Ca:
              return (a2.displayName || "Context") + ".Consumer";
            case Ba:
              return (a2._context.displayName || "Context") + ".Provider";
            case Da:
              var b2 = a2.render;
              a2 = a2.displayName;
              a2 || (a2 = b2.displayName || b2.name || "", a2 = "" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
              return a2;
            case Ga:
              return b2 = a2.displayName || null, null !== b2 ? b2 : Qa(a2.type) || "Memo";
            case Ha:
              b2 = a2._payload;
              a2 = a2._init;
              try {
                return Qa(a2(b2));
              } catch (c3) {
              }
          }
        return null;
      }
      function Ra(a2) {
        var b2 = a2.type;
        switch (a2.tag) {
          case 24:
            return "Cache";
          case 9:
            return (b2.displayName || "Context") + ".Consumer";
          case 10:
            return (b2._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return a2 = b2.render, a2 = a2.displayName || a2.name || "", b2.displayName || ("" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 5:
            return b2;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return Qa(b2);
          case 8:
            return b2 === za ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if ("function" === typeof b2)
              return b2.displayName || b2.name || null;
            if ("string" === typeof b2)
              return b2;
        }
        return null;
      }
      function Sa(a2) {
        switch (typeof a2) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return a2;
          case "object":
            return a2;
          default:
            return "";
        }
      }
      function Ta(a2) {
        var b2 = a2.type;
        return (a2 = a2.nodeName) && "input" === a2.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
      }
      function Ua(a2) {
        var b2 = Ta(a2) ? "checked" : "value", c3 = Object.getOwnPropertyDescriptor(a2.constructor.prototype, b2), d2 = "" + a2[b2];
        if (!a2.hasOwnProperty(b2) && "undefined" !== typeof c3 && "function" === typeof c3.get && "function" === typeof c3.set) {
          var e2 = c3.get, f2 = c3.set;
          Object.defineProperty(a2, b2, { configurable: true, get: function() {
            return e2.call(this);
          }, set: function(a3) {
            d2 = "" + a3;
            f2.call(this, a3);
          } });
          Object.defineProperty(a2, b2, { enumerable: c3.enumerable });
          return { getValue: function() {
            return d2;
          }, setValue: function(a3) {
            d2 = "" + a3;
          }, stopTracking: function() {
            a2._valueTracker = null;
            delete a2[b2];
          } };
        }
      }
      function Va(a2) {
        a2._valueTracker || (a2._valueTracker = Ua(a2));
      }
      function Wa(a2) {
        if (!a2)
          return false;
        var b2 = a2._valueTracker;
        if (!b2)
          return true;
        var c3 = b2.getValue();
        var d2 = "";
        a2 && (d2 = Ta(a2) ? a2.checked ? "true" : "false" : a2.value);
        a2 = d2;
        return a2 !== c3 ? (b2.setValue(a2), true) : false;
      }
      function Xa(a2) {
        a2 = a2 || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof a2)
          return null;
        try {
          return a2.activeElement || a2.body;
        } catch (b2) {
          return a2.body;
        }
      }
      function Ya(a2, b2) {
        var c3 = b2.checked;
        return A2({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c3 ? c3 : a2._wrapperState.initialChecked });
      }
      function Za(a2, b2) {
        var c3 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
        c3 = Sa(null != b2.value ? b2.value : c3);
        a2._wrapperState = { initialChecked: d2, initialValue: c3, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
      }
      function ab(a2, b2) {
        b2 = b2.checked;
        null != b2 && ta(a2, "checked", b2, false);
      }
      function bb(a2, b2) {
        ab(a2, b2);
        var c3 = Sa(b2.value), d2 = b2.type;
        if (null != c3)
          if ("number" === d2) {
            if (0 === c3 && "" === a2.value || a2.value != c3)
              a2.value = "" + c3;
          } else
            a2.value !== "" + c3 && (a2.value = "" + c3);
        else if ("submit" === d2 || "reset" === d2) {
          a2.removeAttribute("value");
          return;
        }
        b2.hasOwnProperty("value") ? cb(a2, b2.type, c3) : b2.hasOwnProperty("defaultValue") && cb(a2, b2.type, Sa(b2.defaultValue));
        null == b2.checked && null != b2.defaultChecked && (a2.defaultChecked = !!b2.defaultChecked);
      }
      function db(a2, b2, c3) {
        if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
          var d2 = b2.type;
          if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
            return;
          b2 = "" + a2._wrapperState.initialValue;
          c3 || b2 === a2.value || (a2.value = b2);
          a2.defaultValue = b2;
        }
        c3 = a2.name;
        "" !== c3 && (a2.name = "");
        a2.defaultChecked = !!a2._wrapperState.initialChecked;
        "" !== c3 && (a2.name = c3);
      }
      function cb(a2, b2, c3) {
        if ("number" !== b2 || Xa(a2.ownerDocument) !== a2)
          null == c3 ? a2.defaultValue = "" + a2._wrapperState.initialValue : a2.defaultValue !== "" + c3 && (a2.defaultValue = "" + c3);
      }
      var eb = Array.isArray;
      function fb(a2, b2, c3, d2) {
        a2 = a2.options;
        if (b2) {
          b2 = {};
          for (var e2 = 0; e2 < c3.length; e2++)
            b2["$" + c3[e2]] = true;
          for (c3 = 0; c3 < a2.length; c3++)
            e2 = b2.hasOwnProperty("$" + a2[c3].value), a2[c3].selected !== e2 && (a2[c3].selected = e2), e2 && d2 && (a2[c3].defaultSelected = true);
        } else {
          c3 = "" + Sa(c3);
          b2 = null;
          for (e2 = 0; e2 < a2.length; e2++) {
            if (a2[e2].value === c3) {
              a2[e2].selected = true;
              d2 && (a2[e2].defaultSelected = true);
              return;
            }
            null !== b2 || a2[e2].disabled || (b2 = a2[e2]);
          }
          null !== b2 && (b2.selected = true);
        }
      }
      function gb(a2, b2) {
        if (null != b2.dangerouslySetInnerHTML)
          throw Error(p2(91));
        return A2({}, b2, { value: void 0, defaultValue: void 0, children: "" + a2._wrapperState.initialValue });
      }
      function hb(a2, b2) {
        var c3 = b2.value;
        if (null == c3) {
          c3 = b2.children;
          b2 = b2.defaultValue;
          if (null != c3) {
            if (null != b2)
              throw Error(p2(92));
            if (eb(c3)) {
              if (1 < c3.length)
                throw Error(p2(93));
              c3 = c3[0];
            }
            b2 = c3;
          }
          null == b2 && (b2 = "");
          c3 = b2;
        }
        a2._wrapperState = { initialValue: Sa(c3) };
      }
      function ib(a2, b2) {
        var c3 = Sa(b2.value), d2 = Sa(b2.defaultValue);
        null != c3 && (c3 = "" + c3, c3 !== a2.value && (a2.value = c3), null == b2.defaultValue && a2.defaultValue !== c3 && (a2.defaultValue = c3));
        null != d2 && (a2.defaultValue = "" + d2);
      }
      function jb(a2) {
        var b2 = a2.textContent;
        b2 === a2._wrapperState.initialValue && "" !== b2 && null !== b2 && (a2.value = b2);
      }
      function kb(a2) {
        switch (a2) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function lb(a2, b2) {
        return null == a2 || "http://www.w3.org/1999/xhtml" === a2 ? kb(b2) : "http://www.w3.org/2000/svg" === a2 && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a2;
      }
      var mb;
      var nb = function(a2) {
        return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c3, d2, e2) {
          MSApp.execUnsafeLocalFunction(function() {
            return a2(b2, c3, d2, e2);
          });
        } : a2;
      }(function(a2, b2) {
        if ("http://www.w3.org/2000/svg" !== a2.namespaceURI || "innerHTML" in a2)
          a2.innerHTML = b2;
        else {
          mb = mb || document.createElement("div");
          mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
          for (b2 = mb.firstChild; a2.firstChild; )
            a2.removeChild(a2.firstChild);
          for (; b2.firstChild; )
            a2.appendChild(b2.firstChild);
        }
      });
      function ob(a2, b2) {
        if (b2) {
          var c3 = a2.firstChild;
          if (c3 && c3 === a2.lastChild && 3 === c3.nodeType) {
            c3.nodeValue = b2;
            return;
          }
        }
        a2.textContent = b2;
      }
      var pb = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      var qb = ["Webkit", "ms", "Moz", "O"];
      Object.keys(pb).forEach(function(a2) {
        qb.forEach(function(b2) {
          b2 = b2 + a2.charAt(0).toUpperCase() + a2.substring(1);
          pb[b2] = pb[a2];
        });
      });
      function rb(a2, b2, c3) {
        return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c3 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a2) && pb[a2] ? ("" + b2).trim() : b2 + "px";
      }
      function sb(a2, b2) {
        a2 = a2.style;
        for (var c3 in b2)
          if (b2.hasOwnProperty(c3)) {
            var d2 = 0 === c3.indexOf("--"), e2 = rb(c3, b2[c3], d2);
            "float" === c3 && (c3 = "cssFloat");
            d2 ? a2.setProperty(c3, e2) : a2[c3] = e2;
          }
      }
      var tb = A2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
      function ub(a2, b2) {
        if (b2) {
          if (tb[a2] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
            throw Error(p2(137, a2));
          if (null != b2.dangerouslySetInnerHTML) {
            if (null != b2.children)
              throw Error(p2(60));
            if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
              throw Error(p2(61));
          }
          if (null != b2.style && "object" !== typeof b2.style)
            throw Error(p2(62));
        }
      }
      function vb(a2, b2) {
        if (-1 === a2.indexOf("-"))
          return "string" === typeof b2.is;
        switch (a2) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var wb = null;
      function xb(a2) {
        a2 = a2.target || a2.srcElement || window;
        a2.correspondingUseElement && (a2 = a2.correspondingUseElement);
        return 3 === a2.nodeType ? a2.parentNode : a2;
      }
      var yb = null;
      var zb = null;
      var Ab = null;
      function Bb(a2) {
        if (a2 = Cb(a2)) {
          if ("function" !== typeof yb)
            throw Error(p2(280));
          var b2 = a2.stateNode;
          b2 && (b2 = Db(b2), yb(a2.stateNode, a2.type, b2));
        }
      }
      function Eb(a2) {
        zb ? Ab ? Ab.push(a2) : Ab = [a2] : zb = a2;
      }
      function Fb() {
        if (zb) {
          var a2 = zb, b2 = Ab;
          Ab = zb = null;
          Bb(a2);
          if (b2)
            for (a2 = 0; a2 < b2.length; a2++)
              Bb(b2[a2]);
        }
      }
      function Gb(a2, b2) {
        return a2(b2);
      }
      function Hb() {
      }
      var Ib = false;
      function Jb(a2, b2, c3) {
        if (Ib)
          return a2(b2, c3);
        Ib = true;
        try {
          return Gb(a2, b2, c3);
        } finally {
          if (Ib = false, null !== zb || null !== Ab)
            Hb(), Fb();
        }
      }
      function Kb(a2, b2) {
        var c3 = a2.stateNode;
        if (null === c3)
          return null;
        var d2 = Db(c3);
        if (null === d2)
          return null;
        c3 = d2[b2];
        a:
          switch (b2) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (d2 = !d2.disabled) || (a2 = a2.type, d2 = !("button" === a2 || "input" === a2 || "select" === a2 || "textarea" === a2));
              a2 = !d2;
              break a;
            default:
              a2 = false;
          }
        if (a2)
          return null;
        if (c3 && "function" !== typeof c3)
          throw Error(p2(231, b2, typeof c3));
        return c3;
      }
      var Lb = false;
      if (ia)
        try {
          Mb = {};
          Object.defineProperty(Mb, "passive", { get: function() {
            Lb = true;
          } });
          window.addEventListener("test", Mb, Mb);
          window.removeEventListener("test", Mb, Mb);
        } catch (a2) {
          Lb = false;
        }
      var Mb;
      function Nb(a2, b2, c3, d2, e2, f2, g2, h2, k2) {
        var l2 = Array.prototype.slice.call(arguments, 3);
        try {
          b2.apply(c3, l2);
        } catch (m2) {
          this.onError(m2);
        }
      }
      var Ob = false;
      var Pb = null;
      var Qb = false;
      var Rb = null;
      var Sb = { onError: function(a2) {
        Ob = true;
        Pb = a2;
      } };
      function Tb(a2, b2, c3, d2, e2, f2, g2, h2, k2) {
        Ob = false;
        Pb = null;
        Nb.apply(Sb, arguments);
      }
      function Ub(a2, b2, c3, d2, e2, f2, g2, h2, k2) {
        Tb.apply(this, arguments);
        if (Ob) {
          if (Ob) {
            var l2 = Pb;
            Ob = false;
            Pb = null;
          } else
            throw Error(p2(198));
          Qb || (Qb = true, Rb = l2);
        }
      }
      function Vb(a2) {
        var b2 = a2, c3 = a2;
        if (a2.alternate)
          for (; b2.return; )
            b2 = b2.return;
        else {
          a2 = b2;
          do
            b2 = a2, 0 !== (b2.flags & 4098) && (c3 = b2.return), a2 = b2.return;
          while (a2);
        }
        return 3 === b2.tag ? c3 : null;
      }
      function Wb(a2) {
        if (13 === a2.tag) {
          var b2 = a2.memoizedState;
          null === b2 && (a2 = a2.alternate, null !== a2 && (b2 = a2.memoizedState));
          if (null !== b2)
            return b2.dehydrated;
        }
        return null;
      }
      function Xb(a2) {
        if (Vb(a2) !== a2)
          throw Error(p2(188));
      }
      function Yb(a2) {
        var b2 = a2.alternate;
        if (!b2) {
          b2 = Vb(a2);
          if (null === b2)
            throw Error(p2(188));
          return b2 !== a2 ? null : a2;
        }
        for (var c3 = a2, d2 = b2; ; ) {
          var e2 = c3.return;
          if (null === e2)
            break;
          var f2 = e2.alternate;
          if (null === f2) {
            d2 = e2.return;
            if (null !== d2) {
              c3 = d2;
              continue;
            }
            break;
          }
          if (e2.child === f2.child) {
            for (f2 = e2.child; f2; ) {
              if (f2 === c3)
                return Xb(e2), a2;
              if (f2 === d2)
                return Xb(e2), b2;
              f2 = f2.sibling;
            }
            throw Error(p2(188));
          }
          if (c3.return !== d2.return)
            c3 = e2, d2 = f2;
          else {
            for (var g2 = false, h2 = e2.child; h2; ) {
              if (h2 === c3) {
                g2 = true;
                c3 = e2;
                d2 = f2;
                break;
              }
              if (h2 === d2) {
                g2 = true;
                d2 = e2;
                c3 = f2;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g2) {
              for (h2 = f2.child; h2; ) {
                if (h2 === c3) {
                  g2 = true;
                  c3 = f2;
                  d2 = e2;
                  break;
                }
                if (h2 === d2) {
                  g2 = true;
                  d2 = f2;
                  c3 = e2;
                  break;
                }
                h2 = h2.sibling;
              }
              if (!g2)
                throw Error(p2(189));
            }
          }
          if (c3.alternate !== d2)
            throw Error(p2(190));
        }
        if (3 !== c3.tag)
          throw Error(p2(188));
        return c3.stateNode.current === c3 ? a2 : b2;
      }
      function Zb(a2) {
        a2 = Yb(a2);
        return null !== a2 ? $b(a2) : null;
      }
      function $b(a2) {
        if (5 === a2.tag || 6 === a2.tag)
          return a2;
        for (a2 = a2.child; null !== a2; ) {
          var b2 = $b(a2);
          if (null !== b2)
            return b2;
          a2 = a2.sibling;
        }
        return null;
      }
      var ac = ca.unstable_scheduleCallback;
      var bc = ca.unstable_cancelCallback;
      var cc = ca.unstable_shouldYield;
      var dc = ca.unstable_requestPaint;
      var B2 = ca.unstable_now;
      var ec = ca.unstable_getCurrentPriorityLevel;
      var fc = ca.unstable_ImmediatePriority;
      var gc = ca.unstable_UserBlockingPriority;
      var hc = ca.unstable_NormalPriority;
      var ic = ca.unstable_LowPriority;
      var jc = ca.unstable_IdlePriority;
      var kc = null;
      var lc = null;
      function mc(a2) {
        if (lc && "function" === typeof lc.onCommitFiberRoot)
          try {
            lc.onCommitFiberRoot(kc, a2, void 0, 128 === (a2.current.flags & 128));
          } catch (b2) {
          }
      }
      var oc = Math.clz32 ? Math.clz32 : nc;
      var pc = Math.log;
      var qc = Math.LN2;
      function nc(a2) {
        a2 >>>= 0;
        return 0 === a2 ? 32 : 31 - (pc(a2) / qc | 0) | 0;
      }
      var rc = 64;
      var sc = 4194304;
      function tc(a2) {
        switch (a2 & -a2) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return a2 & 4194240;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return a2 & 130023424;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return a2;
        }
      }
      function uc(a2, b2) {
        var c3 = a2.pendingLanes;
        if (0 === c3)
          return 0;
        var d2 = 0, e2 = a2.suspendedLanes, f2 = a2.pingedLanes, g2 = c3 & 268435455;
        if (0 !== g2) {
          var h2 = g2 & ~e2;
          0 !== h2 ? d2 = tc(h2) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
        } else
          g2 = c3 & ~e2, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
        if (0 === d2)
          return 0;
        if (0 !== b2 && b2 !== d2 && 0 === (b2 & e2) && (e2 = d2 & -d2, f2 = b2 & -b2, e2 >= f2 || 16 === e2 && 0 !== (f2 & 4194240)))
          return b2;
        0 !== (d2 & 4) && (d2 |= c3 & 16);
        b2 = a2.entangledLanes;
        if (0 !== b2)
          for (a2 = a2.entanglements, b2 &= d2; 0 < b2; )
            c3 = 31 - oc(b2), e2 = 1 << c3, d2 |= a2[c3], b2 &= ~e2;
        return d2;
      }
      function vc(a2, b2) {
        switch (a2) {
          case 1:
          case 2:
          case 4:
            return b2 + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return b2 + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return -1;
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function wc(a2, b2) {
        for (var c3 = a2.suspendedLanes, d2 = a2.pingedLanes, e2 = a2.expirationTimes, f2 = a2.pendingLanes; 0 < f2; ) {
          var g2 = 31 - oc(f2), h2 = 1 << g2, k2 = e2[g2];
          if (-1 === k2) {
            if (0 === (h2 & c3) || 0 !== (h2 & d2))
              e2[g2] = vc(h2, b2);
          } else
            k2 <= b2 && (a2.expiredLanes |= h2);
          f2 &= ~h2;
        }
      }
      function xc(a2) {
        a2 = a2.pendingLanes & -1073741825;
        return 0 !== a2 ? a2 : a2 & 1073741824 ? 1073741824 : 0;
      }
      function yc() {
        var a2 = rc;
        rc <<= 1;
        0 === (rc & 4194240) && (rc = 64);
        return a2;
      }
      function zc(a2) {
        for (var b2 = [], c3 = 0; 31 > c3; c3++)
          b2.push(a2);
        return b2;
      }
      function Ac(a2, b2, c3) {
        a2.pendingLanes |= b2;
        536870912 !== b2 && (a2.suspendedLanes = 0, a2.pingedLanes = 0);
        a2 = a2.eventTimes;
        b2 = 31 - oc(b2);
        a2[b2] = c3;
      }
      function Bc(a2, b2) {
        var c3 = a2.pendingLanes & ~b2;
        a2.pendingLanes = b2;
        a2.suspendedLanes = 0;
        a2.pingedLanes = 0;
        a2.expiredLanes &= b2;
        a2.mutableReadLanes &= b2;
        a2.entangledLanes &= b2;
        b2 = a2.entanglements;
        var d2 = a2.eventTimes;
        for (a2 = a2.expirationTimes; 0 < c3; ) {
          var e2 = 31 - oc(c3), f2 = 1 << e2;
          b2[e2] = 0;
          d2[e2] = -1;
          a2[e2] = -1;
          c3 &= ~f2;
        }
      }
      function Cc(a2, b2) {
        var c3 = a2.entangledLanes |= b2;
        for (a2 = a2.entanglements; c3; ) {
          var d2 = 31 - oc(c3), e2 = 1 << d2;
          e2 & b2 | a2[d2] & b2 && (a2[d2] |= b2);
          c3 &= ~e2;
        }
      }
      var C2 = 0;
      function Dc(a2) {
        a2 &= -a2;
        return 1 < a2 ? 4 < a2 ? 0 !== (a2 & 268435455) ? 16 : 536870912 : 4 : 1;
      }
      var Ec;
      var Fc;
      var Gc;
      var Hc;
      var Ic;
      var Jc = false;
      var Kc = [];
      var Lc = null;
      var Mc = null;
      var Nc = null;
      var Oc = /* @__PURE__ */ new Map();
      var Pc = /* @__PURE__ */ new Map();
      var Qc = [];
      var Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function Sc(a2, b2) {
        switch (a2) {
          case "focusin":
          case "focusout":
            Lc = null;
            break;
          case "dragenter":
          case "dragleave":
            Mc = null;
            break;
          case "mouseover":
          case "mouseout":
            Nc = null;
            break;
          case "pointerover":
          case "pointerout":
            Oc.delete(b2.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            Pc.delete(b2.pointerId);
        }
      }
      function Tc(a2, b2, c3, d2, e2, f2) {
        if (null === a2 || a2.nativeEvent !== f2)
          return a2 = { blockedOn: b2, domEventName: c3, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e2] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a2;
        a2.eventSystemFlags |= d2;
        b2 = a2.targetContainers;
        null !== e2 && -1 === b2.indexOf(e2) && b2.push(e2);
        return a2;
      }
      function Uc(a2, b2, c3, d2, e2) {
        switch (b2) {
          case "focusin":
            return Lc = Tc(Lc, a2, b2, c3, d2, e2), true;
          case "dragenter":
            return Mc = Tc(Mc, a2, b2, c3, d2, e2), true;
          case "mouseover":
            return Nc = Tc(Nc, a2, b2, c3, d2, e2), true;
          case "pointerover":
            var f2 = e2.pointerId;
            Oc.set(f2, Tc(Oc.get(f2) || null, a2, b2, c3, d2, e2));
            return true;
          case "gotpointercapture":
            return f2 = e2.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a2, b2, c3, d2, e2)), true;
        }
        return false;
      }
      function Vc(a2) {
        var b2 = Wc(a2.target);
        if (null !== b2) {
          var c3 = Vb(b2);
          if (null !== c3) {
            if (b2 = c3.tag, 13 === b2) {
              if (b2 = Wb(c3), null !== b2) {
                a2.blockedOn = b2;
                Ic(a2.priority, function() {
                  Gc(c3);
                });
                return;
              }
            } else if (3 === b2 && c3.stateNode.current.memoizedState.isDehydrated) {
              a2.blockedOn = 3 === c3.tag ? c3.stateNode.containerInfo : null;
              return;
            }
          }
        }
        a2.blockedOn = null;
      }
      function Xc(a2) {
        if (null !== a2.blockedOn)
          return false;
        for (var b2 = a2.targetContainers; 0 < b2.length; ) {
          var c3 = Yc(a2.domEventName, a2.eventSystemFlags, b2[0], a2.nativeEvent);
          if (null === c3) {
            c3 = a2.nativeEvent;
            var d2 = new c3.constructor(c3.type, c3);
            wb = d2;
            c3.target.dispatchEvent(d2);
            wb = null;
          } else
            return b2 = Cb(c3), null !== b2 && Fc(b2), a2.blockedOn = c3, false;
          b2.shift();
        }
        return true;
      }
      function Zc(a2, b2, c3) {
        Xc(a2) && c3.delete(b2);
      }
      function $c() {
        Jc = false;
        null !== Lc && Xc(Lc) && (Lc = null);
        null !== Mc && Xc(Mc) && (Mc = null);
        null !== Nc && Xc(Nc) && (Nc = null);
        Oc.forEach(Zc);
        Pc.forEach(Zc);
      }
      function ad(a2, b2) {
        a2.blockedOn === b2 && (a2.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
      }
      function bd(a2) {
        function b2(b3) {
          return ad(b3, a2);
        }
        if (0 < Kc.length) {
          ad(Kc[0], a2);
          for (var c3 = 1; c3 < Kc.length; c3++) {
            var d2 = Kc[c3];
            d2.blockedOn === a2 && (d2.blockedOn = null);
          }
        }
        null !== Lc && ad(Lc, a2);
        null !== Mc && ad(Mc, a2);
        null !== Nc && ad(Nc, a2);
        Oc.forEach(b2);
        Pc.forEach(b2);
        for (c3 = 0; c3 < Qc.length; c3++)
          d2 = Qc[c3], d2.blockedOn === a2 && (d2.blockedOn = null);
        for (; 0 < Qc.length && (c3 = Qc[0], null === c3.blockedOn); )
          Vc(c3), null === c3.blockedOn && Qc.shift();
      }
      var cd = ua.ReactCurrentBatchConfig;
      var dd = true;
      function ed(a2, b2, c3, d2) {
        var e2 = C2, f2 = cd.transition;
        cd.transition = null;
        try {
          C2 = 1, fd(a2, b2, c3, d2);
        } finally {
          C2 = e2, cd.transition = f2;
        }
      }
      function gd(a2, b2, c3, d2) {
        var e2 = C2, f2 = cd.transition;
        cd.transition = null;
        try {
          C2 = 4, fd(a2, b2, c3, d2);
        } finally {
          C2 = e2, cd.transition = f2;
        }
      }
      function fd(a2, b2, c3, d2) {
        if (dd) {
          var e2 = Yc(a2, b2, c3, d2);
          if (null === e2)
            hd(a2, b2, d2, id, c3), Sc(a2, d2);
          else if (Uc(e2, a2, b2, c3, d2))
            d2.stopPropagation();
          else if (Sc(a2, d2), b2 & 4 && -1 < Rc.indexOf(a2)) {
            for (; null !== e2; ) {
              var f2 = Cb(e2);
              null !== f2 && Ec(f2);
              f2 = Yc(a2, b2, c3, d2);
              null === f2 && hd(a2, b2, d2, id, c3);
              if (f2 === e2)
                break;
              e2 = f2;
            }
            null !== e2 && d2.stopPropagation();
          } else
            hd(a2, b2, d2, null, c3);
        }
      }
      var id = null;
      function Yc(a2, b2, c3, d2) {
        id = null;
        a2 = xb(d2);
        a2 = Wc(a2);
        if (null !== a2)
          if (b2 = Vb(a2), null === b2)
            a2 = null;
          else if (c3 = b2.tag, 13 === c3) {
            a2 = Wb(b2);
            if (null !== a2)
              return a2;
            a2 = null;
          } else if (3 === c3) {
            if (b2.stateNode.current.memoizedState.isDehydrated)
              return 3 === b2.tag ? b2.stateNode.containerInfo : null;
            a2 = null;
          } else
            b2 !== a2 && (a2 = null);
        id = a2;
        return null;
      }
      function jd(a2) {
        switch (a2) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 1;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 4;
          case "message":
            switch (ec()) {
              case fc:
                return 1;
              case gc:
                return 4;
              case hc:
              case ic:
                return 16;
              case jc:
                return 536870912;
              default:
                return 16;
            }
          default:
            return 16;
        }
      }
      var kd = null;
      var ld = null;
      var md = null;
      function nd() {
        if (md)
          return md;
        var a2, b2 = ld, c3 = b2.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
        for (a2 = 0; a2 < c3 && b2[a2] === e2[a2]; a2++)
          ;
        var g2 = c3 - a2;
        for (d2 = 1; d2 <= g2 && b2[c3 - d2] === e2[f2 - d2]; d2++)
          ;
        return md = e2.slice(a2, 1 < d2 ? 1 - d2 : void 0);
      }
      function od(a2) {
        var b2 = a2.keyCode;
        "charCode" in a2 ? (a2 = a2.charCode, 0 === a2 && 13 === b2 && (a2 = 13)) : a2 = b2;
        10 === a2 && (a2 = 13);
        return 32 <= a2 || 13 === a2 ? a2 : 0;
      }
      function pd() {
        return true;
      }
      function qd() {
        return false;
      }
      function rd(a2) {
        function b2(b3, d2, e2, f2, g2) {
          this._reactName = b3;
          this._targetInst = e2;
          this.type = d2;
          this.nativeEvent = f2;
          this.target = g2;
          this.currentTarget = null;
          for (var c3 in a2)
            a2.hasOwnProperty(c3) && (b3 = a2[c3], this[c3] = b3 ? b3(f2) : f2[c3]);
          this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
          this.isPropagationStopped = qd;
          return this;
        }
        A2(b2.prototype, { preventDefault: function() {
          this.defaultPrevented = true;
          var a3 = this.nativeEvent;
          a3 && (a3.preventDefault ? a3.preventDefault() : "unknown" !== typeof a3.returnValue && (a3.returnValue = false), this.isDefaultPrevented = pd);
        }, stopPropagation: function() {
          var a3 = this.nativeEvent;
          a3 && (a3.stopPropagation ? a3.stopPropagation() : "unknown" !== typeof a3.cancelBubble && (a3.cancelBubble = true), this.isPropagationStopped = pd);
        }, persist: function() {
        }, isPersistent: pd });
        return b2;
      }
      var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a2) {
        return a2.timeStamp || Date.now();
      }, defaultPrevented: 0, isTrusted: 0 };
      var td = rd(sd);
      var ud = A2({}, sd, { view: 0, detail: 0 });
      var vd = rd(ud);
      var wd;
      var xd;
      var yd;
      var Ad = A2({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a2) {
        return void 0 === a2.relatedTarget ? a2.fromElement === a2.srcElement ? a2.toElement : a2.fromElement : a2.relatedTarget;
      }, movementX: function(a2) {
        if ("movementX" in a2)
          return a2.movementX;
        a2 !== yd && (yd && "mousemove" === a2.type ? (wd = a2.screenX - yd.screenX, xd = a2.screenY - yd.screenY) : xd = wd = 0, yd = a2);
        return wd;
      }, movementY: function(a2) {
        return "movementY" in a2 ? a2.movementY : xd;
      } });
      var Bd = rd(Ad);
      var Cd = A2({}, Ad, { dataTransfer: 0 });
      var Dd = rd(Cd);
      var Ed = A2({}, ud, { relatedTarget: 0 });
      var Fd = rd(Ed);
      var Gd = A2({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Hd = rd(Gd);
      var Id = A2({}, sd, { clipboardData: function(a2) {
        return "clipboardData" in a2 ? a2.clipboardData : window.clipboardData;
      } });
      var Jd = rd(Id);
      var Kd = A2({}, sd, { data: 0 });
      var Ld = rd(Kd);
      var Md = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var Nd = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      var Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
      function Pd(a2) {
        var b2 = this.nativeEvent;
        return b2.getModifierState ? b2.getModifierState(a2) : (a2 = Od[a2]) ? !!b2[a2] : false;
      }
      function zd() {
        return Pd;
      }
      var Qd = A2({}, ud, { key: function(a2) {
        if (a2.key) {
          var b2 = Md[a2.key] || a2.key;
          if ("Unidentified" !== b2)
            return b2;
        }
        return "keypress" === a2.type ? (a2 = od(a2), 13 === a2 ? "Enter" : String.fromCharCode(a2)) : "keydown" === a2.type || "keyup" === a2.type ? Nd[a2.keyCode] || "Unidentified" : "";
      }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a2) {
        return "keypress" === a2.type ? od(a2) : 0;
      }, keyCode: function(a2) {
        return "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
      }, which: function(a2) {
        return "keypress" === a2.type ? od(a2) : "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
      } });
      var Rd = rd(Qd);
      var Sd = A2({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
      var Td = rd(Sd);
      var Ud = A2({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd });
      var Vd = rd(Ud);
      var Wd = A2({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Xd = rd(Wd);
      var Yd = A2({}, Ad, {
        deltaX: function(a2) {
          return "deltaX" in a2 ? a2.deltaX : "wheelDeltaX" in a2 ? -a2.wheelDeltaX : 0;
        },
        deltaY: function(a2) {
          return "deltaY" in a2 ? a2.deltaY : "wheelDeltaY" in a2 ? -a2.wheelDeltaY : "wheelDelta" in a2 ? -a2.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var Zd = rd(Yd);
      var $d = [9, 13, 27, 32];
      var ae = ia && "CompositionEvent" in window;
      var be = null;
      ia && "documentMode" in document && (be = document.documentMode);
      var ce = ia && "TextEvent" in window && !be;
      var de = ia && (!ae || be && 8 < be && 11 >= be);
      var ee = String.fromCharCode(32);
      var fe = false;
      function ge(a2, b2) {
        switch (a2) {
          case "keyup":
            return -1 !== $d.indexOf(b2.keyCode);
          case "keydown":
            return 229 !== b2.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function he(a2) {
        a2 = a2.detail;
        return "object" === typeof a2 && "data" in a2 ? a2.data : null;
      }
      var ie = false;
      function je(a2, b2) {
        switch (a2) {
          case "compositionend":
            return he(b2);
          case "keypress":
            if (32 !== b2.which)
              return null;
            fe = true;
            return ee;
          case "textInput":
            return a2 = b2.data, a2 === ee && fe ? null : a2;
          default:
            return null;
        }
      }
      function ke(a2, b2) {
        if (ie)
          return "compositionend" === a2 || !ae && ge(a2, b2) ? (a2 = nd(), md = ld = kd = null, ie = false, a2) : null;
        switch (a2) {
          case "paste":
            return null;
          case "keypress":
            if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
              if (b2.char && 1 < b2.char.length)
                return b2.char;
              if (b2.which)
                return String.fromCharCode(b2.which);
            }
            return null;
          case "compositionend":
            return de && "ko" !== b2.locale ? null : b2.data;
          default:
            return null;
        }
      }
      var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
      function me(a2) {
        var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
        return "input" === b2 ? !!le[a2.type] : "textarea" === b2 ? true : false;
      }
      function ne(a2, b2, c3, d2) {
        Eb(d2);
        b2 = oe(b2, "onChange");
        0 < b2.length && (c3 = new td("onChange", "change", null, c3, d2), a2.push({ event: c3, listeners: b2 }));
      }
      var pe = null;
      var qe = null;
      function re(a2) {
        se(a2, 0);
      }
      function te(a2) {
        var b2 = ue(a2);
        if (Wa(b2))
          return a2;
      }
      function ve(a2, b2) {
        if ("change" === a2)
          return b2;
      }
      var we = false;
      if (ia) {
        if (ia) {
          ye = "oninput" in document;
          if (!ye) {
            ze = document.createElement("div");
            ze.setAttribute("oninput", "return;");
            ye = "function" === typeof ze.oninput;
          }
          xe = ye;
        } else
          xe = false;
        we = xe && (!document.documentMode || 9 < document.documentMode);
      }
      var xe;
      var ye;
      var ze;
      function Ae() {
        pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
      }
      function Be(a2) {
        if ("value" === a2.propertyName && te(qe)) {
          var b2 = [];
          ne(b2, qe, a2, xb(a2));
          Jb(re, b2);
        }
      }
      function Ce(a2, b2, c3) {
        "focusin" === a2 ? (Ae(), pe = b2, qe = c3, pe.attachEvent("onpropertychange", Be)) : "focusout" === a2 && Ae();
      }
      function De(a2) {
        if ("selectionchange" === a2 || "keyup" === a2 || "keydown" === a2)
          return te(qe);
      }
      function Ee(a2, b2) {
        if ("click" === a2)
          return te(b2);
      }
      function Fe(a2, b2) {
        if ("input" === a2 || "change" === a2)
          return te(b2);
      }
      function Ge(a2, b2) {
        return a2 === b2 && (0 !== a2 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
      }
      var He = "function" === typeof Object.is ? Object.is : Ge;
      function Ie(a2, b2) {
        if (He(a2, b2))
          return true;
        if ("object" !== typeof a2 || null === a2 || "object" !== typeof b2 || null === b2)
          return false;
        var c3 = Object.keys(a2), d2 = Object.keys(b2);
        if (c3.length !== d2.length)
          return false;
        for (d2 = 0; d2 < c3.length; d2++) {
          var e2 = c3[d2];
          if (!ja.call(b2, e2) || !He(a2[e2], b2[e2]))
            return false;
        }
        return true;
      }
      function Je(a2) {
        for (; a2 && a2.firstChild; )
          a2 = a2.firstChild;
        return a2;
      }
      function Ke(a2, b2) {
        var c3 = Je(a2);
        a2 = 0;
        for (var d2; c3; ) {
          if (3 === c3.nodeType) {
            d2 = a2 + c3.textContent.length;
            if (a2 <= b2 && d2 >= b2)
              return { node: c3, offset: b2 - a2 };
            a2 = d2;
          }
          a: {
            for (; c3; ) {
              if (c3.nextSibling) {
                c3 = c3.nextSibling;
                break a;
              }
              c3 = c3.parentNode;
            }
            c3 = void 0;
          }
          c3 = Je(c3);
        }
      }
      function Le(a2, b2) {
        return a2 && b2 ? a2 === b2 ? true : a2 && 3 === a2.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a2, b2.parentNode) : "contains" in a2 ? a2.contains(b2) : a2.compareDocumentPosition ? !!(a2.compareDocumentPosition(b2) & 16) : false : false;
      }
      function Me() {
        for (var a2 = window, b2 = Xa(); b2 instanceof a2.HTMLIFrameElement; ) {
          try {
            var c3 = "string" === typeof b2.contentWindow.location.href;
          } catch (d2) {
            c3 = false;
          }
          if (c3)
            a2 = b2.contentWindow;
          else
            break;
          b2 = Xa(a2.document);
        }
        return b2;
      }
      function Ne(a2) {
        var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
        return b2 && ("input" === b2 && ("text" === a2.type || "search" === a2.type || "tel" === a2.type || "url" === a2.type || "password" === a2.type) || "textarea" === b2 || "true" === a2.contentEditable);
      }
      function Oe(a2) {
        var b2 = Me(), c3 = a2.focusedElem, d2 = a2.selectionRange;
        if (b2 !== c3 && c3 && c3.ownerDocument && Le(c3.ownerDocument.documentElement, c3)) {
          if (null !== d2 && Ne(c3)) {
            if (b2 = d2.start, a2 = d2.end, void 0 === a2 && (a2 = b2), "selectionStart" in c3)
              c3.selectionStart = b2, c3.selectionEnd = Math.min(a2, c3.value.length);
            else if (a2 = (b2 = c3.ownerDocument || document) && b2.defaultView || window, a2.getSelection) {
              a2 = a2.getSelection();
              var e2 = c3.textContent.length, f2 = Math.min(d2.start, e2);
              d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e2);
              !a2.extend && f2 > d2 && (e2 = d2, d2 = f2, f2 = e2);
              e2 = Ke(c3, f2);
              var g2 = Ke(
                c3,
                d2
              );
              e2 && g2 && (1 !== a2.rangeCount || a2.anchorNode !== e2.node || a2.anchorOffset !== e2.offset || a2.focusNode !== g2.node || a2.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e2.node, e2.offset), a2.removeAllRanges(), f2 > d2 ? (a2.addRange(b2), a2.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a2.addRange(b2)));
            }
          }
          b2 = [];
          for (a2 = c3; a2 = a2.parentNode; )
            1 === a2.nodeType && b2.push({ element: a2, left: a2.scrollLeft, top: a2.scrollTop });
          "function" === typeof c3.focus && c3.focus();
          for (c3 = 0; c3 < b2.length; c3++)
            a2 = b2[c3], a2.element.scrollLeft = a2.left, a2.element.scrollTop = a2.top;
        }
      }
      var Pe = ia && "documentMode" in document && 11 >= document.documentMode;
      var Qe = null;
      var Re = null;
      var Se = null;
      var Te = false;
      function Ue(a2, b2, c3) {
        var d2 = c3.window === c3 ? c3.document : 9 === c3.nodeType ? c3 : c3.ownerDocument;
        Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Ne(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Ie(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c3), a2.push({ event: b2, listeners: d2 }), b2.target = Qe)));
      }
      function Ve(a2, b2) {
        var c3 = {};
        c3[a2.toLowerCase()] = b2.toLowerCase();
        c3["Webkit" + a2] = "webkit" + b2;
        c3["Moz" + a2] = "moz" + b2;
        return c3;
      }
      var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") };
      var Xe = {};
      var Ye = {};
      ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
      function Ze(a2) {
        if (Xe[a2])
          return Xe[a2];
        if (!We[a2])
          return a2;
        var b2 = We[a2], c3;
        for (c3 in b2)
          if (b2.hasOwnProperty(c3) && c3 in Ye)
            return Xe[a2] = b2[c3];
        return a2;
      }
      var $e = Ze("animationend");
      var af = Ze("animationiteration");
      var bf = Ze("animationstart");
      var cf = Ze("transitionend");
      var df = /* @__PURE__ */ new Map();
      var ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
      function ff(a2, b2) {
        df.set(a2, b2);
        fa(b2, [a2]);
      }
      for (gf = 0; gf < ef.length; gf++) {
        hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
        ff(jf, "on" + kf);
      }
      var hf;
      var jf;
      var kf;
      var gf;
      ff($e, "onAnimationEnd");
      ff(af, "onAnimationIteration");
      ff(bf, "onAnimationStart");
      ff("dblclick", "onDoubleClick");
      ff("focusin", "onFocus");
      ff("focusout", "onBlur");
      ff(cf, "onTransitionEnd");
      ha("onMouseEnter", ["mouseout", "mouseover"]);
      ha("onMouseLeave", ["mouseout", "mouseover"]);
      ha("onPointerEnter", ["pointerout", "pointerover"]);
      ha("onPointerLeave", ["pointerout", "pointerover"]);
      fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
      var mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
      function nf(a2, b2, c3) {
        var d2 = a2.type || "unknown-event";
        a2.currentTarget = c3;
        Ub(d2, b2, void 0, a2);
        a2.currentTarget = null;
      }
      function se(a2, b2) {
        b2 = 0 !== (b2 & 4);
        for (var c3 = 0; c3 < a2.length; c3++) {
          var d2 = a2[c3], e2 = d2.event;
          d2 = d2.listeners;
          a: {
            var f2 = void 0;
            if (b2)
              for (var g2 = d2.length - 1; 0 <= g2; g2--) {
                var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
                h2 = h2.listener;
                if (k2 !== f2 && e2.isPropagationStopped())
                  break a;
                nf(e2, h2, l2);
                f2 = k2;
              }
            else
              for (g2 = 0; g2 < d2.length; g2++) {
                h2 = d2[g2];
                k2 = h2.instance;
                l2 = h2.currentTarget;
                h2 = h2.listener;
                if (k2 !== f2 && e2.isPropagationStopped())
                  break a;
                nf(e2, h2, l2);
                f2 = k2;
              }
          }
        }
        if (Qb)
          throw a2 = Rb, Qb = false, Rb = null, a2;
      }
      function D2(a2, b2) {
        var c3 = b2[of];
        void 0 === c3 && (c3 = b2[of] = /* @__PURE__ */ new Set());
        var d2 = a2 + "__bubble";
        c3.has(d2) || (pf(b2, a2, 2, false), c3.add(d2));
      }
      function qf(a2, b2, c3) {
        var d2 = 0;
        b2 && (d2 |= 4);
        pf(c3, a2, d2, b2);
      }
      var rf = "_reactListening" + Math.random().toString(36).slice(2);
      function sf(a2) {
        if (!a2[rf]) {
          a2[rf] = true;
          da.forEach(function(b3) {
            "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a2), qf(b3, true, a2));
          });
          var b2 = 9 === a2.nodeType ? a2 : a2.ownerDocument;
          null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
        }
      }
      function pf(a2, b2, c3, d2) {
        switch (jd(b2)) {
          case 1:
            var e2 = ed;
            break;
          case 4:
            e2 = gd;
            break;
          default:
            e2 = fd;
        }
        c3 = e2.bind(null, b2, c3, a2);
        e2 = void 0;
        !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e2 = true);
        d2 ? void 0 !== e2 ? a2.addEventListener(b2, c3, { capture: true, passive: e2 }) : a2.addEventListener(b2, c3, true) : void 0 !== e2 ? a2.addEventListener(b2, c3, { passive: e2 }) : a2.addEventListener(b2, c3, false);
      }
      function hd(a2, b2, c3, d2, e2) {
        var f2 = d2;
        if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
          a:
            for (; ; ) {
              if (null === d2)
                return;
              var g2 = d2.tag;
              if (3 === g2 || 4 === g2) {
                var h2 = d2.stateNode.containerInfo;
                if (h2 === e2 || 8 === h2.nodeType && h2.parentNode === e2)
                  break;
                if (4 === g2)
                  for (g2 = d2.return; null !== g2; ) {
                    var k2 = g2.tag;
                    if (3 === k2 || 4 === k2) {
                      if (k2 = g2.stateNode.containerInfo, k2 === e2 || 8 === k2.nodeType && k2.parentNode === e2)
                        return;
                    }
                    g2 = g2.return;
                  }
                for (; null !== h2; ) {
                  g2 = Wc(h2);
                  if (null === g2)
                    return;
                  k2 = g2.tag;
                  if (5 === k2 || 6 === k2) {
                    d2 = f2 = g2;
                    continue a;
                  }
                  h2 = h2.parentNode;
                }
              }
              d2 = d2.return;
            }
        Jb(function() {
          var d3 = f2, e3 = xb(c3), g3 = [];
          a: {
            var h3 = df.get(a2);
            if (void 0 !== h3) {
              var k3 = td, n2 = a2;
              switch (a2) {
                case "keypress":
                  if (0 === od(c3))
                    break a;
                case "keydown":
                case "keyup":
                  k3 = Rd;
                  break;
                case "focusin":
                  n2 = "focus";
                  k3 = Fd;
                  break;
                case "focusout":
                  n2 = "blur";
                  k3 = Fd;
                  break;
                case "beforeblur":
                case "afterblur":
                  k3 = Fd;
                  break;
                case "click":
                  if (2 === c3.button)
                    break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  k3 = Bd;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  k3 = Dd;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  k3 = Vd;
                  break;
                case $e:
                case af:
                case bf:
                  k3 = Hd;
                  break;
                case cf:
                  k3 = Xd;
                  break;
                case "scroll":
                  k3 = vd;
                  break;
                case "wheel":
                  k3 = Zd;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  k3 = Jd;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  k3 = Td;
              }
              var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a2, x2 = t2 ? null !== h3 ? h3 + "Capture" : null : h3;
              t2 = [];
              for (var w2 = d3, u2; null !== w2; ) {
                u2 = w2;
                var F2 = u2.stateNode;
                5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
                if (J2)
                  break;
                w2 = w2.return;
              }
              0 < t2.length && (h3 = new k3(h3, n2, null, c3, e3), g3.push({ event: h3, listeners: t2 }));
            }
          }
          if (0 === (b2 & 7)) {
            a: {
              h3 = "mouseover" === a2 || "pointerover" === a2;
              k3 = "mouseout" === a2 || "pointerout" === a2;
              if (h3 && c3 !== wb && (n2 = c3.relatedTarget || c3.fromElement) && (Wc(n2) || n2[uf]))
                break a;
              if (k3 || h3) {
                h3 = e3.window === e3 ? e3 : (h3 = e3.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
                if (k3) {
                  if (n2 = c3.relatedTarget || c3.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
                    n2 = null;
                } else
                  k3 = null, n2 = d3;
                if (k3 !== n2) {
                  t2 = Bd;
                  F2 = "onMouseLeave";
                  x2 = "onMouseEnter";
                  w2 = "mouse";
                  if ("pointerout" === a2 || "pointerover" === a2)
                    t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
                  J2 = null == k3 ? h3 : ue(k3);
                  u2 = null == n2 ? h3 : ue(n2);
                  h3 = new t2(F2, w2 + "leave", k3, c3, e3);
                  h3.target = J2;
                  h3.relatedTarget = u2;
                  F2 = null;
                  Wc(e3) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c3, e3), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
                  J2 = F2;
                  if (k3 && n2)
                    b: {
                      t2 = k3;
                      x2 = n2;
                      w2 = 0;
                      for (u2 = t2; u2; u2 = vf(u2))
                        w2++;
                      u2 = 0;
                      for (F2 = x2; F2; F2 = vf(F2))
                        u2++;
                      for (; 0 < w2 - u2; )
                        t2 = vf(t2), w2--;
                      for (; 0 < u2 - w2; )
                        x2 = vf(x2), u2--;
                      for (; w2--; ) {
                        if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                          break b;
                        t2 = vf(t2);
                        x2 = vf(x2);
                      }
                      t2 = null;
                    }
                  else
                    t2 = null;
                  null !== k3 && wf(g3, h3, k3, t2, false);
                  null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
                }
              }
            }
            a: {
              h3 = d3 ? ue(d3) : window;
              k3 = h3.nodeName && h3.nodeName.toLowerCase();
              if ("select" === k3 || "input" === k3 && "file" === h3.type)
                var na = ve;
              else if (me(h3))
                if (we)
                  na = Fe;
                else {
                  na = De;
                  var xa = Ce;
                }
              else
                (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (na = Ee);
              if (na && (na = na(a2, d3))) {
                ne(g3, na, c3, e3);
                break a;
              }
              xa && xa(a2, h3, d3);
              "focusout" === a2 && (xa = h3._wrapperState) && xa.controlled && "number" === h3.type && cb(h3, "number", h3.value);
            }
            xa = d3 ? ue(d3) : window;
            switch (a2) {
              case "focusin":
                if (me(xa) || "true" === xa.contentEditable)
                  Qe = xa, Re = d3, Se = null;
                break;
              case "focusout":
                Se = Re = Qe = null;
                break;
              case "mousedown":
                Te = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                Te = false;
                Ue(g3, c3, e3);
                break;
              case "selectionchange":
                if (Pe)
                  break;
              case "keydown":
              case "keyup":
                Ue(g3, c3, e3);
            }
            var $a;
            if (ae)
              b: {
                switch (a2) {
                  case "compositionstart":
                    var ba = "onCompositionStart";
                    break b;
                  case "compositionend":
                    ba = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    ba = "onCompositionUpdate";
                    break b;
                }
                ba = void 0;
              }
            else
              ie ? ge(a2, c3) && (ba = "onCompositionEnd") : "keydown" === a2 && 229 === c3.keyCode && (ba = "onCompositionStart");
            ba && (de && "ko" !== c3.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d3, ba), 0 < xa.length && (ba = new Ld(ba, a2, null, c3, e3), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c3), null !== $a && (ba.data = $a))));
            if ($a = ce ? je(a2, c3) : ke(a2, c3))
              d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld("onBeforeInput", "beforeinput", null, c3, e3), g3.push({ event: e3, listeners: d3 }), e3.data = $a);
          }
          se(g3, b2);
        });
      }
      function tf(a2, b2, c3) {
        return { instance: a2, listener: b2, currentTarget: c3 };
      }
      function oe(a2, b2) {
        for (var c3 = b2 + "Capture", d2 = []; null !== a2; ) {
          var e2 = a2, f2 = e2.stateNode;
          5 === e2.tag && null !== f2 && (e2 = f2, f2 = Kb(a2, c3), null != f2 && d2.unshift(tf(a2, f2, e2)), f2 = Kb(a2, b2), null != f2 && d2.push(tf(a2, f2, e2)));
          a2 = a2.return;
        }
        return d2;
      }
      function vf(a2) {
        if (null === a2)
          return null;
        do
          a2 = a2.return;
        while (a2 && 5 !== a2.tag);
        return a2 ? a2 : null;
      }
      function wf(a2, b2, c3, d2, e2) {
        for (var f2 = b2._reactName, g2 = []; null !== c3 && c3 !== d2; ) {
          var h2 = c3, k2 = h2.alternate, l2 = h2.stateNode;
          if (null !== k2 && k2 === d2)
            break;
          5 === h2.tag && null !== l2 && (h2 = l2, e2 ? (k2 = Kb(c3, f2), null != k2 && g2.unshift(tf(c3, k2, h2))) : e2 || (k2 = Kb(c3, f2), null != k2 && g2.push(tf(c3, k2, h2))));
          c3 = c3.return;
        }
        0 !== g2.length && a2.push({ event: b2, listeners: g2 });
      }
      var xf = /\r\n?/g;
      var yf = /\u0000|\uFFFD/g;
      function zf(a2) {
        return ("string" === typeof a2 ? a2 : "" + a2).replace(xf, "\n").replace(yf, "");
      }
      function Af(a2, b2, c3) {
        b2 = zf(b2);
        if (zf(a2) !== b2 && c3)
          throw Error(p2(425));
      }
      function Bf() {
      }
      var Cf = null;
      var Df = null;
      function Ef(a2, b2) {
        return "textarea" === a2 || "noscript" === a2 || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
      }
      var Ff = "function" === typeof setTimeout ? setTimeout : void 0;
      var Gf = "function" === typeof clearTimeout ? clearTimeout : void 0;
      var Hf = "function" === typeof Promise ? Promise : void 0;
      var Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a2) {
        return Hf.resolve(null).then(a2).catch(If);
      } : Ff;
      function If(a2) {
        setTimeout(function() {
          throw a2;
        });
      }
      function Kf(a2, b2) {
        var c3 = b2, d2 = 0;
        do {
          var e2 = c3.nextSibling;
          a2.removeChild(c3);
          if (e2 && 8 === e2.nodeType)
            if (c3 = e2.data, "/$" === c3) {
              if (0 === d2) {
                a2.removeChild(e2);
                bd(b2);
                return;
              }
              d2--;
            } else
              "$" !== c3 && "$?" !== c3 && "$!" !== c3 || d2++;
          c3 = e2;
        } while (c3);
        bd(b2);
      }
      function Lf(a2) {
        for (; null != a2; a2 = a2.nextSibling) {
          var b2 = a2.nodeType;
          if (1 === b2 || 3 === b2)
            break;
          if (8 === b2) {
            b2 = a2.data;
            if ("$" === b2 || "$!" === b2 || "$?" === b2)
              break;
            if ("/$" === b2)
              return null;
          }
        }
        return a2;
      }
      function Mf(a2) {
        a2 = a2.previousSibling;
        for (var b2 = 0; a2; ) {
          if (8 === a2.nodeType) {
            var c3 = a2.data;
            if ("$" === c3 || "$!" === c3 || "$?" === c3) {
              if (0 === b2)
                return a2;
              b2--;
            } else
              "/$" === c3 && b2++;
          }
          a2 = a2.previousSibling;
        }
        return null;
      }
      var Nf = Math.random().toString(36).slice(2);
      var Of = "__reactFiber$" + Nf;
      var Pf = "__reactProps$" + Nf;
      var uf = "__reactContainer$" + Nf;
      var of = "__reactEvents$" + Nf;
      var Qf = "__reactListeners$" + Nf;
      var Rf = "__reactHandles$" + Nf;
      function Wc(a2) {
        var b2 = a2[Of];
        if (b2)
          return b2;
        for (var c3 = a2.parentNode; c3; ) {
          if (b2 = c3[uf] || c3[Of]) {
            c3 = b2.alternate;
            if (null !== b2.child || null !== c3 && null !== c3.child)
              for (a2 = Mf(a2); null !== a2; ) {
                if (c3 = a2[Of])
                  return c3;
                a2 = Mf(a2);
              }
            return b2;
          }
          a2 = c3;
          c3 = a2.parentNode;
        }
        return null;
      }
      function Cb(a2) {
        a2 = a2[Of] || a2[uf];
        return !a2 || 5 !== a2.tag && 6 !== a2.tag && 13 !== a2.tag && 3 !== a2.tag ? null : a2;
      }
      function ue(a2) {
        if (5 === a2.tag || 6 === a2.tag)
          return a2.stateNode;
        throw Error(p2(33));
      }
      function Db(a2) {
        return a2[Pf] || null;
      }
      var Sf = [];
      var Tf = -1;
      function Uf(a2) {
        return { current: a2 };
      }
      function E2(a2) {
        0 > Tf || (a2.current = Sf[Tf], Sf[Tf] = null, Tf--);
      }
      function G2(a2, b2) {
        Tf++;
        Sf[Tf] = a2.current;
        a2.current = b2;
      }
      var Vf = {};
      var H2 = Uf(Vf);
      var Wf = Uf(false);
      var Xf = Vf;
      function Yf(a2, b2) {
        var c3 = a2.type.contextTypes;
        if (!c3)
          return Vf;
        var d2 = a2.stateNode;
        if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
          return d2.__reactInternalMemoizedMaskedChildContext;
        var e2 = {}, f2;
        for (f2 in c3)
          e2[f2] = b2[f2];
        d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = b2, a2.__reactInternalMemoizedMaskedChildContext = e2);
        return e2;
      }
      function Zf(a2) {
        a2 = a2.childContextTypes;
        return null !== a2 && void 0 !== a2;
      }
      function $f() {
        E2(Wf);
        E2(H2);
      }
      function ag(a2, b2, c3) {
        if (H2.current !== Vf)
          throw Error(p2(168));
        G2(H2, b2);
        G2(Wf, c3);
      }
      function bg(a2, b2, c3) {
        var d2 = a2.stateNode;
        b2 = b2.childContextTypes;
        if ("function" !== typeof d2.getChildContext)
          return c3;
        d2 = d2.getChildContext();
        for (var e2 in d2)
          if (!(e2 in b2))
            throw Error(p2(108, Ra(a2) || "Unknown", e2));
        return A2({}, c3, d2);
      }
      function cg(a2) {
        a2 = (a2 = a2.stateNode) && a2.__reactInternalMemoizedMergedChildContext || Vf;
        Xf = H2.current;
        G2(H2, a2);
        G2(Wf, Wf.current);
        return true;
      }
      function dg(a2, b2, c3) {
        var d2 = a2.stateNode;
        if (!d2)
          throw Error(p2(169));
        c3 ? (a2 = bg(a2, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a2, E2(Wf), E2(H2), G2(H2, a2)) : E2(Wf);
        G2(Wf, c3);
      }
      var eg = null;
      var fg = false;
      var gg = false;
      function hg(a2) {
        null === eg ? eg = [a2] : eg.push(a2);
      }
      function ig(a2) {
        fg = true;
        hg(a2);
      }
      function jg() {
        if (!gg && null !== eg) {
          gg = true;
          var a2 = 0, b2 = C2;
          try {
            var c3 = eg;
            for (C2 = 1; a2 < c3.length; a2++) {
              var d2 = c3[a2];
              do
                d2 = d2(true);
              while (null !== d2);
            }
            eg = null;
            fg = false;
          } catch (e2) {
            throw null !== eg && (eg = eg.slice(a2 + 1)), ac(fc, jg), e2;
          } finally {
            C2 = b2, gg = false;
          }
        }
        return null;
      }
      var kg = [];
      var lg = 0;
      var mg = null;
      var ng = 0;
      var og = [];
      var pg = 0;
      var qg = null;
      var rg = 1;
      var sg = "";
      function tg(a2, b2) {
        kg[lg++] = ng;
        kg[lg++] = mg;
        mg = a2;
        ng = b2;
      }
      function ug(a2, b2, c3) {
        og[pg++] = rg;
        og[pg++] = sg;
        og[pg++] = qg;
        qg = a2;
        var d2 = rg;
        a2 = sg;
        var e2 = 32 - oc(d2) - 1;
        d2 &= ~(1 << e2);
        c3 += 1;
        var f2 = 32 - oc(b2) + e2;
        if (30 < f2) {
          var g2 = e2 - e2 % 5;
          f2 = (d2 & (1 << g2) - 1).toString(32);
          d2 >>= g2;
          e2 -= g2;
          rg = 1 << 32 - oc(b2) + e2 | c3 << e2 | d2;
          sg = f2 + a2;
        } else
          rg = 1 << f2 | c3 << e2 | d2, sg = a2;
      }
      function vg(a2) {
        null !== a2.return && (tg(a2, 1), ug(a2, 1, 0));
      }
      function wg(a2) {
        for (; a2 === mg; )
          mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
        for (; a2 === qg; )
          qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
      }
      var xg = null;
      var yg = null;
      var I2 = false;
      var zg = null;
      function Ag(a2, b2) {
        var c3 = Bg(5, null, null, 0);
        c3.elementType = "DELETED";
        c3.stateNode = b2;
        c3.return = a2;
        b2 = a2.deletions;
        null === b2 ? (a2.deletions = [c3], a2.flags |= 16) : b2.push(c3);
      }
      function Cg(a2, b2) {
        switch (a2.tag) {
          case 5:
            var c3 = a2.type;
            b2 = 1 !== b2.nodeType || c3.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
            return null !== b2 ? (a2.stateNode = b2, xg = a2, yg = Lf(b2.firstChild), true) : false;
          case 6:
            return b2 = "" === a2.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a2.stateNode = b2, xg = a2, yg = null, true) : false;
          case 13:
            return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c3 = null !== qg ? { id: rg, overflow: sg } : null, a2.memoizedState = { dehydrated: b2, treeContext: c3, retryLane: 1073741824 }, c3 = Bg(18, null, null, 0), c3.stateNode = b2, c3.return = a2, a2.child = c3, xg = a2, yg = null, true) : false;
          default:
            return false;
        }
      }
      function Dg(a2) {
        return 0 !== (a2.mode & 1) && 0 === (a2.flags & 128);
      }
      function Eg(a2) {
        if (I2) {
          var b2 = yg;
          if (b2) {
            var c3 = b2;
            if (!Cg(a2, b2)) {
              if (Dg(a2))
                throw Error(p2(418));
              b2 = Lf(c3.nextSibling);
              var d2 = xg;
              b2 && Cg(a2, b2) ? Ag(d2, c3) : (a2.flags = a2.flags & -4097 | 2, I2 = false, xg = a2);
            }
          } else {
            if (Dg(a2))
              throw Error(p2(418));
            a2.flags = a2.flags & -4097 | 2;
            I2 = false;
            xg = a2;
          }
        }
      }
      function Fg(a2) {
        for (a2 = a2.return; null !== a2 && 5 !== a2.tag && 3 !== a2.tag && 13 !== a2.tag; )
          a2 = a2.return;
        xg = a2;
      }
      function Gg(a2) {
        if (a2 !== xg)
          return false;
        if (!I2)
          return Fg(a2), I2 = true, false;
        var b2;
        (b2 = 3 !== a2.tag) && !(b2 = 5 !== a2.tag) && (b2 = a2.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a2.type, a2.memoizedProps));
        if (b2 && (b2 = yg)) {
          if (Dg(a2))
            throw Hg(), Error(p2(418));
          for (; b2; )
            Ag(a2, b2), b2 = Lf(b2.nextSibling);
        }
        Fg(a2);
        if (13 === a2.tag) {
          a2 = a2.memoizedState;
          a2 = null !== a2 ? a2.dehydrated : null;
          if (!a2)
            throw Error(p2(317));
          a: {
            a2 = a2.nextSibling;
            for (b2 = 0; a2; ) {
              if (8 === a2.nodeType) {
                var c3 = a2.data;
                if ("/$" === c3) {
                  if (0 === b2) {
                    yg = Lf(a2.nextSibling);
                    break a;
                  }
                  b2--;
                } else
                  "$" !== c3 && "$!" !== c3 && "$?" !== c3 || b2++;
              }
              a2 = a2.nextSibling;
            }
            yg = null;
          }
        } else
          yg = xg ? Lf(a2.stateNode.nextSibling) : null;
        return true;
      }
      function Hg() {
        for (var a2 = yg; a2; )
          a2 = Lf(a2.nextSibling);
      }
      function Ig() {
        yg = xg = null;
        I2 = false;
      }
      function Jg(a2) {
        null === zg ? zg = [a2] : zg.push(a2);
      }
      var Kg = ua.ReactCurrentBatchConfig;
      function Lg(a2, b2) {
        if (a2 && a2.defaultProps) {
          b2 = A2({}, b2);
          a2 = a2.defaultProps;
          for (var c3 in a2)
            void 0 === b2[c3] && (b2[c3] = a2[c3]);
          return b2;
        }
        return b2;
      }
      var Mg = Uf(null);
      var Ng = null;
      var Og = null;
      var Pg = null;
      function Qg() {
        Pg = Og = Ng = null;
      }
      function Rg(a2) {
        var b2 = Mg.current;
        E2(Mg);
        a2._currentValue = b2;
      }
      function Sg(a2, b2, c3) {
        for (; null !== a2; ) {
          var d2 = a2.alternate;
          (a2.childLanes & b2) !== b2 ? (a2.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
          if (a2 === c3)
            break;
          a2 = a2.return;
        }
      }
      function Tg(a2, b2) {
        Ng = a2;
        Pg = Og = null;
        a2 = a2.dependencies;
        null !== a2 && null !== a2.firstContext && (0 !== (a2.lanes & b2) && (Ug = true), a2.firstContext = null);
      }
      function Vg(a2) {
        var b2 = a2._currentValue;
        if (Pg !== a2)
          if (a2 = { context: a2, memoizedValue: b2, next: null }, null === Og) {
            if (null === Ng)
              throw Error(p2(308));
            Og = a2;
            Ng.dependencies = { lanes: 0, firstContext: a2 };
          } else
            Og = Og.next = a2;
        return b2;
      }
      var Wg = null;
      function Xg(a2) {
        null === Wg ? Wg = [a2] : Wg.push(a2);
      }
      function Yg(a2, b2, c3, d2) {
        var e2 = b2.interleaved;
        null === e2 ? (c3.next = c3, Xg(b2)) : (c3.next = e2.next, e2.next = c3);
        b2.interleaved = c3;
        return Zg(a2, d2);
      }
      function Zg(a2, b2) {
        a2.lanes |= b2;
        var c3 = a2.alternate;
        null !== c3 && (c3.lanes |= b2);
        c3 = a2;
        for (a2 = a2.return; null !== a2; )
          a2.childLanes |= b2, c3 = a2.alternate, null !== c3 && (c3.childLanes |= b2), c3 = a2, a2 = a2.return;
        return 3 === c3.tag ? c3.stateNode : null;
      }
      var $g = false;
      function ah(a2) {
        a2.updateQueue = { baseState: a2.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
      }
      function bh(a2, b2) {
        a2 = a2.updateQueue;
        b2.updateQueue === a2 && (b2.updateQueue = { baseState: a2.baseState, firstBaseUpdate: a2.firstBaseUpdate, lastBaseUpdate: a2.lastBaseUpdate, shared: a2.shared, effects: a2.effects });
      }
      function ch(a2, b2) {
        return { eventTime: a2, lane: b2, tag: 0, payload: null, callback: null, next: null };
      }
      function dh(a2, b2, c3) {
        var d2 = a2.updateQueue;
        if (null === d2)
          return null;
        d2 = d2.shared;
        if (0 !== (K & 2)) {
          var e2 = d2.pending;
          null === e2 ? b2.next = b2 : (b2.next = e2.next, e2.next = b2);
          d2.pending = b2;
          return Zg(a2, c3);
        }
        e2 = d2.interleaved;
        null === e2 ? (b2.next = b2, Xg(d2)) : (b2.next = e2.next, e2.next = b2);
        d2.interleaved = b2;
        return Zg(a2, c3);
      }
      function eh(a2, b2, c3) {
        b2 = b2.updateQueue;
        if (null !== b2 && (b2 = b2.shared, 0 !== (c3 & 4194240))) {
          var d2 = b2.lanes;
          d2 &= a2.pendingLanes;
          c3 |= d2;
          b2.lanes = c3;
          Cc(a2, c3);
        }
      }
      function fh(a2, b2) {
        var c3 = a2.updateQueue, d2 = a2.alternate;
        if (null !== d2 && (d2 = d2.updateQueue, c3 === d2)) {
          var e2 = null, f2 = null;
          c3 = c3.firstBaseUpdate;
          if (null !== c3) {
            do {
              var g2 = { eventTime: c3.eventTime, lane: c3.lane, tag: c3.tag, payload: c3.payload, callback: c3.callback, next: null };
              null === f2 ? e2 = f2 = g2 : f2 = f2.next = g2;
              c3 = c3.next;
            } while (null !== c3);
            null === f2 ? e2 = f2 = b2 : f2 = f2.next = b2;
          } else
            e2 = f2 = b2;
          c3 = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
          a2.updateQueue = c3;
          return;
        }
        a2 = c3.lastBaseUpdate;
        null === a2 ? c3.firstBaseUpdate = b2 : a2.next = b2;
        c3.lastBaseUpdate = b2;
      }
      function gh(a2, b2, c3, d2) {
        var e2 = a2.updateQueue;
        $g = false;
        var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h2 = e2.shared.pending;
        if (null !== h2) {
          e2.shared.pending = null;
          var k2 = h2, l2 = k2.next;
          k2.next = null;
          null === g2 ? f2 = l2 : g2.next = l2;
          g2 = k2;
          var m2 = a2.alternate;
          null !== m2 && (m2 = m2.updateQueue, h2 = m2.lastBaseUpdate, h2 !== g2 && (null === h2 ? m2.firstBaseUpdate = l2 : h2.next = l2, m2.lastBaseUpdate = k2));
        }
        if (null !== f2) {
          var q2 = e2.baseState;
          g2 = 0;
          m2 = l2 = k2 = null;
          h2 = f2;
          do {
            var r2 = h2.lane, y2 = h2.eventTime;
            if ((d2 & r2) === r2) {
              null !== m2 && (m2 = m2.next = {
                eventTime: y2,
                lane: 0,
                tag: h2.tag,
                payload: h2.payload,
                callback: h2.callback,
                next: null
              });
              a: {
                var n2 = a2, t2 = h2;
                r2 = b2;
                y2 = c3;
                switch (t2.tag) {
                  case 1:
                    n2 = t2.payload;
                    if ("function" === typeof n2) {
                      q2 = n2.call(y2, q2, r2);
                      break a;
                    }
                    q2 = n2;
                    break a;
                  case 3:
                    n2.flags = n2.flags & -65537 | 128;
                  case 0:
                    n2 = t2.payload;
                    r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
                    if (null === r2 || void 0 === r2)
                      break a;
                    q2 = A2({}, q2, r2);
                    break a;
                  case 2:
                    $g = true;
                }
              }
              null !== h2.callback && 0 !== h2.lane && (a2.flags |= 64, r2 = e2.effects, null === r2 ? e2.effects = [h2] : r2.push(h2));
            } else
              y2 = { eventTime: y2, lane: r2, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
            h2 = h2.next;
            if (null === h2)
              if (h2 = e2.shared.pending, null === h2)
                break;
              else
                r2 = h2, h2 = r2.next, r2.next = null, e2.lastBaseUpdate = r2, e2.shared.pending = null;
          } while (1);
          null === m2 && (k2 = q2);
          e2.baseState = k2;
          e2.firstBaseUpdate = l2;
          e2.lastBaseUpdate = m2;
          b2 = e2.shared.interleaved;
          if (null !== b2) {
            e2 = b2;
            do
              g2 |= e2.lane, e2 = e2.next;
            while (e2 !== b2);
          } else
            null === f2 && (e2.shared.lanes = 0);
          hh |= g2;
          a2.lanes = g2;
          a2.memoizedState = q2;
        }
      }
      function ih(a2, b2, c3) {
        a2 = b2.effects;
        b2.effects = null;
        if (null !== a2)
          for (b2 = 0; b2 < a2.length; b2++) {
            var d2 = a2[b2], e2 = d2.callback;
            if (null !== e2) {
              d2.callback = null;
              d2 = c3;
              if ("function" !== typeof e2)
                throw Error(p2(191, e2));
              e2.call(d2);
            }
          }
      }
      var jh = new aa.Component().refs;
      function kh(a2, b2, c3, d2) {
        b2 = a2.memoizedState;
        c3 = c3(d2, b2);
        c3 = null === c3 || void 0 === c3 ? b2 : A2({}, b2, c3);
        a2.memoizedState = c3;
        0 === a2.lanes && (a2.updateQueue.baseState = c3);
      }
      var nh = { isMounted: function(a2) {
        return (a2 = a2._reactInternals) ? Vb(a2) === a2 : false;
      }, enqueueSetState: function(a2, b2, c3) {
        a2 = a2._reactInternals;
        var d2 = L2(), e2 = lh(a2), f2 = ch(d2, e2);
        f2.payload = b2;
        void 0 !== c3 && null !== c3 && (f2.callback = c3);
        b2 = dh(a2, f2, e2);
        null !== b2 && (mh(b2, a2, e2, d2), eh(b2, a2, e2));
      }, enqueueReplaceState: function(a2, b2, c3) {
        a2 = a2._reactInternals;
        var d2 = L2(), e2 = lh(a2), f2 = ch(d2, e2);
        f2.tag = 1;
        f2.payload = b2;
        void 0 !== c3 && null !== c3 && (f2.callback = c3);
        b2 = dh(a2, f2, e2);
        null !== b2 && (mh(b2, a2, e2, d2), eh(b2, a2, e2));
      }, enqueueForceUpdate: function(a2, b2) {
        a2 = a2._reactInternals;
        var c3 = L2(), d2 = lh(a2), e2 = ch(c3, d2);
        e2.tag = 2;
        void 0 !== b2 && null !== b2 && (e2.callback = b2);
        b2 = dh(a2, e2, d2);
        null !== b2 && (mh(b2, a2, d2, c3), eh(b2, a2, d2));
      } };
      function oh(a2, b2, c3, d2, e2, f2, g2) {
        a2 = a2.stateNode;
        return "function" === typeof a2.shouldComponentUpdate ? a2.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie(c3, d2) || !Ie(e2, f2) : true;
      }
      function ph(a2, b2, c3) {
        var d2 = false, e2 = Vf;
        var f2 = b2.contextType;
        "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e2 = Zf(b2) ? Xf : H2.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a2, e2) : Vf);
        b2 = new b2(c3, f2);
        a2.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
        b2.updater = nh;
        a2.stateNode = b2;
        b2._reactInternals = a2;
        d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = e2, a2.__reactInternalMemoizedMaskedChildContext = f2);
        return b2;
      }
      function qh(a2, b2, c3, d2) {
        a2 = b2.state;
        "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c3, d2);
        "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c3, d2);
        b2.state !== a2 && nh.enqueueReplaceState(b2, b2.state, null);
      }
      function rh(a2, b2, c3, d2) {
        var e2 = a2.stateNode;
        e2.props = c3;
        e2.state = a2.memoizedState;
        e2.refs = jh;
        ah(a2);
        var f2 = b2.contextType;
        "object" === typeof f2 && null !== f2 ? e2.context = Vg(f2) : (f2 = Zf(b2) ? Xf : H2.current, e2.context = Yf(a2, f2));
        e2.state = a2.memoizedState;
        f2 = b2.getDerivedStateFromProps;
        "function" === typeof f2 && (kh(a2, b2, f2, c3), e2.state = a2.memoizedState);
        "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b2 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b2 !== e2.state && nh.enqueueReplaceState(e2, e2.state, null), gh(a2, c3, e2, d2), e2.state = a2.memoizedState);
        "function" === typeof e2.componentDidMount && (a2.flags |= 4194308);
      }
      function sh(a2, b2, c3) {
        a2 = c3.ref;
        if (null !== a2 && "function" !== typeof a2 && "object" !== typeof a2) {
          if (c3._owner) {
            c3 = c3._owner;
            if (c3) {
              if (1 !== c3.tag)
                throw Error(p2(309));
              var d2 = c3.stateNode;
            }
            if (!d2)
              throw Error(p2(147, a2));
            var e2 = d2, f2 = "" + a2;
            if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
              return b2.ref;
            b2 = function(a3) {
              var b3 = e2.refs;
              b3 === jh && (b3 = e2.refs = {});
              null === a3 ? delete b3[f2] : b3[f2] = a3;
            };
            b2._stringRef = f2;
            return b2;
          }
          if ("string" !== typeof a2)
            throw Error(p2(284));
          if (!c3._owner)
            throw Error(p2(290, a2));
        }
        return a2;
      }
      function th(a2, b2) {
        a2 = Object.prototype.toString.call(b2);
        throw Error(p2(31, "[object Object]" === a2 ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a2));
      }
      function uh(a2) {
        var b2 = a2._init;
        return b2(a2._payload);
      }
      function vh(a2) {
        function b2(b3, c4) {
          if (a2) {
            var d3 = b3.deletions;
            null === d3 ? (b3.deletions = [c4], b3.flags |= 16) : d3.push(c4);
          }
        }
        function c3(c4, d3) {
          if (!a2)
            return null;
          for (; null !== d3; )
            b2(c4, d3), d3 = d3.sibling;
          return null;
        }
        function d2(a3, b3) {
          for (a3 = /* @__PURE__ */ new Map(); null !== b3; )
            null !== b3.key ? a3.set(b3.key, b3) : a3.set(b3.index, b3), b3 = b3.sibling;
          return a3;
        }
        function e2(a3, b3) {
          a3 = wh(a3, b3);
          a3.index = 0;
          a3.sibling = null;
          return a3;
        }
        function f2(b3, c4, d3) {
          b3.index = d3;
          if (!a2)
            return b3.flags |= 1048576, c4;
          d3 = b3.alternate;
          if (null !== d3)
            return d3 = d3.index, d3 < c4 ? (b3.flags |= 2, c4) : d3;
          b3.flags |= 2;
          return c4;
        }
        function g2(b3) {
          a2 && null === b3.alternate && (b3.flags |= 2);
          return b3;
        }
        function h2(a3, b3, c4, d3) {
          if (null === b3 || 6 !== b3.tag)
            return b3 = xh(c4, a3.mode, d3), b3.return = a3, b3;
          b3 = e2(b3, c4);
          b3.return = a3;
          return b3;
        }
        function k2(a3, b3, c4, d3) {
          var f3 = c4.type;
          if (f3 === ya)
            return m2(a3, b3, c4.props.children, d3, c4.key);
          if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b3.type))
            return d3 = e2(b3, c4.props), d3.ref = sh(a3, b3, c4), d3.return = a3, d3;
          d3 = yh(c4.type, c4.key, c4.props, null, a3.mode, d3);
          d3.ref = sh(a3, b3, c4);
          d3.return = a3;
          return d3;
        }
        function l2(a3, b3, c4, d3) {
          if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c4.containerInfo || b3.stateNode.implementation !== c4.implementation)
            return b3 = zh(c4, a3.mode, d3), b3.return = a3, b3;
          b3 = e2(b3, c4.children || []);
          b3.return = a3;
          return b3;
        }
        function m2(a3, b3, c4, d3, f3) {
          if (null === b3 || 7 !== b3.tag)
            return b3 = Ah(c4, a3.mode, d3, f3), b3.return = a3, b3;
          b3 = e2(b3, c4);
          b3.return = a3;
          return b3;
        }
        function q2(a3, b3, c4) {
          if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
            return b3 = xh("" + b3, a3.mode, c4), b3.return = a3, b3;
          if ("object" === typeof b3 && null !== b3) {
            switch (b3.$$typeof) {
              case va:
                return c4 = yh(b3.type, b3.key, b3.props, null, a3.mode, c4), c4.ref = sh(a3, null, b3), c4.return = a3, c4;
              case wa:
                return b3 = zh(b3, a3.mode, c4), b3.return = a3, b3;
              case Ha:
                var d3 = b3._init;
                return q2(a3, d3(b3._payload), c4);
            }
            if (eb(b3) || Ka(b3))
              return b3 = Ah(b3, a3.mode, c4, null), b3.return = a3, b3;
            th(a3, b3);
          }
          return null;
        }
        function r2(a3, b3, c4, d3) {
          var e3 = null !== b3 ? b3.key : null;
          if ("string" === typeof c4 && "" !== c4 || "number" === typeof c4)
            return null !== e3 ? null : h2(a3, b3, "" + c4, d3);
          if ("object" === typeof c4 && null !== c4) {
            switch (c4.$$typeof) {
              case va:
                return c4.key === e3 ? k2(a3, b3, c4, d3) : null;
              case wa:
                return c4.key === e3 ? l2(a3, b3, c4, d3) : null;
              case Ha:
                return e3 = c4._init, r2(
                  a3,
                  b3,
                  e3(c4._payload),
                  d3
                );
            }
            if (eb(c4) || Ka(c4))
              return null !== e3 ? null : m2(a3, b3, c4, d3, null);
            th(a3, c4);
          }
          return null;
        }
        function y2(a3, b3, c4, d3, e3) {
          if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
            return a3 = a3.get(c4) || null, h2(b3, a3, "" + d3, e3);
          if ("object" === typeof d3 && null !== d3) {
            switch (d3.$$typeof) {
              case va:
                return a3 = a3.get(null === d3.key ? c4 : d3.key) || null, k2(b3, a3, d3, e3);
              case wa:
                return a3 = a3.get(null === d3.key ? c4 : d3.key) || null, l2(b3, a3, d3, e3);
              case Ha:
                var f3 = d3._init;
                return y2(a3, b3, c4, f3(d3._payload), e3);
            }
            if (eb(d3) || Ka(d3))
              return a3 = a3.get(c4) || null, m2(b3, a3, d3, e3, null);
            th(b3, d3);
          }
          return null;
        }
        function n2(e3, g3, h3, k3) {
          for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h3.length; w2++) {
            u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
            var n3 = r2(e3, u2, h3[w2], k3);
            if (null === n3) {
              null === u2 && (u2 = x2);
              break;
            }
            a2 && u2 && null === n3.alternate && b2(e3, u2);
            g3 = f2(n3, g3, w2);
            null === m3 ? l3 = n3 : m3.sibling = n3;
            m3 = n3;
            u2 = x2;
          }
          if (w2 === h3.length)
            return c3(e3, u2), I2 && tg(e3, w2), l3;
          if (null === u2) {
            for (; w2 < h3.length; w2++)
              u2 = q2(e3, h3[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
            I2 && tg(e3, w2);
            return l3;
          }
          for (u2 = d2(e3, u2); w2 < h3.length; w2++)
            x2 = y2(u2, e3, w2, h3[w2], k3), null !== x2 && (a2 && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
          a2 && u2.forEach(function(a3) {
            return b2(e3, a3);
          });
          I2 && tg(e3, w2);
          return l3;
        }
        function t2(e3, g3, h3, k3) {
          var l3 = Ka(h3);
          if ("function" !== typeof l3)
            throw Error(p2(150));
          h3 = l3.call(h3);
          if (null == h3)
            throw Error(p2(151));
          for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h3.next(); null !== m3 && !n3.done; w2++, n3 = h3.next()) {
            m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
            var t3 = r2(e3, m3, n3.value, k3);
            if (null === t3) {
              null === m3 && (m3 = x2);
              break;
            }
            a2 && m3 && null === t3.alternate && b2(e3, m3);
            g3 = f2(t3, g3, w2);
            null === u2 ? l3 = t3 : u2.sibling = t3;
            u2 = t3;
            m3 = x2;
          }
          if (n3.done)
            return c3(
              e3,
              m3
            ), I2 && tg(e3, w2), l3;
          if (null === m3) {
            for (; !n3.done; w2++, n3 = h3.next())
              n3 = q2(e3, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
            I2 && tg(e3, w2);
            return l3;
          }
          for (m3 = d2(e3, m3); !n3.done; w2++, n3 = h3.next())
            n3 = y2(m3, e3, w2, n3.value, k3), null !== n3 && (a2 && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
          a2 && m3.forEach(function(a3) {
            return b2(e3, a3);
          });
          I2 && tg(e3, w2);
          return l3;
        }
        function J2(a3, d3, f3, h3) {
          "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
          if ("object" === typeof f3 && null !== f3) {
            switch (f3.$$typeof) {
              case va:
                a: {
                  for (var k3 = f3.key, l3 = d3; null !== l3; ) {
                    if (l3.key === k3) {
                      k3 = f3.type;
                      if (k3 === ya) {
                        if (7 === l3.tag) {
                          c3(a3, l3.sibling);
                          d3 = e2(l3, f3.props.children);
                          d3.return = a3;
                          a3 = d3;
                          break a;
                        }
                      } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                        c3(a3, l3.sibling);
                        d3 = e2(l3, f3.props);
                        d3.ref = sh(a3, l3, f3);
                        d3.return = a3;
                        a3 = d3;
                        break a;
                      }
                      c3(a3, l3);
                      break;
                    } else
                      b2(a3, l3);
                    l3 = l3.sibling;
                  }
                  f3.type === ya ? (d3 = Ah(f3.props.children, a3.mode, h3, f3.key), d3.return = a3, a3 = d3) : (h3 = yh(f3.type, f3.key, f3.props, null, a3.mode, h3), h3.ref = sh(a3, d3, f3), h3.return = a3, a3 = h3);
                }
                return g2(a3);
              case wa:
                a: {
                  for (l3 = f3.key; null !== d3; ) {
                    if (d3.key === l3)
                      if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                        c3(a3, d3.sibling);
                        d3 = e2(d3, f3.children || []);
                        d3.return = a3;
                        a3 = d3;
                        break a;
                      } else {
                        c3(a3, d3);
                        break;
                      }
                    else
                      b2(a3, d3);
                    d3 = d3.sibling;
                  }
                  d3 = zh(f3, a3.mode, h3);
                  d3.return = a3;
                  a3 = d3;
                }
                return g2(a3);
              case Ha:
                return l3 = f3._init, J2(a3, d3, l3(f3._payload), h3);
            }
            if (eb(f3))
              return n2(a3, d3, f3, h3);
            if (Ka(f3))
              return t2(a3, d3, f3, h3);
            th(a3, f3);
          }
          return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c3(a3, d3.sibling), d3 = e2(d3, f3), d3.return = a3, a3 = d3) : (c3(a3, d3), d3 = xh(f3, a3.mode, h3), d3.return = a3, a3 = d3), g2(a3)) : c3(a3, d3);
        }
        return J2;
      }
      var Bh = vh(true);
      var Ch = vh(false);
      var Dh = {};
      var Eh = Uf(Dh);
      var Fh = Uf(Dh);
      var Gh = Uf(Dh);
      function Hh(a2) {
        if (a2 === Dh)
          throw Error(p2(174));
        return a2;
      }
      function Ih(a2, b2) {
        G2(Gh, b2);
        G2(Fh, a2);
        G2(Eh, Dh);
        a2 = b2.nodeType;
        switch (a2) {
          case 9:
          case 11:
            b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
            break;
          default:
            a2 = 8 === a2 ? b2.parentNode : b2, b2 = a2.namespaceURI || null, a2 = a2.tagName, b2 = lb(b2, a2);
        }
        E2(Eh);
        G2(Eh, b2);
      }
      function Jh() {
        E2(Eh);
        E2(Fh);
        E2(Gh);
      }
      function Kh(a2) {
        Hh(Gh.current);
        var b2 = Hh(Eh.current);
        var c3 = lb(b2, a2.type);
        b2 !== c3 && (G2(Fh, a2), G2(Eh, c3));
      }
      function Lh(a2) {
        Fh.current === a2 && (E2(Eh), E2(Fh));
      }
      var M2 = Uf(0);
      function Mh(a2) {
        for (var b2 = a2; null !== b2; ) {
          if (13 === b2.tag) {
            var c3 = b2.memoizedState;
            if (null !== c3 && (c3 = c3.dehydrated, null === c3 || "$?" === c3.data || "$!" === c3.data))
              return b2;
          } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
            if (0 !== (b2.flags & 128))
              return b2;
          } else if (null !== b2.child) {
            b2.child.return = b2;
            b2 = b2.child;
            continue;
          }
          if (b2 === a2)
            break;
          for (; null === b2.sibling; ) {
            if (null === b2.return || b2.return === a2)
              return null;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
        return null;
      }
      var Nh = [];
      function Oh() {
        for (var a2 = 0; a2 < Nh.length; a2++)
          Nh[a2]._workInProgressVersionPrimary = null;
        Nh.length = 0;
      }
      var Ph = ua.ReactCurrentDispatcher;
      var Qh = ua.ReactCurrentBatchConfig;
      var Rh = 0;
      var N2 = null;
      var O2 = null;
      var P2 = null;
      var Sh = false;
      var Th = false;
      var Uh = 0;
      var Vh = 0;
      function Q() {
        throw Error(p2(321));
      }
      function Wh(a2, b2) {
        if (null === b2)
          return false;
        for (var c3 = 0; c3 < b2.length && c3 < a2.length; c3++)
          if (!He(a2[c3], b2[c3]))
            return false;
        return true;
      }
      function Xh(a2, b2, c3, d2, e2, f2) {
        Rh = f2;
        N2 = b2;
        b2.memoizedState = null;
        b2.updateQueue = null;
        b2.lanes = 0;
        Ph.current = null === a2 || null === a2.memoizedState ? Yh : Zh;
        a2 = c3(d2, e2);
        if (Th) {
          f2 = 0;
          do {
            Th = false;
            Uh = 0;
            if (25 <= f2)
              throw Error(p2(301));
            f2 += 1;
            P2 = O2 = null;
            b2.updateQueue = null;
            Ph.current = $h;
            a2 = c3(d2, e2);
          } while (Th);
        }
        Ph.current = ai;
        b2 = null !== O2 && null !== O2.next;
        Rh = 0;
        P2 = O2 = N2 = null;
        Sh = false;
        if (b2)
          throw Error(p2(300));
        return a2;
      }
      function bi() {
        var a2 = 0 !== Uh;
        Uh = 0;
        return a2;
      }
      function ci() {
        var a2 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        null === P2 ? N2.memoizedState = P2 = a2 : P2 = P2.next = a2;
        return P2;
      }
      function di() {
        if (null === O2) {
          var a2 = N2.alternate;
          a2 = null !== a2 ? a2.memoizedState : null;
        } else
          a2 = O2.next;
        var b2 = null === P2 ? N2.memoizedState : P2.next;
        if (null !== b2)
          P2 = b2, O2 = a2;
        else {
          if (null === a2)
            throw Error(p2(310));
          O2 = a2;
          a2 = { memoizedState: O2.memoizedState, baseState: O2.baseState, baseQueue: O2.baseQueue, queue: O2.queue, next: null };
          null === P2 ? N2.memoizedState = P2 = a2 : P2 = P2.next = a2;
        }
        return P2;
      }
      function ei(a2, b2) {
        return "function" === typeof b2 ? b2(a2) : b2;
      }
      function fi(a2) {
        var b2 = di(), c3 = b2.queue;
        if (null === c3)
          throw Error(p2(311));
        c3.lastRenderedReducer = a2;
        var d2 = O2, e2 = d2.baseQueue, f2 = c3.pending;
        if (null !== f2) {
          if (null !== e2) {
            var g2 = e2.next;
            e2.next = f2.next;
            f2.next = g2;
          }
          d2.baseQueue = e2 = f2;
          c3.pending = null;
        }
        if (null !== e2) {
          f2 = e2.next;
          d2 = d2.baseState;
          var h2 = g2 = null, k2 = null, l2 = f2;
          do {
            var m2 = l2.lane;
            if ((Rh & m2) === m2)
              null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a2(d2, l2.action);
            else {
              var q2 = {
                lane: m2,
                action: l2.action,
                hasEagerState: l2.hasEagerState,
                eagerState: l2.eagerState,
                next: null
              };
              null === k2 ? (h2 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
              N2.lanes |= m2;
              hh |= m2;
            }
            l2 = l2.next;
          } while (null !== l2 && l2 !== f2);
          null === k2 ? g2 = d2 : k2.next = h2;
          He(d2, b2.memoizedState) || (Ug = true);
          b2.memoizedState = d2;
          b2.baseState = g2;
          b2.baseQueue = k2;
          c3.lastRenderedState = d2;
        }
        a2 = c3.interleaved;
        if (null !== a2) {
          e2 = a2;
          do
            f2 = e2.lane, N2.lanes |= f2, hh |= f2, e2 = e2.next;
          while (e2 !== a2);
        } else
          null === e2 && (c3.lanes = 0);
        return [b2.memoizedState, c3.dispatch];
      }
      function gi(a2) {
        var b2 = di(), c3 = b2.queue;
        if (null === c3)
          throw Error(p2(311));
        c3.lastRenderedReducer = a2;
        var d2 = c3.dispatch, e2 = c3.pending, f2 = b2.memoizedState;
        if (null !== e2) {
          c3.pending = null;
          var g2 = e2 = e2.next;
          do
            f2 = a2(f2, g2.action), g2 = g2.next;
          while (g2 !== e2);
          He(f2, b2.memoizedState) || (Ug = true);
          b2.memoizedState = f2;
          null === b2.baseQueue && (b2.baseState = f2);
          c3.lastRenderedState = f2;
        }
        return [f2, d2];
      }
      function hi() {
      }
      function ii(a2, b2) {
        var c3 = N2, d2 = di(), e2 = b2(), f2 = !He(d2.memoizedState, e2);
        f2 && (d2.memoizedState = e2, Ug = true);
        d2 = d2.queue;
        ji(ki.bind(null, c3, d2, a2), [a2]);
        if (d2.getSnapshot !== b2 || f2 || null !== P2 && P2.memoizedState.tag & 1) {
          c3.flags |= 2048;
          li(9, mi.bind(null, c3, d2, e2, b2), void 0, null);
          if (null === R2)
            throw Error(p2(349));
          0 !== (Rh & 30) || ni(c3, b2, e2);
        }
        return e2;
      }
      function ni(a2, b2, c3) {
        a2.flags |= 16384;
        a2 = { getSnapshot: b2, value: c3 };
        b2 = N2.updateQueue;
        null === b2 ? (b2 = { lastEffect: null, stores: null }, N2.updateQueue = b2, b2.stores = [a2]) : (c3 = b2.stores, null === c3 ? b2.stores = [a2] : c3.push(a2));
      }
      function mi(a2, b2, c3, d2) {
        b2.value = c3;
        b2.getSnapshot = d2;
        oi(b2) && pi(a2);
      }
      function ki(a2, b2, c3) {
        return c3(function() {
          oi(b2) && pi(a2);
        });
      }
      function oi(a2) {
        var b2 = a2.getSnapshot;
        a2 = a2.value;
        try {
          var c3 = b2();
          return !He(a2, c3);
        } catch (d2) {
          return true;
        }
      }
      function pi(a2) {
        var b2 = Zg(a2, 1);
        null !== b2 && mh(b2, a2, 1, -1);
      }
      function qi(a2) {
        var b2 = ci();
        "function" === typeof a2 && (a2 = a2());
        b2.memoizedState = b2.baseState = a2;
        a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a2 };
        b2.queue = a2;
        a2 = a2.dispatch = ri.bind(null, N2, a2);
        return [b2.memoizedState, a2];
      }
      function li(a2, b2, c3, d2) {
        a2 = { tag: a2, create: b2, destroy: c3, deps: d2, next: null };
        b2 = N2.updateQueue;
        null === b2 ? (b2 = { lastEffect: null, stores: null }, N2.updateQueue = b2, b2.lastEffect = a2.next = a2) : (c3 = b2.lastEffect, null === c3 ? b2.lastEffect = a2.next = a2 : (d2 = c3.next, c3.next = a2, a2.next = d2, b2.lastEffect = a2));
        return a2;
      }
      function si() {
        return di().memoizedState;
      }
      function ti(a2, b2, c3, d2) {
        var e2 = ci();
        N2.flags |= a2;
        e2.memoizedState = li(1 | b2, c3, void 0, void 0 === d2 ? null : d2);
      }
      function ui(a2, b2, c3, d2) {
        var e2 = di();
        d2 = void 0 === d2 ? null : d2;
        var f2 = void 0;
        if (null !== O2) {
          var g2 = O2.memoizedState;
          f2 = g2.destroy;
          if (null !== d2 && Wh(d2, g2.deps)) {
            e2.memoizedState = li(b2, c3, f2, d2);
            return;
          }
        }
        N2.flags |= a2;
        e2.memoizedState = li(1 | b2, c3, f2, d2);
      }
      function vi(a2, b2) {
        return ti(8390656, 8, a2, b2);
      }
      function ji(a2, b2) {
        return ui(2048, 8, a2, b2);
      }
      function wi(a2, b2) {
        return ui(4, 2, a2, b2);
      }
      function xi(a2, b2) {
        return ui(4, 4, a2, b2);
      }
      function yi(a2, b2) {
        if ("function" === typeof b2)
          return a2 = a2(), b2(a2), function() {
            b2(null);
          };
        if (null !== b2 && void 0 !== b2)
          return a2 = a2(), b2.current = a2, function() {
            b2.current = null;
          };
      }
      function zi(a2, b2, c3) {
        c3 = null !== c3 && void 0 !== c3 ? c3.concat([a2]) : null;
        return ui(4, 4, yi.bind(null, b2, a2), c3);
      }
      function Ai() {
      }
      function Bi(a2, b2) {
        var c3 = di();
        b2 = void 0 === b2 ? null : b2;
        var d2 = c3.memoizedState;
        if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
          return d2[0];
        c3.memoizedState = [a2, b2];
        return a2;
      }
      function Ci(a2, b2) {
        var c3 = di();
        b2 = void 0 === b2 ? null : b2;
        var d2 = c3.memoizedState;
        if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
          return d2[0];
        a2 = a2();
        c3.memoizedState = [a2, b2];
        return a2;
      }
      function Di(a2, b2, c3) {
        if (0 === (Rh & 21))
          return a2.baseState && (a2.baseState = false, Ug = true), a2.memoizedState = c3;
        He(c3, b2) || (c3 = yc(), N2.lanes |= c3, hh |= c3, a2.baseState = true);
        return b2;
      }
      function Ei(a2, b2) {
        var c3 = C2;
        C2 = 0 !== c3 && 4 > c3 ? c3 : 4;
        a2(true);
        var d2 = Qh.transition;
        Qh.transition = {};
        try {
          a2(false), b2();
        } finally {
          C2 = c3, Qh.transition = d2;
        }
      }
      function Fi() {
        return di().memoizedState;
      }
      function Gi(a2, b2, c3) {
        var d2 = lh(a2);
        c3 = { lane: d2, action: c3, hasEagerState: false, eagerState: null, next: null };
        if (Hi(a2))
          Ii(b2, c3);
        else if (c3 = Yg(a2, b2, c3, d2), null !== c3) {
          var e2 = L2();
          mh(c3, a2, d2, e2);
          Ji(c3, b2, d2);
        }
      }
      function ri(a2, b2, c3) {
        var d2 = lh(a2), e2 = { lane: d2, action: c3, hasEagerState: false, eagerState: null, next: null };
        if (Hi(a2))
          Ii(b2, e2);
        else {
          var f2 = a2.alternate;
          if (0 === a2.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
            try {
              var g2 = b2.lastRenderedState, h2 = f2(g2, c3);
              e2.hasEagerState = true;
              e2.eagerState = h2;
              if (He(h2, g2)) {
                var k2 = b2.interleaved;
                null === k2 ? (e2.next = e2, Xg(b2)) : (e2.next = k2.next, k2.next = e2);
                b2.interleaved = e2;
                return;
              }
            } catch (l2) {
            } finally {
            }
          c3 = Yg(a2, b2, e2, d2);
          null !== c3 && (e2 = L2(), mh(c3, a2, d2, e2), Ji(c3, b2, d2));
        }
      }
      function Hi(a2) {
        var b2 = a2.alternate;
        return a2 === N2 || null !== b2 && b2 === N2;
      }
      function Ii(a2, b2) {
        Th = Sh = true;
        var c3 = a2.pending;
        null === c3 ? b2.next = b2 : (b2.next = c3.next, c3.next = b2);
        a2.pending = b2;
      }
      function Ji(a2, b2, c3) {
        if (0 !== (c3 & 4194240)) {
          var d2 = b2.lanes;
          d2 &= a2.pendingLanes;
          c3 |= d2;
          b2.lanes = c3;
          Cc(a2, c3);
        }
      }
      var ai = { readContext: Vg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useInsertionEffect: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useDeferredValue: Q, useTransition: Q, useMutableSource: Q, useSyncExternalStore: Q, useId: Q, unstable_isNewReconciler: false };
      var Yh = { readContext: Vg, useCallback: function(a2, b2) {
        ci().memoizedState = [a2, void 0 === b2 ? null : b2];
        return a2;
      }, useContext: Vg, useEffect: vi, useImperativeHandle: function(a2, b2, c3) {
        c3 = null !== c3 && void 0 !== c3 ? c3.concat([a2]) : null;
        return ti(
          4194308,
          4,
          yi.bind(null, b2, a2),
          c3
        );
      }, useLayoutEffect: function(a2, b2) {
        return ti(4194308, 4, a2, b2);
      }, useInsertionEffect: function(a2, b2) {
        return ti(4, 2, a2, b2);
      }, useMemo: function(a2, b2) {
        var c3 = ci();
        b2 = void 0 === b2 ? null : b2;
        a2 = a2();
        c3.memoizedState = [a2, b2];
        return a2;
      }, useReducer: function(a2, b2, c3) {
        var d2 = ci();
        b2 = void 0 !== c3 ? c3(b2) : b2;
        d2.memoizedState = d2.baseState = b2;
        a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b2 };
        d2.queue = a2;
        a2 = a2.dispatch = Gi.bind(null, N2, a2);
        return [d2.memoizedState, a2];
      }, useRef: function(a2) {
        var b2 = ci();
        a2 = { current: a2 };
        return b2.memoizedState = a2;
      }, useState: qi, useDebugValue: Ai, useDeferredValue: function(a2) {
        return ci().memoizedState = a2;
      }, useTransition: function() {
        var a2 = qi(false), b2 = a2[0];
        a2 = Ei.bind(null, a2[1]);
        ci().memoizedState = a2;
        return [b2, a2];
      }, useMutableSource: function() {
      }, useSyncExternalStore: function(a2, b2, c3) {
        var d2 = N2, e2 = ci();
        if (I2) {
          if (void 0 === c3)
            throw Error(p2(407));
          c3 = c3();
        } else {
          c3 = b2();
          if (null === R2)
            throw Error(p2(349));
          0 !== (Rh & 30) || ni(d2, b2, c3);
        }
        e2.memoizedState = c3;
        var f2 = { value: c3, getSnapshot: b2 };
        e2.queue = f2;
        vi(ki.bind(
          null,
          d2,
          f2,
          a2
        ), [a2]);
        d2.flags |= 2048;
        li(9, mi.bind(null, d2, f2, c3, b2), void 0, null);
        return c3;
      }, useId: function() {
        var a2 = ci(), b2 = R2.identifierPrefix;
        if (I2) {
          var c3 = sg;
          var d2 = rg;
          c3 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c3;
          b2 = ":" + b2 + "R" + c3;
          c3 = Uh++;
          0 < c3 && (b2 += "H" + c3.toString(32));
          b2 += ":";
        } else
          c3 = Vh++, b2 = ":" + b2 + "r" + c3.toString(32) + ":";
        return a2.memoizedState = b2;
      }, unstable_isNewReconciler: false };
      var Zh = {
        readContext: Vg,
        useCallback: Bi,
        useContext: Vg,
        useEffect: ji,
        useImperativeHandle: zi,
        useInsertionEffect: wi,
        useLayoutEffect: xi,
        useMemo: Ci,
        useReducer: fi,
        useRef: si,
        useState: function() {
          return fi(ei);
        },
        useDebugValue: Ai,
        useDeferredValue: function(a2) {
          var b2 = di();
          return Di(b2, O2.memoizedState, a2);
        },
        useTransition: function() {
          var a2 = fi(ei)[0], b2 = di().memoizedState;
          return [a2, b2];
        },
        useMutableSource: hi,
        useSyncExternalStore: ii,
        useId: Fi,
        unstable_isNewReconciler: false
      };
      var $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
        return gi(ei);
      }, useDebugValue: Ai, useDeferredValue: function(a2) {
        var b2 = di();
        return null === O2 ? b2.memoizedState = a2 : Di(b2, O2.memoizedState, a2);
      }, useTransition: function() {
        var a2 = gi(ei)[0], b2 = di().memoizedState;
        return [a2, b2];
      }, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
      function Ki(a2, b2) {
        try {
          var c3 = "", d2 = b2;
          do
            c3 += Pa(d2), d2 = d2.return;
          while (d2);
          var e2 = c3;
        } catch (f2) {
          e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
        }
        return { value: a2, source: b2, stack: e2, digest: null };
      }
      function Li(a2, b2, c3) {
        return { value: a2, source: null, stack: null != c3 ? c3 : null, digest: null != b2 ? b2 : null };
      }
      function Mi(a2, b2) {
        try {
          console.error(b2.value);
        } catch (c3) {
          setTimeout(function() {
            throw c3;
          });
        }
      }
      var Ni = "function" === typeof WeakMap ? WeakMap : Map;
      function Oi(a2, b2, c3) {
        c3 = ch(-1, c3);
        c3.tag = 3;
        c3.payload = { element: null };
        var d2 = b2.value;
        c3.callback = function() {
          Pi || (Pi = true, Qi = d2);
          Mi(a2, b2);
        };
        return c3;
      }
      function Ri(a2, b2, c3) {
        c3 = ch(-1, c3);
        c3.tag = 3;
        var d2 = a2.type.getDerivedStateFromError;
        if ("function" === typeof d2) {
          var e2 = b2.value;
          c3.payload = function() {
            return d2(e2);
          };
          c3.callback = function() {
            Mi(a2, b2);
          };
        }
        var f2 = a2.stateNode;
        null !== f2 && "function" === typeof f2.componentDidCatch && (c3.callback = function() {
          Mi(a2, b2);
          "function" !== typeof d2 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
          var c4 = b2.stack;
          this.componentDidCatch(b2.value, { componentStack: null !== c4 ? c4 : "" });
        });
        return c3;
      }
      function Ti(a2, b2, c3) {
        var d2 = a2.pingCache;
        if (null === d2) {
          d2 = a2.pingCache = new Ni();
          var e2 = /* @__PURE__ */ new Set();
          d2.set(b2, e2);
        } else
          e2 = d2.get(b2), void 0 === e2 && (e2 = /* @__PURE__ */ new Set(), d2.set(b2, e2));
        e2.has(c3) || (e2.add(c3), a2 = Ui.bind(null, a2, b2, c3), b2.then(a2, a2));
      }
      function Vi(a2) {
        do {
          var b2;
          if (b2 = 13 === a2.tag)
            b2 = a2.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
          if (b2)
            return a2;
          a2 = a2.return;
        } while (null !== a2);
        return null;
      }
      function Wi(a2, b2, c3, d2, e2) {
        if (0 === (a2.mode & 1))
          return a2 === b2 ? a2.flags |= 65536 : (a2.flags |= 128, c3.flags |= 131072, c3.flags &= -52805, 1 === c3.tag && (null === c3.alternate ? c3.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c3, b2, 1))), c3.lanes |= 1), a2;
        a2.flags |= 65536;
        a2.lanes = e2;
        return a2;
      }
      var Xi = ua.ReactCurrentOwner;
      var Ug = false;
      function Yi(a2, b2, c3, d2) {
        b2.child = null === a2 ? Ch(b2, null, c3, d2) : Bh(b2, a2.child, c3, d2);
      }
      function Zi(a2, b2, c3, d2, e2) {
        c3 = c3.render;
        var f2 = b2.ref;
        Tg(b2, e2);
        d2 = Xh(a2, b2, c3, d2, f2, e2);
        c3 = bi();
        if (null !== a2 && !Ug)
          return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e2, $i(a2, b2, e2);
        I2 && c3 && vg(b2);
        b2.flags |= 1;
        Yi(a2, b2, d2, e2);
        return b2.child;
      }
      function aj(a2, b2, c3, d2, e2) {
        if (null === a2) {
          var f2 = c3.type;
          if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c3.compare && void 0 === c3.defaultProps)
            return b2.tag = 15, b2.type = f2, cj(a2, b2, f2, d2, e2);
          a2 = yh(c3.type, null, d2, b2, b2.mode, e2);
          a2.ref = b2.ref;
          a2.return = b2;
          return b2.child = a2;
        }
        f2 = a2.child;
        if (0 === (a2.lanes & e2)) {
          var g2 = f2.memoizedProps;
          c3 = c3.compare;
          c3 = null !== c3 ? c3 : Ie;
          if (c3(g2, d2) && a2.ref === b2.ref)
            return $i(a2, b2, e2);
        }
        b2.flags |= 1;
        a2 = wh(f2, d2);
        a2.ref = b2.ref;
        a2.return = b2;
        return b2.child = a2;
      }
      function cj(a2, b2, c3, d2, e2) {
        if (null !== a2) {
          var f2 = a2.memoizedProps;
          if (Ie(f2, d2) && a2.ref === b2.ref)
            if (Ug = false, b2.pendingProps = d2 = f2, 0 !== (a2.lanes & e2))
              0 !== (a2.flags & 131072) && (Ug = true);
            else
              return b2.lanes = a2.lanes, $i(a2, b2, e2);
        }
        return dj(a2, b2, c3, d2, e2);
      }
      function ej(a2, b2, c3) {
        var d2 = b2.pendingProps, e2 = d2.children, f2 = null !== a2 ? a2.memoizedState : null;
        if ("hidden" === d2.mode)
          if (0 === (b2.mode & 1))
            b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G2(fj, gj), gj |= c3;
          else {
            if (0 === (c3 & 1073741824))
              return a2 = null !== f2 ? f2.baseLanes | c3 : c3, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a2, cachePool: null, transitions: null }, b2.updateQueue = null, G2(fj, gj), gj |= a2, null;
            b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
            d2 = null !== f2 ? f2.baseLanes : c3;
            G2(fj, gj);
            gj |= d2;
          }
        else
          null !== f2 ? (d2 = f2.baseLanes | c3, b2.memoizedState = null) : d2 = c3, G2(fj, gj), gj |= d2;
        Yi(a2, b2, e2, c3);
        return b2.child;
      }
      function hj(a2, b2) {
        var c3 = b2.ref;
        if (null === a2 && null !== c3 || null !== a2 && a2.ref !== c3)
          b2.flags |= 512, b2.flags |= 2097152;
      }
      function dj(a2, b2, c3, d2, e2) {
        var f2 = Zf(c3) ? Xf : H2.current;
        f2 = Yf(b2, f2);
        Tg(b2, e2);
        c3 = Xh(a2, b2, c3, d2, f2, e2);
        d2 = bi();
        if (null !== a2 && !Ug)
          return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e2, $i(a2, b2, e2);
        I2 && d2 && vg(b2);
        b2.flags |= 1;
        Yi(a2, b2, c3, e2);
        return b2.child;
      }
      function ij(a2, b2, c3, d2, e2) {
        if (Zf(c3)) {
          var f2 = true;
          cg(b2);
        } else
          f2 = false;
        Tg(b2, e2);
        if (null === b2.stateNode)
          jj(a2, b2), ph(b2, c3, d2), rh(b2, c3, d2, e2), d2 = true;
        else if (null === a2) {
          var g2 = b2.stateNode, h2 = b2.memoizedProps;
          g2.props = h2;
          var k2 = g2.context, l2 = c3.contextType;
          "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c3) ? Xf : H2.current, l2 = Yf(b2, l2));
          var m2 = c3.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
          q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && qh(b2, g2, d2, l2);
          $g = false;
          var r2 = b2.memoizedState;
          g2.state = r2;
          gh(b2, d2, g2, e2);
          k2 = b2.memoizedState;
          h2 !== d2 || r2 !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c3, m2, d2), k2 = b2.memoizedState), (h2 = $g || oh(b2, c3, h2, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
        } else {
          g2 = b2.stateNode;
          bh(a2, b2);
          h2 = b2.memoizedProps;
          l2 = b2.type === b2.elementType ? h2 : Lg(b2.type, h2);
          g2.props = l2;
          q2 = b2.pendingProps;
          r2 = g2.context;
          k2 = c3.contextType;
          "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c3) ? Xf : H2.current, k2 = Yf(b2, k2));
          var y2 = c3.getDerivedStateFromProps;
          (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== q2 || r2 !== k2) && qh(b2, g2, d2, k2);
          $g = false;
          r2 = b2.memoizedState;
          g2.state = r2;
          gh(b2, d2, g2, e2);
          var n2 = b2.memoizedState;
          h2 !== q2 || r2 !== n2 || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c3, y2, d2), n2 = b2.memoizedState), (l2 = $g || oh(b2, c3, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), d2 = false);
        }
        return kj(a2, b2, c3, d2, f2, e2);
      }
      function kj(a2, b2, c3, d2, e2, f2) {
        hj(a2, b2);
        var g2 = 0 !== (b2.flags & 128);
        if (!d2 && !g2)
          return e2 && dg(b2, c3, false), $i(a2, b2, f2);
        d2 = b2.stateNode;
        Xi.current = b2;
        var h2 = g2 && "function" !== typeof c3.getDerivedStateFromError ? null : d2.render();
        b2.flags |= 1;
        null !== a2 && g2 ? (b2.child = Bh(b2, a2.child, null, f2), b2.child = Bh(b2, null, h2, f2)) : Yi(a2, b2, h2, f2);
        b2.memoizedState = d2.state;
        e2 && dg(b2, c3, true);
        return b2.child;
      }
      function lj(a2) {
        var b2 = a2.stateNode;
        b2.pendingContext ? ag(a2, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a2, b2.context, false);
        Ih(a2, b2.containerInfo);
      }
      function mj(a2, b2, c3, d2, e2) {
        Ig();
        Jg(e2);
        b2.flags |= 256;
        Yi(a2, b2, c3, d2);
        return b2.child;
      }
      var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
      function oj(a2) {
        return { baseLanes: a2, cachePool: null, transitions: null };
      }
      function pj(a2, b2, c3) {
        var d2 = b2.pendingProps, e2 = M2.current, f2 = false, g2 = 0 !== (b2.flags & 128), h2;
        (h2 = g2) || (h2 = null !== a2 && null === a2.memoizedState ? false : 0 !== (e2 & 2));
        if (h2)
          f2 = true, b2.flags &= -129;
        else if (null === a2 || null !== a2.memoizedState)
          e2 |= 1;
        G2(M2, e2 & 1);
        if (null === a2) {
          Eg(b2);
          a2 = b2.memoizedState;
          if (null !== a2 && (a2 = a2.dehydrated, null !== a2))
            return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a2.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
          g2 = d2.children;
          a2 = d2.fallback;
          return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d2, 0, null), a2 = Ah(a2, d2, c3, null), f2.return = b2, a2.return = b2, f2.sibling = a2, b2.child = f2, b2.child.memoizedState = oj(c3), b2.memoizedState = nj, a2) : rj(b2, g2);
        }
        e2 = a2.memoizedState;
        if (null !== e2 && (h2 = e2.dehydrated, null !== h2))
          return sj(a2, b2, g2, d2, h2, e2, c3);
        if (f2) {
          f2 = d2.fallback;
          g2 = b2.mode;
          e2 = a2.child;
          h2 = e2.sibling;
          var k2 = { mode: "hidden", children: d2.children };
          0 === (g2 & 1) && b2.child !== e2 ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = wh(e2, k2), d2.subtreeFlags = e2.subtreeFlags & 14680064);
          null !== h2 ? f2 = wh(h2, f2) : (f2 = Ah(f2, g2, c3, null), f2.flags |= 2);
          f2.return = b2;
          d2.return = b2;
          d2.sibling = f2;
          b2.child = d2;
          d2 = f2;
          f2 = b2.child;
          g2 = a2.child.memoizedState;
          g2 = null === g2 ? oj(c3) : { baseLanes: g2.baseLanes | c3, cachePool: null, transitions: g2.transitions };
          f2.memoizedState = g2;
          f2.childLanes = a2.childLanes & ~c3;
          b2.memoizedState = nj;
          return d2;
        }
        f2 = a2.child;
        a2 = f2.sibling;
        d2 = wh(f2, { mode: "visible", children: d2.children });
        0 === (b2.mode & 1) && (d2.lanes = c3);
        d2.return = b2;
        d2.sibling = null;
        null !== a2 && (c3 = b2.deletions, null === c3 ? (b2.deletions = [a2], b2.flags |= 16) : c3.push(a2));
        b2.child = d2;
        b2.memoizedState = null;
        return d2;
      }
      function rj(a2, b2) {
        b2 = qj({ mode: "visible", children: b2 }, a2.mode, 0, null);
        b2.return = a2;
        return a2.child = b2;
      }
      function tj(a2, b2, c3, d2) {
        null !== d2 && Jg(d2);
        Bh(b2, a2.child, null, c3);
        a2 = rj(b2, b2.pendingProps.children);
        a2.flags |= 2;
        b2.memoizedState = null;
        return a2;
      }
      function sj(a2, b2, c3, d2, e2, f2, g2) {
        if (c3) {
          if (b2.flags & 256)
            return b2.flags &= -257, d2 = Li(Error(p2(422))), tj(a2, b2, g2, d2);
          if (null !== b2.memoizedState)
            return b2.child = a2.child, b2.flags |= 128, null;
          f2 = d2.fallback;
          e2 = b2.mode;
          d2 = qj({ mode: "visible", children: d2.children }, e2, 0, null);
          f2 = Ah(f2, e2, g2, null);
          f2.flags |= 2;
          d2.return = b2;
          f2.return = b2;
          d2.sibling = f2;
          b2.child = d2;
          0 !== (b2.mode & 1) && Bh(b2, a2.child, null, g2);
          b2.child.memoizedState = oj(g2);
          b2.memoizedState = nj;
          return f2;
        }
        if (0 === (b2.mode & 1))
          return tj(a2, b2, g2, null);
        if ("$!" === e2.data) {
          d2 = e2.nextSibling && e2.nextSibling.dataset;
          if (d2)
            var h2 = d2.dgst;
          d2 = h2;
          f2 = Error(p2(419));
          d2 = Li(f2, d2, void 0);
          return tj(a2, b2, g2, d2);
        }
        h2 = 0 !== (g2 & a2.childLanes);
        if (Ug || h2) {
          d2 = R2;
          if (null !== d2) {
            switch (g2 & -g2) {
              case 4:
                e2 = 2;
                break;
              case 16:
                e2 = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e2 = 32;
                break;
              case 536870912:
                e2 = 268435456;
                break;
              default:
                e2 = 0;
            }
            e2 = 0 !== (e2 & (d2.suspendedLanes | g2)) ? 0 : e2;
            0 !== e2 && e2 !== f2.retryLane && (f2.retryLane = e2, Zg(a2, e2), mh(d2, a2, e2, -1));
          }
          uj();
          d2 = Li(Error(p2(421)));
          return tj(a2, b2, g2, d2);
        }
        if ("$?" === e2.data)
          return b2.flags |= 128, b2.child = a2.child, b2 = vj.bind(null, a2), e2._reactRetry = b2, null;
        a2 = f2.treeContext;
        yg = Lf(e2.nextSibling);
        xg = b2;
        I2 = true;
        zg = null;
        null !== a2 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a2.id, sg = a2.overflow, qg = b2);
        b2 = rj(b2, d2.children);
        b2.flags |= 4096;
        return b2;
      }
      function wj(a2, b2, c3) {
        a2.lanes |= b2;
        var d2 = a2.alternate;
        null !== d2 && (d2.lanes |= b2);
        Sg(a2.return, b2, c3);
      }
      function xj(a2, b2, c3, d2, e2) {
        var f2 = a2.memoizedState;
        null === f2 ? a2.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c3, tailMode: e2 } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c3, f2.tailMode = e2);
      }
      function yj(a2, b2, c3) {
        var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
        Yi(a2, b2, d2.children, c3);
        d2 = M2.current;
        if (0 !== (d2 & 2))
          d2 = d2 & 1 | 2, b2.flags |= 128;
        else {
          if (null !== a2 && 0 !== (a2.flags & 128))
            a:
              for (a2 = b2.child; null !== a2; ) {
                if (13 === a2.tag)
                  null !== a2.memoizedState && wj(a2, c3, b2);
                else if (19 === a2.tag)
                  wj(a2, c3, b2);
                else if (null !== a2.child) {
                  a2.child.return = a2;
                  a2 = a2.child;
                  continue;
                }
                if (a2 === b2)
                  break a;
                for (; null === a2.sibling; ) {
                  if (null === a2.return || a2.return === b2)
                    break a;
                  a2 = a2.return;
                }
                a2.sibling.return = a2.return;
                a2 = a2.sibling;
              }
          d2 &= 1;
        }
        G2(M2, d2);
        if (0 === (b2.mode & 1))
          b2.memoizedState = null;
        else
          switch (e2) {
            case "forwards":
              c3 = b2.child;
              for (e2 = null; null !== c3; )
                a2 = c3.alternate, null !== a2 && null === Mh(a2) && (e2 = c3), c3 = c3.sibling;
              c3 = e2;
              null === c3 ? (e2 = b2.child, b2.child = null) : (e2 = c3.sibling, c3.sibling = null);
              xj(b2, false, e2, c3, f2);
              break;
            case "backwards":
              c3 = null;
              e2 = b2.child;
              for (b2.child = null; null !== e2; ) {
                a2 = e2.alternate;
                if (null !== a2 && null === Mh(a2)) {
                  b2.child = e2;
                  break;
                }
                a2 = e2.sibling;
                e2.sibling = c3;
                c3 = e2;
                e2 = a2;
              }
              xj(b2, true, c3, null, f2);
              break;
            case "together":
              xj(b2, false, null, null, void 0);
              break;
            default:
              b2.memoizedState = null;
          }
        return b2.child;
      }
      function jj(a2, b2) {
        0 === (b2.mode & 1) && null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
      }
      function $i(a2, b2, c3) {
        null !== a2 && (b2.dependencies = a2.dependencies);
        hh |= b2.lanes;
        if (0 === (c3 & b2.childLanes))
          return null;
        if (null !== a2 && b2.child !== a2.child)
          throw Error(p2(153));
        if (null !== b2.child) {
          a2 = b2.child;
          c3 = wh(a2, a2.pendingProps);
          b2.child = c3;
          for (c3.return = b2; null !== a2.sibling; )
            a2 = a2.sibling, c3 = c3.sibling = wh(a2, a2.pendingProps), c3.return = b2;
          c3.sibling = null;
        }
        return b2.child;
      }
      function zj(a2, b2, c3) {
        switch (b2.tag) {
          case 3:
            lj(b2);
            Ig();
            break;
          case 5:
            Kh(b2);
            break;
          case 1:
            Zf(b2.type) && cg(b2);
            break;
          case 4:
            Ih(b2, b2.stateNode.containerInfo);
            break;
          case 10:
            var d2 = b2.type._context, e2 = b2.memoizedProps.value;
            G2(Mg, d2._currentValue);
            d2._currentValue = e2;
            break;
          case 13:
            d2 = b2.memoizedState;
            if (null !== d2) {
              if (null !== d2.dehydrated)
                return G2(M2, M2.current & 1), b2.flags |= 128, null;
              if (0 !== (c3 & b2.child.childLanes))
                return pj(a2, b2, c3);
              G2(M2, M2.current & 1);
              a2 = $i(a2, b2, c3);
              return null !== a2 ? a2.sibling : null;
            }
            G2(M2, M2.current & 1);
            break;
          case 19:
            d2 = 0 !== (c3 & b2.childLanes);
            if (0 !== (a2.flags & 128)) {
              if (d2)
                return yj(a2, b2, c3);
              b2.flags |= 128;
            }
            e2 = b2.memoizedState;
            null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
            G2(M2, M2.current);
            if (d2)
              break;
            else
              return null;
          case 22:
          case 23:
            return b2.lanes = 0, ej(a2, b2, c3);
        }
        return $i(a2, b2, c3);
      }
      var Aj;
      var Bj;
      var Cj;
      var Dj;
      Aj = function(a2, b2) {
        for (var c3 = b2.child; null !== c3; ) {
          if (5 === c3.tag || 6 === c3.tag)
            a2.appendChild(c3.stateNode);
          else if (4 !== c3.tag && null !== c3.child) {
            c3.child.return = c3;
            c3 = c3.child;
            continue;
          }
          if (c3 === b2)
            break;
          for (; null === c3.sibling; ) {
            if (null === c3.return || c3.return === b2)
              return;
            c3 = c3.return;
          }
          c3.sibling.return = c3.return;
          c3 = c3.sibling;
        }
      };
      Bj = function() {
      };
      Cj = function(a2, b2, c3, d2) {
        var e2 = a2.memoizedProps;
        if (e2 !== d2) {
          a2 = b2.stateNode;
          Hh(Eh.current);
          var f2 = null;
          switch (c3) {
            case "input":
              e2 = Ya(a2, e2);
              d2 = Ya(a2, d2);
              f2 = [];
              break;
            case "select":
              e2 = A2({}, e2, { value: void 0 });
              d2 = A2({}, d2, { value: void 0 });
              f2 = [];
              break;
            case "textarea":
              e2 = gb(a2, e2);
              d2 = gb(a2, d2);
              f2 = [];
              break;
            default:
              "function" !== typeof e2.onClick && "function" === typeof d2.onClick && (a2.onclick = Bf);
          }
          ub(c3, d2);
          var g2;
          c3 = null;
          for (l2 in e2)
            if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && null != e2[l2])
              if ("style" === l2) {
                var h2 = e2[l2];
                for (g2 in h2)
                  h2.hasOwnProperty(g2) && (c3 || (c3 = {}), c3[g2] = "");
              } else
                "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
          for (l2 in d2) {
            var k2 = d2[l2];
            h2 = null != e2 ? e2[l2] : void 0;
            if (d2.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
              if ("style" === l2)
                if (h2) {
                  for (g2 in h2)
                    !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c3 || (c3 = {}), c3[g2] = "");
                  for (g2 in k2)
                    k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c3 || (c3 = {}), c3[g2] = k2[g2]);
                } else
                  c3 || (f2 || (f2 = []), f2.push(
                    l2,
                    c3
                  )), c3 = k2;
              else
                "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D2("scroll", a2), f2 || h2 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
          }
          c3 && (f2 = f2 || []).push("style", c3);
          var l2 = f2;
          if (b2.updateQueue = l2)
            b2.flags |= 4;
        }
      };
      Dj = function(a2, b2, c3, d2) {
        c3 !== d2 && (b2.flags |= 4);
      };
      function Ej(a2, b2) {
        if (!I2)
          switch (a2.tailMode) {
            case "hidden":
              b2 = a2.tail;
              for (var c3 = null; null !== b2; )
                null !== b2.alternate && (c3 = b2), b2 = b2.sibling;
              null === c3 ? a2.tail = null : c3.sibling = null;
              break;
            case "collapsed":
              c3 = a2.tail;
              for (var d2 = null; null !== c3; )
                null !== c3.alternate && (d2 = c3), c3 = c3.sibling;
              null === d2 ? b2 || null === a2.tail ? a2.tail = null : a2.tail.sibling = null : d2.sibling = null;
          }
      }
      function S2(a2) {
        var b2 = null !== a2.alternate && a2.alternate.child === a2.child, c3 = 0, d2 = 0;
        if (b2)
          for (var e2 = a2.child; null !== e2; )
            c3 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags & 14680064, d2 |= e2.flags & 14680064, e2.return = a2, e2 = e2.sibling;
        else
          for (e2 = a2.child; null !== e2; )
            c3 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags, d2 |= e2.flags, e2.return = a2, e2 = e2.sibling;
        a2.subtreeFlags |= d2;
        a2.childLanes = c3;
        return b2;
      }
      function Fj(a2, b2, c3) {
        var d2 = b2.pendingProps;
        wg(b2);
        switch (b2.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return S2(b2), null;
          case 1:
            return Zf(b2.type) && $f(), S2(b2), null;
          case 3:
            d2 = b2.stateNode;
            Jh();
            E2(Wf);
            E2(H2);
            Oh();
            d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
            if (null === a2 || null === a2.child)
              Gg(b2) ? b2.flags |= 4 : null === a2 || a2.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
            Bj(a2, b2);
            S2(b2);
            return null;
          case 5:
            Lh(b2);
            var e2 = Hh(Gh.current);
            c3 = b2.type;
            if (null !== a2 && null != b2.stateNode)
              Cj(a2, b2, c3, d2, e2), a2.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
            else {
              if (!d2) {
                if (null === b2.stateNode)
                  throw Error(p2(166));
                S2(b2);
                return null;
              }
              a2 = Hh(Eh.current);
              if (Gg(b2)) {
                d2 = b2.stateNode;
                c3 = b2.type;
                var f2 = b2.memoizedProps;
                d2[Of] = b2;
                d2[Pf] = f2;
                a2 = 0 !== (b2.mode & 1);
                switch (c3) {
                  case "dialog":
                    D2("cancel", d2);
                    D2("close", d2);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D2("load", d2);
                    break;
                  case "video":
                  case "audio":
                    for (e2 = 0; e2 < lf.length; e2++)
                      D2(lf[e2], d2);
                    break;
                  case "source":
                    D2("error", d2);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D2(
                      "error",
                      d2
                    );
                    D2("load", d2);
                    break;
                  case "details":
                    D2("toggle", d2);
                    break;
                  case "input":
                    Za(d2, f2);
                    D2("invalid", d2);
                    break;
                  case "select":
                    d2._wrapperState = { wasMultiple: !!f2.multiple };
                    D2("invalid", d2);
                    break;
                  case "textarea":
                    hb(d2, f2), D2("invalid", d2);
                }
                ub(c3, f2);
                e2 = null;
                for (var g2 in f2)
                  if (f2.hasOwnProperty(g2)) {
                    var h2 = f2[g2];
                    "children" === g2 ? "string" === typeof h2 ? d2.textContent !== h2 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h2, a2), e2 = ["children", h2]) : "number" === typeof h2 && d2.textContent !== "" + h2 && (true !== f2.suppressHydrationWarning && Af(
                      d2.textContent,
                      h2,
                      a2
                    ), e2 = ["children", "" + h2]) : ea.hasOwnProperty(g2) && null != h2 && "onScroll" === g2 && D2("scroll", d2);
                  }
                switch (c3) {
                  case "input":
                    Va(d2);
                    db(d2, f2, true);
                    break;
                  case "textarea":
                    Va(d2);
                    jb(d2);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    "function" === typeof f2.onClick && (d2.onclick = Bf);
                }
                d2 = e2;
                b2.updateQueue = d2;
                null !== d2 && (b2.flags |= 4);
              } else {
                g2 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
                "http://www.w3.org/1999/xhtml" === a2 && (a2 = kb(c3));
                "http://www.w3.org/1999/xhtml" === a2 ? "script" === c3 ? (a2 = g2.createElement("div"), a2.innerHTML = "<script></script>", a2 = a2.removeChild(a2.firstChild)) : "string" === typeof d2.is ? a2 = g2.createElement(c3, { is: d2.is }) : (a2 = g2.createElement(c3), "select" === c3 && (g2 = a2, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a2 = g2.createElementNS(a2, c3);
                a2[Of] = b2;
                a2[Pf] = d2;
                Aj(a2, b2, false, false);
                b2.stateNode = a2;
                a: {
                  g2 = vb(c3, d2);
                  switch (c3) {
                    case "dialog":
                      D2("cancel", a2);
                      D2("close", a2);
                      e2 = d2;
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      D2("load", a2);
                      e2 = d2;
                      break;
                    case "video":
                    case "audio":
                      for (e2 = 0; e2 < lf.length; e2++)
                        D2(lf[e2], a2);
                      e2 = d2;
                      break;
                    case "source":
                      D2("error", a2);
                      e2 = d2;
                      break;
                    case "img":
                    case "image":
                    case "link":
                      D2(
                        "error",
                        a2
                      );
                      D2("load", a2);
                      e2 = d2;
                      break;
                    case "details":
                      D2("toggle", a2);
                      e2 = d2;
                      break;
                    case "input":
                      Za(a2, d2);
                      e2 = Ya(a2, d2);
                      D2("invalid", a2);
                      break;
                    case "option":
                      e2 = d2;
                      break;
                    case "select":
                      a2._wrapperState = { wasMultiple: !!d2.multiple };
                      e2 = A2({}, d2, { value: void 0 });
                      D2("invalid", a2);
                      break;
                    case "textarea":
                      hb(a2, d2);
                      e2 = gb(a2, d2);
                      D2("invalid", a2);
                      break;
                    default:
                      e2 = d2;
                  }
                  ub(c3, e2);
                  h2 = e2;
                  for (f2 in h2)
                    if (h2.hasOwnProperty(f2)) {
                      var k2 = h2[f2];
                      "style" === f2 ? sb(a2, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a2, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c3 || "" !== k2) && ob(a2, k2) : "number" === typeof k2 && ob(a2, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D2("scroll", a2) : null != k2 && ta(a2, f2, k2, g2));
                    }
                  switch (c3) {
                    case "input":
                      Va(a2);
                      db(a2, d2, false);
                      break;
                    case "textarea":
                      Va(a2);
                      jb(a2);
                      break;
                    case "option":
                      null != d2.value && a2.setAttribute("value", "" + Sa(d2.value));
                      break;
                    case "select":
                      a2.multiple = !!d2.multiple;
                      f2 = d2.value;
                      null != f2 ? fb(a2, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                        a2,
                        !!d2.multiple,
                        d2.defaultValue,
                        true
                      );
                      break;
                    default:
                      "function" === typeof e2.onClick && (a2.onclick = Bf);
                  }
                  switch (c3) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      d2 = !!d2.autoFocus;
                      break a;
                    case "img":
                      d2 = true;
                      break a;
                    default:
                      d2 = false;
                  }
                }
                d2 && (b2.flags |= 4);
              }
              null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
            }
            S2(b2);
            return null;
          case 6:
            if (a2 && null != b2.stateNode)
              Dj(a2, b2, a2.memoizedProps, d2);
            else {
              if ("string" !== typeof d2 && null === b2.stateNode)
                throw Error(p2(166));
              c3 = Hh(Gh.current);
              Hh(Eh.current);
              if (Gg(b2)) {
                d2 = b2.stateNode;
                c3 = b2.memoizedProps;
                d2[Of] = b2;
                if (f2 = d2.nodeValue !== c3) {
                  if (a2 = xg, null !== a2)
                    switch (a2.tag) {
                      case 3:
                        Af(d2.nodeValue, c3, 0 !== (a2.mode & 1));
                        break;
                      case 5:
                        true !== a2.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c3, 0 !== (a2.mode & 1));
                    }
                }
                f2 && (b2.flags |= 4);
              } else
                d2 = (9 === c3.nodeType ? c3 : c3.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
            }
            S2(b2);
            return null;
          case 13:
            E2(M2);
            d2 = b2.memoizedState;
            if (null === a2 || null !== a2.memoizedState && null !== a2.memoizedState.dehydrated) {
              if (I2 && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
                Hg(), Ig(), b2.flags |= 98560, f2 = false;
              else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
                if (null === a2) {
                  if (!f2)
                    throw Error(p2(318));
                  f2 = b2.memoizedState;
                  f2 = null !== f2 ? f2.dehydrated : null;
                  if (!f2)
                    throw Error(p2(317));
                  f2[Of] = b2;
                } else
                  Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
                S2(b2);
                f2 = false;
              } else
                null !== zg && (Gj(zg), zg = null), f2 = true;
              if (!f2)
                return b2.flags & 65536 ? b2 : null;
            }
            if (0 !== (b2.flags & 128))
              return b2.lanes = c3, b2;
            d2 = null !== d2;
            d2 !== (null !== a2 && null !== a2.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a2 || 0 !== (M2.current & 1) ? 0 === T2 && (T2 = 3) : uj()));
            null !== b2.updateQueue && (b2.flags |= 4);
            S2(b2);
            return null;
          case 4:
            return Jh(), Bj(a2, b2), null === a2 && sf(b2.stateNode.containerInfo), S2(b2), null;
          case 10:
            return Rg(b2.type._context), S2(b2), null;
          case 17:
            return Zf(b2.type) && $f(), S2(b2), null;
          case 19:
            E2(M2);
            f2 = b2.memoizedState;
            if (null === f2)
              return S2(b2), null;
            d2 = 0 !== (b2.flags & 128);
            g2 = f2.rendering;
            if (null === g2)
              if (d2)
                Ej(f2, false);
              else {
                if (0 !== T2 || null !== a2 && 0 !== (a2.flags & 128))
                  for (a2 = b2.child; null !== a2; ) {
                    g2 = Mh(a2);
                    if (null !== g2) {
                      b2.flags |= 128;
                      Ej(f2, false);
                      d2 = g2.updateQueue;
                      null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                      b2.subtreeFlags = 0;
                      d2 = c3;
                      for (c3 = b2.child; null !== c3; )
                        f2 = c3, a2 = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a2, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a2 = g2.dependencies, f2.dependencies = null === a2 ? null : { lanes: a2.lanes, firstContext: a2.firstContext }), c3 = c3.sibling;
                      G2(M2, M2.current & 1 | 2);
                      return b2.child;
                    }
                    a2 = a2.sibling;
                  }
                null !== f2.tail && B2() > Hj && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
              }
            else {
              if (!d2)
                if (a2 = Mh(g2), null !== a2) {
                  if (b2.flags |= 128, d2 = true, c3 = a2.updateQueue, null !== c3 && (b2.updateQueue = c3, b2.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I2)
                    return S2(b2), null;
                } else
                  2 * B2() - f2.renderingStartTime > Hj && 1073741824 !== c3 && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
              f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c3 = f2.last, null !== c3 ? c3.sibling = g2 : b2.child = g2, f2.last = g2);
            }
            if (null !== f2.tail)
              return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B2(), b2.sibling = null, c3 = M2.current, G2(M2, d2 ? c3 & 1 | 2 : c3 & 1), b2;
            S2(b2);
            return null;
          case 22:
          case 23:
            return Ij(), d2 = null !== b2.memoizedState, null !== a2 && null !== a2.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S2(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S2(b2), null;
          case 24:
            return null;
          case 25:
            return null;
        }
        throw Error(p2(156, b2.tag));
      }
      function Jj(a2, b2) {
        wg(b2);
        switch (b2.tag) {
          case 1:
            return Zf(b2.type) && $f(), a2 = b2.flags, a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
          case 3:
            return Jh(), E2(Wf), E2(H2), Oh(), a2 = b2.flags, 0 !== (a2 & 65536) && 0 === (a2 & 128) ? (b2.flags = a2 & -65537 | 128, b2) : null;
          case 5:
            return Lh(b2), null;
          case 13:
            E2(M2);
            a2 = b2.memoizedState;
            if (null !== a2 && null !== a2.dehydrated) {
              if (null === b2.alternate)
                throw Error(p2(340));
              Ig();
            }
            a2 = b2.flags;
            return a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
          case 19:
            return E2(M2), null;
          case 4:
            return Jh(), null;
          case 10:
            return Rg(b2.type._context), null;
          case 22:
          case 23:
            return Ij(), null;
          case 24:
            return null;
          default:
            return null;
        }
      }
      var Kj = false;
      var U2 = false;
      var Lj = "function" === typeof WeakSet ? WeakSet : Set;
      var V2 = null;
      function Mj(a2, b2) {
        var c3 = a2.ref;
        if (null !== c3)
          if ("function" === typeof c3)
            try {
              c3(null);
            } catch (d2) {
              W2(a2, b2, d2);
            }
          else
            c3.current = null;
      }
      function Nj(a2, b2, c3) {
        try {
          c3();
        } catch (d2) {
          W2(a2, b2, d2);
        }
      }
      var Oj = false;
      function Pj(a2, b2) {
        Cf = dd;
        a2 = Me();
        if (Ne(a2)) {
          if ("selectionStart" in a2)
            var c3 = { start: a2.selectionStart, end: a2.selectionEnd };
          else
            a: {
              c3 = (c3 = a2.ownerDocument) && c3.defaultView || window;
              var d2 = c3.getSelection && c3.getSelection();
              if (d2 && 0 !== d2.rangeCount) {
                c3 = d2.anchorNode;
                var e2 = d2.anchorOffset, f2 = d2.focusNode;
                d2 = d2.focusOffset;
                try {
                  c3.nodeType, f2.nodeType;
                } catch (F2) {
                  c3 = null;
                  break a;
                }
                var g2 = 0, h2 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a2, r2 = null;
                b:
                  for (; ; ) {
                    for (var y2; ; ) {
                      q2 !== c3 || 0 !== e2 && 3 !== q2.nodeType || (h2 = g2 + e2);
                      q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
                      3 === q2.nodeType && (g2 += q2.nodeValue.length);
                      if (null === (y2 = q2.firstChild))
                        break;
                      r2 = q2;
                      q2 = y2;
                    }
                    for (; ; ) {
                      if (q2 === a2)
                        break b;
                      r2 === c3 && ++l2 === e2 && (h2 = g2);
                      r2 === f2 && ++m2 === d2 && (k2 = g2);
                      if (null !== (y2 = q2.nextSibling))
                        break;
                      q2 = r2;
                      r2 = q2.parentNode;
                    }
                    q2 = y2;
                  }
                c3 = -1 === h2 || -1 === k2 ? null : { start: h2, end: k2 };
              } else
                c3 = null;
            }
          c3 = c3 || { start: 0, end: 0 };
        } else
          c3 = null;
        Df = { focusedElem: a2, selectionRange: c3 };
        dd = false;
        for (V2 = b2; null !== V2; )
          if (b2 = V2, a2 = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a2)
            a2.return = b2, V2 = a2;
          else
            for (; null !== V2; ) {
              b2 = V2;
              try {
                var n2 = b2.alternate;
                if (0 !== (b2.flags & 1024))
                  switch (b2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      break;
                    case 1:
                      if (null !== n2) {
                        var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Lg(b2.type, t2), J2);
                        x2.__reactInternalSnapshotBeforeUpdate = w2;
                      }
                      break;
                    case 3:
                      var u2 = b2.stateNode.containerInfo;
                      1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                      break;
                    case 5:
                    case 6:
                    case 4:
                    case 17:
                      break;
                    default:
                      throw Error(p2(163));
                  }
              } catch (F2) {
                W2(b2, b2.return, F2);
              }
              a2 = b2.sibling;
              if (null !== a2) {
                a2.return = b2.return;
                V2 = a2;
                break;
              }
              V2 = b2.return;
            }
        n2 = Oj;
        Oj = false;
        return n2;
      }
      function Qj(a2, b2, c3) {
        var d2 = b2.updateQueue;
        d2 = null !== d2 ? d2.lastEffect : null;
        if (null !== d2) {
          var e2 = d2 = d2.next;
          do {
            if ((e2.tag & a2) === a2) {
              var f2 = e2.destroy;
              e2.destroy = void 0;
              void 0 !== f2 && Nj(b2, c3, f2);
            }
            e2 = e2.next;
          } while (e2 !== d2);
        }
      }
      function Rj(a2, b2) {
        b2 = b2.updateQueue;
        b2 = null !== b2 ? b2.lastEffect : null;
        if (null !== b2) {
          var c3 = b2 = b2.next;
          do {
            if ((c3.tag & a2) === a2) {
              var d2 = c3.create;
              c3.destroy = d2();
            }
            c3 = c3.next;
          } while (c3 !== b2);
        }
      }
      function Sj(a2) {
        var b2 = a2.ref;
        if (null !== b2) {
          var c3 = a2.stateNode;
          switch (a2.tag) {
            case 5:
              a2 = c3;
              break;
            default:
              a2 = c3;
          }
          "function" === typeof b2 ? b2(a2) : b2.current = a2;
        }
      }
      function Tj(a2) {
        var b2 = a2.alternate;
        null !== b2 && (a2.alternate = null, Tj(b2));
        a2.child = null;
        a2.deletions = null;
        a2.sibling = null;
        5 === a2.tag && (b2 = a2.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
        a2.stateNode = null;
        a2.return = null;
        a2.dependencies = null;
        a2.memoizedProps = null;
        a2.memoizedState = null;
        a2.pendingProps = null;
        a2.stateNode = null;
        a2.updateQueue = null;
      }
      function Uj(a2) {
        return 5 === a2.tag || 3 === a2.tag || 4 === a2.tag;
      }
      function Vj(a2) {
        a:
          for (; ; ) {
            for (; null === a2.sibling; ) {
              if (null === a2.return || Uj(a2.return))
                return null;
              a2 = a2.return;
            }
            a2.sibling.return = a2.return;
            for (a2 = a2.sibling; 5 !== a2.tag && 6 !== a2.tag && 18 !== a2.tag; ) {
              if (a2.flags & 2)
                continue a;
              if (null === a2.child || 4 === a2.tag)
                continue a;
              else
                a2.child.return = a2, a2 = a2.child;
            }
            if (!(a2.flags & 2))
              return a2.stateNode;
          }
      }
      function Wj(a2, b2, c3) {
        var d2 = a2.tag;
        if (5 === d2 || 6 === d2)
          a2 = a2.stateNode, b2 ? 8 === c3.nodeType ? c3.parentNode.insertBefore(a2, b2) : c3.insertBefore(a2, b2) : (8 === c3.nodeType ? (b2 = c3.parentNode, b2.insertBefore(a2, c3)) : (b2 = c3, b2.appendChild(a2)), c3 = c3._reactRootContainer, null !== c3 && void 0 !== c3 || null !== b2.onclick || (b2.onclick = Bf));
        else if (4 !== d2 && (a2 = a2.child, null !== a2))
          for (Wj(a2, b2, c3), a2 = a2.sibling; null !== a2; )
            Wj(a2, b2, c3), a2 = a2.sibling;
      }
      function Xj(a2, b2, c3) {
        var d2 = a2.tag;
        if (5 === d2 || 6 === d2)
          a2 = a2.stateNode, b2 ? c3.insertBefore(a2, b2) : c3.appendChild(a2);
        else if (4 !== d2 && (a2 = a2.child, null !== a2))
          for (Xj(a2, b2, c3), a2 = a2.sibling; null !== a2; )
            Xj(a2, b2, c3), a2 = a2.sibling;
      }
      var X = null;
      var Yj = false;
      function Zj(a2, b2, c3) {
        for (c3 = c3.child; null !== c3; )
          ak(a2, b2, c3), c3 = c3.sibling;
      }
      function ak(a2, b2, c3) {
        if (lc && "function" === typeof lc.onCommitFiberUnmount)
          try {
            lc.onCommitFiberUnmount(kc, c3);
          } catch (h2) {
          }
        switch (c3.tag) {
          case 5:
            U2 || Mj(c3, b2);
          case 6:
            var d2 = X, e2 = Yj;
            X = null;
            Zj(a2, b2, c3);
            X = d2;
            Yj = e2;
            null !== X && (Yj ? (a2 = X, c3 = c3.stateNode, 8 === a2.nodeType ? a2.parentNode.removeChild(c3) : a2.removeChild(c3)) : X.removeChild(c3.stateNode));
            break;
          case 18:
            null !== X && (Yj ? (a2 = X, c3 = c3.stateNode, 8 === a2.nodeType ? Kf(a2.parentNode, c3) : 1 === a2.nodeType && Kf(a2, c3), bd(a2)) : Kf(X, c3.stateNode));
            break;
          case 4:
            d2 = X;
            e2 = Yj;
            X = c3.stateNode.containerInfo;
            Yj = true;
            Zj(a2, b2, c3);
            X = d2;
            Yj = e2;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!U2 && (d2 = c3.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
              e2 = d2 = d2.next;
              do {
                var f2 = e2, g2 = f2.destroy;
                f2 = f2.tag;
                void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c3, b2, g2) : 0 !== (f2 & 4) && Nj(c3, b2, g2));
                e2 = e2.next;
              } while (e2 !== d2);
            }
            Zj(a2, b2, c3);
            break;
          case 1:
            if (!U2 && (Mj(c3, b2), d2 = c3.stateNode, "function" === typeof d2.componentWillUnmount))
              try {
                d2.props = c3.memoizedProps, d2.state = c3.memoizedState, d2.componentWillUnmount();
              } catch (h2) {
                W2(c3, b2, h2);
              }
            Zj(a2, b2, c3);
            break;
          case 21:
            Zj(a2, b2, c3);
            break;
          case 22:
            c3.mode & 1 ? (U2 = (d2 = U2) || null !== c3.memoizedState, Zj(a2, b2, c3), U2 = d2) : Zj(a2, b2, c3);
            break;
          default:
            Zj(a2, b2, c3);
        }
      }
      function bk(a2) {
        var b2 = a2.updateQueue;
        if (null !== b2) {
          a2.updateQueue = null;
          var c3 = a2.stateNode;
          null === c3 && (c3 = a2.stateNode = new Lj());
          b2.forEach(function(b3) {
            var d2 = ck.bind(null, a2, b3);
            c3.has(b3) || (c3.add(b3), b3.then(d2, d2));
          });
        }
      }
      function dk(a2, b2) {
        var c3 = b2.deletions;
        if (null !== c3)
          for (var d2 = 0; d2 < c3.length; d2++) {
            var e2 = c3[d2];
            try {
              var f2 = a2, g2 = b2, h2 = g2;
              a:
                for (; null !== h2; ) {
                  switch (h2.tag) {
                    case 5:
                      X = h2.stateNode;
                      Yj = false;
                      break a;
                    case 3:
                      X = h2.stateNode.containerInfo;
                      Yj = true;
                      break a;
                    case 4:
                      X = h2.stateNode.containerInfo;
                      Yj = true;
                      break a;
                  }
                  h2 = h2.return;
                }
              if (null === X)
                throw Error(p2(160));
              ak(f2, g2, e2);
              X = null;
              Yj = false;
              var k2 = e2.alternate;
              null !== k2 && (k2.return = null);
              e2.return = null;
            } catch (l2) {
              W2(e2, b2, l2);
            }
          }
        if (b2.subtreeFlags & 12854)
          for (b2 = b2.child; null !== b2; )
            ek(b2, a2), b2 = b2.sibling;
      }
      function ek(a2, b2) {
        var c3 = a2.alternate, d2 = a2.flags;
        switch (a2.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            dk(b2, a2);
            fk(a2);
            if (d2 & 4) {
              try {
                Qj(3, a2, a2.return), Rj(3, a2);
              } catch (t2) {
                W2(a2, a2.return, t2);
              }
              try {
                Qj(5, a2, a2.return);
              } catch (t2) {
                W2(a2, a2.return, t2);
              }
            }
            break;
          case 1:
            dk(b2, a2);
            fk(a2);
            d2 & 512 && null !== c3 && Mj(c3, c3.return);
            break;
          case 5:
            dk(b2, a2);
            fk(a2);
            d2 & 512 && null !== c3 && Mj(c3, c3.return);
            if (a2.flags & 32) {
              var e2 = a2.stateNode;
              try {
                ob(e2, "");
              } catch (t2) {
                W2(a2, a2.return, t2);
              }
            }
            if (d2 & 4 && (e2 = a2.stateNode, null != e2)) {
              var f2 = a2.memoizedProps, g2 = null !== c3 ? c3.memoizedProps : f2, h2 = a2.type, k2 = a2.updateQueue;
              a2.updateQueue = null;
              if (null !== k2)
                try {
                  "input" === h2 && "radio" === f2.type && null != f2.name && ab(e2, f2);
                  vb(h2, g2);
                  var l2 = vb(h2, f2);
                  for (g2 = 0; g2 < k2.length; g2 += 2) {
                    var m2 = k2[g2], q2 = k2[g2 + 1];
                    "style" === m2 ? sb(e2, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e2, q2) : "children" === m2 ? ob(e2, q2) : ta(e2, m2, q2, l2);
                  }
                  switch (h2) {
                    case "input":
                      bb(e2, f2);
                      break;
                    case "textarea":
                      ib(e2, f2);
                      break;
                    case "select":
                      var r2 = e2._wrapperState.wasMultiple;
                      e2._wrapperState.wasMultiple = !!f2.multiple;
                      var y2 = f2.value;
                      null != y2 ? fb(e2, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                        e2,
                        !!f2.multiple,
                        f2.defaultValue,
                        true
                      ) : fb(e2, !!f2.multiple, f2.multiple ? [] : "", false));
                  }
                  e2[Pf] = f2;
                } catch (t2) {
                  W2(a2, a2.return, t2);
                }
            }
            break;
          case 6:
            dk(b2, a2);
            fk(a2);
            if (d2 & 4) {
              if (null === a2.stateNode)
                throw Error(p2(162));
              e2 = a2.stateNode;
              f2 = a2.memoizedProps;
              try {
                e2.nodeValue = f2;
              } catch (t2) {
                W2(a2, a2.return, t2);
              }
            }
            break;
          case 3:
            dk(b2, a2);
            fk(a2);
            if (d2 & 4 && null !== c3 && c3.memoizedState.isDehydrated)
              try {
                bd(b2.containerInfo);
              } catch (t2) {
                W2(a2, a2.return, t2);
              }
            break;
          case 4:
            dk(b2, a2);
            fk(a2);
            break;
          case 13:
            dk(b2, a2);
            fk(a2);
            e2 = a2.child;
            e2.flags & 8192 && (f2 = null !== e2.memoizedState, e2.stateNode.isHidden = f2, !f2 || null !== e2.alternate && null !== e2.alternate.memoizedState || (gk = B2()));
            d2 & 4 && bk(a2);
            break;
          case 22:
            m2 = null !== c3 && null !== c3.memoizedState;
            a2.mode & 1 ? (U2 = (l2 = U2) || m2, dk(b2, a2), U2 = l2) : dk(b2, a2);
            fk(a2);
            if (d2 & 8192) {
              l2 = null !== a2.memoizedState;
              if ((a2.stateNode.isHidden = l2) && !m2 && 0 !== (a2.mode & 1))
                for (V2 = a2, m2 = a2.child; null !== m2; ) {
                  for (q2 = V2 = m2; null !== V2; ) {
                    r2 = V2;
                    y2 = r2.child;
                    switch (r2.tag) {
                      case 0:
                      case 11:
                      case 14:
                      case 15:
                        Qj(4, r2, r2.return);
                        break;
                      case 1:
                        Mj(r2, r2.return);
                        var n2 = r2.stateNode;
                        if ("function" === typeof n2.componentWillUnmount) {
                          d2 = r2;
                          c3 = r2.return;
                          try {
                            b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                          } catch (t2) {
                            W2(d2, c3, t2);
                          }
                        }
                        break;
                      case 5:
                        Mj(r2, r2.return);
                        break;
                      case 22:
                        if (null !== r2.memoizedState) {
                          hk(q2);
                          continue;
                        }
                    }
                    null !== y2 ? (y2.return = r2, V2 = y2) : hk(q2);
                  }
                  m2 = m2.sibling;
                }
              a:
                for (m2 = null, q2 = a2; ; ) {
                  if (5 === q2.tag) {
                    if (null === m2) {
                      m2 = q2;
                      try {
                        e2 = q2.stateNode, l2 ? (f2 = e2.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h2 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h2.style.display = rb("display", g2));
                      } catch (t2) {
                        W2(a2, a2.return, t2);
                      }
                    }
                  } else if (6 === q2.tag) {
                    if (null === m2)
                      try {
                        q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                      } catch (t2) {
                        W2(a2, a2.return, t2);
                      }
                  } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a2) && null !== q2.child) {
                    q2.child.return = q2;
                    q2 = q2.child;
                    continue;
                  }
                  if (q2 === a2)
                    break a;
                  for (; null === q2.sibling; ) {
                    if (null === q2.return || q2.return === a2)
                      break a;
                    m2 === q2 && (m2 = null);
                    q2 = q2.return;
                  }
                  m2 === q2 && (m2 = null);
                  q2.sibling.return = q2.return;
                  q2 = q2.sibling;
                }
            }
            break;
          case 19:
            dk(b2, a2);
            fk(a2);
            d2 & 4 && bk(a2);
            break;
          case 21:
            break;
          default:
            dk(
              b2,
              a2
            ), fk(a2);
        }
      }
      function fk(a2) {
        var b2 = a2.flags;
        if (b2 & 2) {
          try {
            a: {
              for (var c3 = a2.return; null !== c3; ) {
                if (Uj(c3)) {
                  var d2 = c3;
                  break a;
                }
                c3 = c3.return;
              }
              throw Error(p2(160));
            }
            switch (d2.tag) {
              case 5:
                var e2 = d2.stateNode;
                d2.flags & 32 && (ob(e2, ""), d2.flags &= -33);
                var f2 = Vj(a2);
                Xj(a2, f2, e2);
                break;
              case 3:
              case 4:
                var g2 = d2.stateNode.containerInfo, h2 = Vj(a2);
                Wj(a2, h2, g2);
                break;
              default:
                throw Error(p2(161));
            }
          } catch (k2) {
            W2(a2, a2.return, k2);
          }
          a2.flags &= -3;
        }
        b2 & 4096 && (a2.flags &= -4097);
      }
      function ik(a2, b2, c3) {
        V2 = a2;
        jk(a2, b2, c3);
      }
      function jk(a2, b2, c3) {
        for (var d2 = 0 !== (a2.mode & 1); null !== V2; ) {
          var e2 = V2, f2 = e2.child;
          if (22 === e2.tag && d2) {
            var g2 = null !== e2.memoizedState || Kj;
            if (!g2) {
              var h2 = e2.alternate, k2 = null !== h2 && null !== h2.memoizedState || U2;
              h2 = Kj;
              var l2 = U2;
              Kj = g2;
              if ((U2 = k2) && !l2)
                for (V2 = e2; null !== V2; )
                  g2 = V2, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e2) : null !== k2 ? (k2.return = g2, V2 = k2) : kk(e2);
              for (; null !== f2; )
                V2 = f2, jk(f2, b2, c3), f2 = f2.sibling;
              V2 = e2;
              Kj = h2;
              U2 = l2;
            }
            lk(a2, b2, c3);
          } else
            0 !== (e2.subtreeFlags & 8772) && null !== f2 ? (f2.return = e2, V2 = f2) : lk(a2, b2, c3);
        }
      }
      function lk(a2) {
        for (; null !== V2; ) {
          var b2 = V2;
          if (0 !== (b2.flags & 8772)) {
            var c3 = b2.alternate;
            try {
              if (0 !== (b2.flags & 8772))
                switch (b2.tag) {
                  case 0:
                  case 11:
                  case 15:
                    U2 || Rj(5, b2);
                    break;
                  case 1:
                    var d2 = b2.stateNode;
                    if (b2.flags & 4 && !U2)
                      if (null === c3)
                        d2.componentDidMount();
                      else {
                        var e2 = b2.elementType === b2.type ? c3.memoizedProps : Lg(b2.type, c3.memoizedProps);
                        d2.componentDidUpdate(e2, c3.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                      }
                    var f2 = b2.updateQueue;
                    null !== f2 && ih(b2, f2, d2);
                    break;
                  case 3:
                    var g2 = b2.updateQueue;
                    if (null !== g2) {
                      c3 = null;
                      if (null !== b2.child)
                        switch (b2.child.tag) {
                          case 5:
                            c3 = b2.child.stateNode;
                            break;
                          case 1:
                            c3 = b2.child.stateNode;
                        }
                      ih(b2, g2, c3);
                    }
                    break;
                  case 5:
                    var h2 = b2.stateNode;
                    if (null === c3 && b2.flags & 4) {
                      c3 = h2;
                      var k2 = b2.memoizedProps;
                      switch (b2.type) {
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                          k2.autoFocus && c3.focus();
                          break;
                        case "img":
                          k2.src && (c3.src = k2.src);
                      }
                    }
                    break;
                  case 6:
                    break;
                  case 4:
                    break;
                  case 12:
                    break;
                  case 13:
                    if (null === b2.memoizedState) {
                      var l2 = b2.alternate;
                      if (null !== l2) {
                        var m2 = l2.memoizedState;
                        if (null !== m2) {
                          var q2 = m2.dehydrated;
                          null !== q2 && bd(q2);
                        }
                      }
                    }
                    break;
                  case 19:
                  case 17:
                  case 21:
                  case 22:
                  case 23:
                  case 25:
                    break;
                  default:
                    throw Error(p2(163));
                }
              U2 || b2.flags & 512 && Sj(b2);
            } catch (r2) {
              W2(b2, b2.return, r2);
            }
          }
          if (b2 === a2) {
            V2 = null;
            break;
          }
          c3 = b2.sibling;
          if (null !== c3) {
            c3.return = b2.return;
            V2 = c3;
            break;
          }
          V2 = b2.return;
        }
      }
      function hk(a2) {
        for (; null !== V2; ) {
          var b2 = V2;
          if (b2 === a2) {
            V2 = null;
            break;
          }
          var c3 = b2.sibling;
          if (null !== c3) {
            c3.return = b2.return;
            V2 = c3;
            break;
          }
          V2 = b2.return;
        }
      }
      function kk(a2) {
        for (; null !== V2; ) {
          var b2 = V2;
          try {
            switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                var c3 = b2.return;
                try {
                  Rj(4, b2);
                } catch (k2) {
                  W2(b2, c3, k2);
                }
                break;
              case 1:
                var d2 = b2.stateNode;
                if ("function" === typeof d2.componentDidMount) {
                  var e2 = b2.return;
                  try {
                    d2.componentDidMount();
                  } catch (k2) {
                    W2(b2, e2, k2);
                  }
                }
                var f2 = b2.return;
                try {
                  Sj(b2);
                } catch (k2) {
                  W2(b2, f2, k2);
                }
                break;
              case 5:
                var g2 = b2.return;
                try {
                  Sj(b2);
                } catch (k2) {
                  W2(b2, g2, k2);
                }
            }
          } catch (k2) {
            W2(b2, b2.return, k2);
          }
          if (b2 === a2) {
            V2 = null;
            break;
          }
          var h2 = b2.sibling;
          if (null !== h2) {
            h2.return = b2.return;
            V2 = h2;
            break;
          }
          V2 = b2.return;
        }
      }
      var mk = Math.ceil;
      var nk = ua.ReactCurrentDispatcher;
      var ok = ua.ReactCurrentOwner;
      var pk = ua.ReactCurrentBatchConfig;
      var K = 0;
      var R2 = null;
      var Y2 = null;
      var Z2 = 0;
      var gj = 0;
      var fj = Uf(0);
      var T2 = 0;
      var qk = null;
      var hh = 0;
      var rk = 0;
      var sk = 0;
      var tk = null;
      var uk = null;
      var gk = 0;
      var Hj = Infinity;
      var vk = null;
      var Pi = false;
      var Qi = null;
      var Si = null;
      var wk = false;
      var xk = null;
      var yk = 0;
      var zk = 0;
      var Ak = null;
      var Bk = -1;
      var Ck = 0;
      function L2() {
        return 0 !== (K & 6) ? B2() : -1 !== Bk ? Bk : Bk = B2();
      }
      function lh(a2) {
        if (0 === (a2.mode & 1))
          return 1;
        if (0 !== (K & 2) && 0 !== Z2)
          return Z2 & -Z2;
        if (null !== Kg.transition)
          return 0 === Ck && (Ck = yc()), Ck;
        a2 = C2;
        if (0 !== a2)
          return a2;
        a2 = window.event;
        a2 = void 0 === a2 ? 16 : jd(a2.type);
        return a2;
      }
      function mh(a2, b2, c3, d2) {
        if (50 < zk)
          throw zk = 0, Ak = null, Error(p2(185));
        Ac(a2, c3, d2);
        if (0 === (K & 2) || a2 !== R2)
          a2 === R2 && (0 === (K & 2) && (rk |= c3), 4 === T2 && Dk(a2, Z2)), Ek(a2, d2), 1 === c3 && 0 === K && 0 === (b2.mode & 1) && (Hj = B2() + 500, fg && jg());
      }
      function Ek(a2, b2) {
        var c3 = a2.callbackNode;
        wc(a2, b2);
        var d2 = uc(a2, a2 === R2 ? Z2 : 0);
        if (0 === d2)
          null !== c3 && bc(c3), a2.callbackNode = null, a2.callbackPriority = 0;
        else if (b2 = d2 & -d2, a2.callbackPriority !== b2) {
          null != c3 && bc(c3);
          if (1 === b2)
            0 === a2.tag ? ig(Fk.bind(null, a2)) : hg(Fk.bind(null, a2)), Jf(function() {
              0 === (K & 6) && jg();
            }), c3 = null;
          else {
            switch (Dc(d2)) {
              case 1:
                c3 = fc;
                break;
              case 4:
                c3 = gc;
                break;
              case 16:
                c3 = hc;
                break;
              case 536870912:
                c3 = jc;
                break;
              default:
                c3 = hc;
            }
            c3 = Gk(c3, Hk.bind(null, a2));
          }
          a2.callbackPriority = b2;
          a2.callbackNode = c3;
        }
      }
      function Hk(a2, b2) {
        Bk = -1;
        Ck = 0;
        if (0 !== (K & 6))
          throw Error(p2(327));
        var c3 = a2.callbackNode;
        if (Ik() && a2.callbackNode !== c3)
          return null;
        var d2 = uc(a2, a2 === R2 ? Z2 : 0);
        if (0 === d2)
          return null;
        if (0 !== (d2 & 30) || 0 !== (d2 & a2.expiredLanes) || b2)
          b2 = Jk(a2, d2);
        else {
          b2 = d2;
          var e2 = K;
          K |= 2;
          var f2 = Kk();
          if (R2 !== a2 || Z2 !== b2)
            vk = null, Hj = B2() + 500, Lk(a2, b2);
          do
            try {
              Mk();
              break;
            } catch (h2) {
              Nk(a2, h2);
            }
          while (1);
          Qg();
          nk.current = f2;
          K = e2;
          null !== Y2 ? b2 = 0 : (R2 = null, Z2 = 0, b2 = T2);
        }
        if (0 !== b2) {
          2 === b2 && (e2 = xc(a2), 0 !== e2 && (d2 = e2, b2 = Ok(a2, e2)));
          if (1 === b2)
            throw c3 = qk, Lk(a2, 0), Dk(a2, d2), Ek(a2, B2()), c3;
          if (6 === b2)
            Dk(a2, d2);
          else {
            e2 = a2.current.alternate;
            if (0 === (d2 & 30) && !Pk(e2) && (b2 = Jk(a2, d2), 2 === b2 && (f2 = xc(a2), 0 !== f2 && (d2 = f2, b2 = Ok(a2, f2))), 1 === b2))
              throw c3 = qk, Lk(a2, 0), Dk(a2, d2), Ek(a2, B2()), c3;
            a2.finishedWork = e2;
            a2.finishedLanes = d2;
            switch (b2) {
              case 0:
              case 1:
                throw Error(p2(345));
              case 2:
                Qk(a2, uk, vk);
                break;
              case 3:
                Dk(a2, d2);
                if ((d2 & 130023424) === d2 && (b2 = gk + 500 - B2(), 10 < b2)) {
                  if (0 !== uc(a2, 0))
                    break;
                  e2 = a2.suspendedLanes;
                  if ((e2 & d2) !== d2) {
                    L2();
                    a2.pingedLanes |= a2.suspendedLanes & e2;
                    break;
                  }
                  a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), b2);
                  break;
                }
                Qk(a2, uk, vk);
                break;
              case 4:
                Dk(a2, d2);
                if ((d2 & 4194240) === d2)
                  break;
                b2 = a2.eventTimes;
                for (e2 = -1; 0 < d2; ) {
                  var g2 = 31 - oc(d2);
                  f2 = 1 << g2;
                  g2 = b2[g2];
                  g2 > e2 && (e2 = g2);
                  d2 &= ~f2;
                }
                d2 = e2;
                d2 = B2() - d2;
                d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * mk(d2 / 1960)) - d2;
                if (10 < d2) {
                  a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), d2);
                  break;
                }
                Qk(a2, uk, vk);
                break;
              case 5:
                Qk(a2, uk, vk);
                break;
              default:
                throw Error(p2(329));
            }
          }
        }
        Ek(a2, B2());
        return a2.callbackNode === c3 ? Hk.bind(null, a2) : null;
      }
      function Ok(a2, b2) {
        var c3 = tk;
        a2.current.memoizedState.isDehydrated && (Lk(a2, b2).flags |= 256);
        a2 = Jk(a2, b2);
        2 !== a2 && (b2 = uk, uk = c3, null !== b2 && Gj(b2));
        return a2;
      }
      function Gj(a2) {
        null === uk ? uk = a2 : uk.push.apply(uk, a2);
      }
      function Pk(a2) {
        for (var b2 = a2; ; ) {
          if (b2.flags & 16384) {
            var c3 = b2.updateQueue;
            if (null !== c3 && (c3 = c3.stores, null !== c3))
              for (var d2 = 0; d2 < c3.length; d2++) {
                var e2 = c3[d2], f2 = e2.getSnapshot;
                e2 = e2.value;
                try {
                  if (!He(f2(), e2))
                    return false;
                } catch (g2) {
                  return false;
                }
              }
          }
          c3 = b2.child;
          if (b2.subtreeFlags & 16384 && null !== c3)
            c3.return = b2, b2 = c3;
          else {
            if (b2 === a2)
              break;
            for (; null === b2.sibling; ) {
              if (null === b2.return || b2.return === a2)
                return true;
              b2 = b2.return;
            }
            b2.sibling.return = b2.return;
            b2 = b2.sibling;
          }
        }
        return true;
      }
      function Dk(a2, b2) {
        b2 &= ~sk;
        b2 &= ~rk;
        a2.suspendedLanes |= b2;
        a2.pingedLanes &= ~b2;
        for (a2 = a2.expirationTimes; 0 < b2; ) {
          var c3 = 31 - oc(b2), d2 = 1 << c3;
          a2[c3] = -1;
          b2 &= ~d2;
        }
      }
      function Fk(a2) {
        if (0 !== (K & 6))
          throw Error(p2(327));
        Ik();
        var b2 = uc(a2, 0);
        if (0 === (b2 & 1))
          return Ek(a2, B2()), null;
        var c3 = Jk(a2, b2);
        if (0 !== a2.tag && 2 === c3) {
          var d2 = xc(a2);
          0 !== d2 && (b2 = d2, c3 = Ok(a2, d2));
        }
        if (1 === c3)
          throw c3 = qk, Lk(a2, 0), Dk(a2, b2), Ek(a2, B2()), c3;
        if (6 === c3)
          throw Error(p2(345));
        a2.finishedWork = a2.current.alternate;
        a2.finishedLanes = b2;
        Qk(a2, uk, vk);
        Ek(a2, B2());
        return null;
      }
      function Rk(a2, b2) {
        var c3 = K;
        K |= 1;
        try {
          return a2(b2);
        } finally {
          K = c3, 0 === K && (Hj = B2() + 500, fg && jg());
        }
      }
      function Sk(a2) {
        null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
        var b2 = K;
        K |= 1;
        var c3 = pk.transition, d2 = C2;
        try {
          if (pk.transition = null, C2 = 1, a2)
            return a2();
        } finally {
          C2 = d2, pk.transition = c3, K = b2, 0 === (K & 6) && jg();
        }
      }
      function Ij() {
        gj = fj.current;
        E2(fj);
      }
      function Lk(a2, b2) {
        a2.finishedWork = null;
        a2.finishedLanes = 0;
        var c3 = a2.timeoutHandle;
        -1 !== c3 && (a2.timeoutHandle = -1, Gf(c3));
        if (null !== Y2)
          for (c3 = Y2.return; null !== c3; ) {
            var d2 = c3;
            wg(d2);
            switch (d2.tag) {
              case 1:
                d2 = d2.type.childContextTypes;
                null !== d2 && void 0 !== d2 && $f();
                break;
              case 3:
                Jh();
                E2(Wf);
                E2(H2);
                Oh();
                break;
              case 5:
                Lh(d2);
                break;
              case 4:
                Jh();
                break;
              case 13:
                E2(M2);
                break;
              case 19:
                E2(M2);
                break;
              case 10:
                Rg(d2.type._context);
                break;
              case 22:
              case 23:
                Ij();
            }
            c3 = c3.return;
          }
        R2 = a2;
        Y2 = a2 = wh(a2.current, null);
        Z2 = gj = b2;
        T2 = 0;
        qk = null;
        sk = rk = hh = 0;
        uk = tk = null;
        if (null !== Wg) {
          for (b2 = 0; b2 < Wg.length; b2++)
            if (c3 = Wg[b2], d2 = c3.interleaved, null !== d2) {
              c3.interleaved = null;
              var e2 = d2.next, f2 = c3.pending;
              if (null !== f2) {
                var g2 = f2.next;
                f2.next = e2;
                d2.next = g2;
              }
              c3.pending = d2;
            }
          Wg = null;
        }
        return a2;
      }
      function Nk(a2, b2) {
        do {
          var c3 = Y2;
          try {
            Qg();
            Ph.current = ai;
            if (Sh) {
              for (var d2 = N2.memoizedState; null !== d2; ) {
                var e2 = d2.queue;
                null !== e2 && (e2.pending = null);
                d2 = d2.next;
              }
              Sh = false;
            }
            Rh = 0;
            P2 = O2 = N2 = null;
            Th = false;
            Uh = 0;
            ok.current = null;
            if (null === c3 || null === c3.return) {
              T2 = 1;
              qk = b2;
              Y2 = null;
              break;
            }
            a: {
              var f2 = a2, g2 = c3.return, h2 = c3, k2 = b2;
              b2 = Z2;
              h2.flags |= 32768;
              if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
                var l2 = k2, m2 = h2, q2 = m2.tag;
                if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
                  var r2 = m2.alternate;
                  r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
                }
                var y2 = Vi(g2);
                if (null !== y2) {
                  y2.flags &= -257;
                  Wi(y2, g2, h2, f2, b2);
                  y2.mode & 1 && Ti(f2, l2, b2);
                  b2 = y2;
                  k2 = l2;
                  var n2 = b2.updateQueue;
                  if (null === n2) {
                    var t2 = /* @__PURE__ */ new Set();
                    t2.add(k2);
                    b2.updateQueue = t2;
                  } else
                    n2.add(k2);
                  break a;
                } else {
                  if (0 === (b2 & 1)) {
                    Ti(f2, l2, b2);
                    uj();
                    break a;
                  }
                  k2 = Error(p2(426));
                }
              } else if (I2 && h2.mode & 1) {
                var J2 = Vi(g2);
                if (null !== J2) {
                  0 === (J2.flags & 65536) && (J2.flags |= 256);
                  Wi(J2, g2, h2, f2, b2);
                  Jg(Ki(k2, h2));
                  break a;
                }
              }
              f2 = k2 = Ki(k2, h2);
              4 !== T2 && (T2 = 2);
              null === tk ? tk = [f2] : tk.push(f2);
              f2 = g2;
              do {
                switch (f2.tag) {
                  case 3:
                    f2.flags |= 65536;
                    b2 &= -b2;
                    f2.lanes |= b2;
                    var x2 = Oi(f2, k2, b2);
                    fh(f2, x2);
                    break a;
                  case 1:
                    h2 = k2;
                    var w2 = f2.type, u2 = f2.stateNode;
                    if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Si || !Si.has(u2)))) {
                      f2.flags |= 65536;
                      b2 &= -b2;
                      f2.lanes |= b2;
                      var F2 = Ri(f2, h2, b2);
                      fh(f2, F2);
                      break a;
                    }
                }
                f2 = f2.return;
              } while (null !== f2);
            }
            Tk(c3);
          } catch (na) {
            b2 = na;
            Y2 === c3 && null !== c3 && (Y2 = c3 = c3.return);
            continue;
          }
          break;
        } while (1);
      }
      function Kk() {
        var a2 = nk.current;
        nk.current = ai;
        return null === a2 ? ai : a2;
      }
      function uj() {
        if (0 === T2 || 3 === T2 || 2 === T2)
          T2 = 4;
        null === R2 || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R2, Z2);
      }
      function Jk(a2, b2) {
        var c3 = K;
        K |= 2;
        var d2 = Kk();
        if (R2 !== a2 || Z2 !== b2)
          vk = null, Lk(a2, b2);
        do
          try {
            Uk();
            break;
          } catch (e2) {
            Nk(a2, e2);
          }
        while (1);
        Qg();
        K = c3;
        nk.current = d2;
        if (null !== Y2)
          throw Error(p2(261));
        R2 = null;
        Z2 = 0;
        return T2;
      }
      function Uk() {
        for (; null !== Y2; )
          Vk(Y2);
      }
      function Mk() {
        for (; null !== Y2 && !cc(); )
          Vk(Y2);
      }
      function Vk(a2) {
        var b2 = Wk(a2.alternate, a2, gj);
        a2.memoizedProps = a2.pendingProps;
        null === b2 ? Tk(a2) : Y2 = b2;
        ok.current = null;
      }
      function Tk(a2) {
        var b2 = a2;
        do {
          var c3 = b2.alternate;
          a2 = b2.return;
          if (0 === (b2.flags & 32768)) {
            if (c3 = Fj(c3, b2, gj), null !== c3) {
              Y2 = c3;
              return;
            }
          } else {
            c3 = Jj(c3, b2);
            if (null !== c3) {
              c3.flags &= 32767;
              Y2 = c3;
              return;
            }
            if (null !== a2)
              a2.flags |= 32768, a2.subtreeFlags = 0, a2.deletions = null;
            else {
              T2 = 6;
              Y2 = null;
              return;
            }
          }
          b2 = b2.sibling;
          if (null !== b2) {
            Y2 = b2;
            return;
          }
          Y2 = b2 = a2;
        } while (null !== b2);
        0 === T2 && (T2 = 5);
      }
      function Qk(a2, b2, c3) {
        var d2 = C2, e2 = pk.transition;
        try {
          pk.transition = null, C2 = 1, Xk(a2, b2, c3, d2);
        } finally {
          pk.transition = e2, C2 = d2;
        }
        return null;
      }
      function Xk(a2, b2, c3, d2) {
        do
          Ik();
        while (null !== xk);
        if (0 !== (K & 6))
          throw Error(p2(327));
        c3 = a2.finishedWork;
        var e2 = a2.finishedLanes;
        if (null === c3)
          return null;
        a2.finishedWork = null;
        a2.finishedLanes = 0;
        if (c3 === a2.current)
          throw Error(p2(177));
        a2.callbackNode = null;
        a2.callbackPriority = 0;
        var f2 = c3.lanes | c3.childLanes;
        Bc(a2, f2);
        a2 === R2 && (Y2 = R2 = null, Z2 = 0);
        0 === (c3.subtreeFlags & 2064) && 0 === (c3.flags & 2064) || wk || (wk = true, Gk(hc, function() {
          Ik();
          return null;
        }));
        f2 = 0 !== (c3.flags & 15990);
        if (0 !== (c3.subtreeFlags & 15990) || f2) {
          f2 = pk.transition;
          pk.transition = null;
          var g2 = C2;
          C2 = 1;
          var h2 = K;
          K |= 4;
          ok.current = null;
          Pj(a2, c3);
          ek(c3, a2);
          Oe(Df);
          dd = !!Cf;
          Df = Cf = null;
          a2.current = c3;
          ik(c3, a2, e2);
          dc();
          K = h2;
          C2 = g2;
          pk.transition = f2;
        } else
          a2.current = c3;
        wk && (wk = false, xk = a2, yk = e2);
        f2 = a2.pendingLanes;
        0 === f2 && (Si = null);
        mc(c3.stateNode, d2);
        Ek(a2, B2());
        if (null !== b2)
          for (d2 = a2.onRecoverableError, c3 = 0; c3 < b2.length; c3++)
            e2 = b2[c3], d2(e2.value, { componentStack: e2.stack, digest: e2.digest });
        if (Pi)
          throw Pi = false, a2 = Qi, Qi = null, a2;
        0 !== (yk & 1) && 0 !== a2.tag && Ik();
        f2 = a2.pendingLanes;
        0 !== (f2 & 1) ? a2 === Ak ? zk++ : (zk = 0, Ak = a2) : zk = 0;
        jg();
        return null;
      }
      function Ik() {
        if (null !== xk) {
          var a2 = Dc(yk), b2 = pk.transition, c3 = C2;
          try {
            pk.transition = null;
            C2 = 16 > a2 ? 16 : a2;
            if (null === xk)
              var d2 = false;
            else {
              a2 = xk;
              xk = null;
              yk = 0;
              if (0 !== (K & 6))
                throw Error(p2(331));
              var e2 = K;
              K |= 4;
              for (V2 = a2.current; null !== V2; ) {
                var f2 = V2, g2 = f2.child;
                if (0 !== (V2.flags & 16)) {
                  var h2 = f2.deletions;
                  if (null !== h2) {
                    for (var k2 = 0; k2 < h2.length; k2++) {
                      var l2 = h2[k2];
                      for (V2 = l2; null !== V2; ) {
                        var m2 = V2;
                        switch (m2.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Qj(8, m2, f2);
                        }
                        var q2 = m2.child;
                        if (null !== q2)
                          q2.return = m2, V2 = q2;
                        else
                          for (; null !== V2; ) {
                            m2 = V2;
                            var r2 = m2.sibling, y2 = m2.return;
                            Tj(m2);
                            if (m2 === l2) {
                              V2 = null;
                              break;
                            }
                            if (null !== r2) {
                              r2.return = y2;
                              V2 = r2;
                              break;
                            }
                            V2 = y2;
                          }
                      }
                    }
                    var n2 = f2.alternate;
                    if (null !== n2) {
                      var t2 = n2.child;
                      if (null !== t2) {
                        n2.child = null;
                        do {
                          var J2 = t2.sibling;
                          t2.sibling = null;
                          t2 = J2;
                        } while (null !== t2);
                      }
                    }
                    V2 = f2;
                  }
                }
                if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
                  g2.return = f2, V2 = g2;
                else
                  b:
                    for (; null !== V2; ) {
                      f2 = V2;
                      if (0 !== (f2.flags & 2048))
                        switch (f2.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Qj(9, f2, f2.return);
                        }
                      var x2 = f2.sibling;
                      if (null !== x2) {
                        x2.return = f2.return;
                        V2 = x2;
                        break b;
                      }
                      V2 = f2.return;
                    }
              }
              var w2 = a2.current;
              for (V2 = w2; null !== V2; ) {
                g2 = V2;
                var u2 = g2.child;
                if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
                  u2.return = g2, V2 = u2;
                else
                  b:
                    for (g2 = w2; null !== V2; ) {
                      h2 = V2;
                      if (0 !== (h2.flags & 2048))
                        try {
                          switch (h2.tag) {
                            case 0:
                            case 11:
                            case 15:
                              Rj(9, h2);
                          }
                        } catch (na) {
                          W2(h2, h2.return, na);
                        }
                      if (h2 === g2) {
                        V2 = null;
                        break b;
                      }
                      var F2 = h2.sibling;
                      if (null !== F2) {
                        F2.return = h2.return;
                        V2 = F2;
                        break b;
                      }
                      V2 = h2.return;
                    }
              }
              K = e2;
              jg();
              if (lc && "function" === typeof lc.onPostCommitFiberRoot)
                try {
                  lc.onPostCommitFiberRoot(kc, a2);
                } catch (na) {
                }
              d2 = true;
            }
            return d2;
          } finally {
            C2 = c3, pk.transition = b2;
          }
        }
        return false;
      }
      function Yk(a2, b2, c3) {
        b2 = Ki(c3, b2);
        b2 = Oi(a2, b2, 1);
        a2 = dh(a2, b2, 1);
        b2 = L2();
        null !== a2 && (Ac(a2, 1, b2), Ek(a2, b2));
      }
      function W2(a2, b2, c3) {
        if (3 === a2.tag)
          Yk(a2, a2, c3);
        else
          for (; null !== b2; ) {
            if (3 === b2.tag) {
              Yk(b2, a2, c3);
              break;
            } else if (1 === b2.tag) {
              var d2 = b2.stateNode;
              if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Si || !Si.has(d2))) {
                a2 = Ki(c3, a2);
                a2 = Ri(b2, a2, 1);
                b2 = dh(b2, a2, 1);
                a2 = L2();
                null !== b2 && (Ac(b2, 1, a2), Ek(b2, a2));
                break;
              }
            }
            b2 = b2.return;
          }
      }
      function Ui(a2, b2, c3) {
        var d2 = a2.pingCache;
        null !== d2 && d2.delete(b2);
        b2 = L2();
        a2.pingedLanes |= a2.suspendedLanes & c3;
        R2 === a2 && (Z2 & c3) === c3 && (4 === T2 || 3 === T2 && (Z2 & 130023424) === Z2 && 500 > B2() - gk ? Lk(a2, 0) : sk |= c3);
        Ek(a2, b2);
      }
      function Zk(a2, b2) {
        0 === b2 && (0 === (a2.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
        var c3 = L2();
        a2 = Zg(a2, b2);
        null !== a2 && (Ac(a2, b2, c3), Ek(a2, c3));
      }
      function vj(a2) {
        var b2 = a2.memoizedState, c3 = 0;
        null !== b2 && (c3 = b2.retryLane);
        Zk(a2, c3);
      }
      function ck(a2, b2) {
        var c3 = 0;
        switch (a2.tag) {
          case 13:
            var d2 = a2.stateNode;
            var e2 = a2.memoizedState;
            null !== e2 && (c3 = e2.retryLane);
            break;
          case 19:
            d2 = a2.stateNode;
            break;
          default:
            throw Error(p2(314));
        }
        null !== d2 && d2.delete(b2);
        Zk(a2, c3);
      }
      var Wk;
      Wk = function(a2, b2, c3) {
        if (null !== a2)
          if (a2.memoizedProps !== b2.pendingProps || Wf.current)
            Ug = true;
          else {
            if (0 === (a2.lanes & c3) && 0 === (b2.flags & 128))
              return Ug = false, zj(a2, b2, c3);
            Ug = 0 !== (a2.flags & 131072) ? true : false;
          }
        else
          Ug = false, I2 && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
        b2.lanes = 0;
        switch (b2.tag) {
          case 2:
            var d2 = b2.type;
            jj(a2, b2);
            a2 = b2.pendingProps;
            var e2 = Yf(b2, H2.current);
            Tg(b2, c3);
            e2 = Xh(null, b2, d2, a2, e2, c3);
            var f2 = bi();
            b2.flags |= 1;
            "object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null, ah(b2), e2.updater = nh, b2.stateNode = e2, e2._reactInternals = b2, rh(b2, d2, a2, c3), b2 = kj(null, b2, d2, true, f2, c3)) : (b2.tag = 0, I2 && f2 && vg(b2), Yi(null, b2, e2, c3), b2 = b2.child);
            return b2;
          case 16:
            d2 = b2.elementType;
            a: {
              jj(a2, b2);
              a2 = b2.pendingProps;
              e2 = d2._init;
              d2 = e2(d2._payload);
              b2.type = d2;
              e2 = b2.tag = $k(d2);
              a2 = Lg(d2, a2);
              switch (e2) {
                case 0:
                  b2 = dj(null, b2, d2, a2, c3);
                  break a;
                case 1:
                  b2 = ij(null, b2, d2, a2, c3);
                  break a;
                case 11:
                  b2 = Zi(null, b2, d2, a2, c3);
                  break a;
                case 14:
                  b2 = aj(null, b2, d2, Lg(d2.type, a2), c3);
                  break a;
              }
              throw Error(p2(
                306,
                d2,
                ""
              ));
            }
            return b2;
          case 0:
            return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), dj(a2, b2, d2, e2, c3);
          case 1:
            return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), ij(a2, b2, d2, e2, c3);
          case 3:
            a: {
              lj(b2);
              if (null === a2)
                throw Error(p2(387));
              d2 = b2.pendingProps;
              f2 = b2.memoizedState;
              e2 = f2.element;
              bh(a2, b2);
              gh(b2, d2, null, c3);
              var g2 = b2.memoizedState;
              d2 = g2.element;
              if (f2.isDehydrated)
                if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
                  e2 = Ki(Error(p2(423)), b2);
                  b2 = mj(a2, b2, d2, c3, e2);
                  break a;
                } else if (d2 !== e2) {
                  e2 = Ki(Error(p2(424)), b2);
                  b2 = mj(a2, b2, d2, c3, e2);
                  break a;
                } else
                  for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I2 = true, zg = null, c3 = Ch(b2, null, d2, c3), b2.child = c3; c3; )
                    c3.flags = c3.flags & -3 | 4096, c3 = c3.sibling;
              else {
                Ig();
                if (d2 === e2) {
                  b2 = $i(a2, b2, c3);
                  break a;
                }
                Yi(a2, b2, d2, c3);
              }
              b2 = b2.child;
            }
            return b2;
          case 5:
            return Kh(b2), null === a2 && Eg(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = null !== a2 ? a2.memoizedProps : null, g2 = e2.children, Ef(d2, e2) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), hj(a2, b2), Yi(a2, b2, g2, c3), b2.child;
          case 6:
            return null === a2 && Eg(b2), null;
          case 13:
            return pj(a2, b2, c3);
          case 4:
            return Ih(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a2 ? b2.child = Bh(b2, null, d2, c3) : Yi(a2, b2, d2, c3), b2.child;
          case 11:
            return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), Zi(a2, b2, d2, e2, c3);
          case 7:
            return Yi(a2, b2, b2.pendingProps, c3), b2.child;
          case 8:
            return Yi(a2, b2, b2.pendingProps.children, c3), b2.child;
          case 12:
            return Yi(a2, b2, b2.pendingProps.children, c3), b2.child;
          case 10:
            a: {
              d2 = b2.type._context;
              e2 = b2.pendingProps;
              f2 = b2.memoizedProps;
              g2 = e2.value;
              G2(Mg, d2._currentValue);
              d2._currentValue = g2;
              if (null !== f2)
                if (He(f2.value, g2)) {
                  if (f2.children === e2.children && !Wf.current) {
                    b2 = $i(a2, b2, c3);
                    break a;
                  }
                } else
                  for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
                    var h2 = f2.dependencies;
                    if (null !== h2) {
                      g2 = f2.child;
                      for (var k2 = h2.firstContext; null !== k2; ) {
                        if (k2.context === d2) {
                          if (1 === f2.tag) {
                            k2 = ch(-1, c3 & -c3);
                            k2.tag = 2;
                            var l2 = f2.updateQueue;
                            if (null !== l2) {
                              l2 = l2.shared;
                              var m2 = l2.pending;
                              null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                              l2.pending = k2;
                            }
                          }
                          f2.lanes |= c3;
                          k2 = f2.alternate;
                          null !== k2 && (k2.lanes |= c3);
                          Sg(
                            f2.return,
                            c3,
                            b2
                          );
                          h2.lanes |= c3;
                          break;
                        }
                        k2 = k2.next;
                      }
                    } else if (10 === f2.tag)
                      g2 = f2.type === b2.type ? null : f2.child;
                    else if (18 === f2.tag) {
                      g2 = f2.return;
                      if (null === g2)
                        throw Error(p2(341));
                      g2.lanes |= c3;
                      h2 = g2.alternate;
                      null !== h2 && (h2.lanes |= c3);
                      Sg(g2, c3, b2);
                      g2 = f2.sibling;
                    } else
                      g2 = f2.child;
                    if (null !== g2)
                      g2.return = f2;
                    else
                      for (g2 = f2; null !== g2; ) {
                        if (g2 === b2) {
                          g2 = null;
                          break;
                        }
                        f2 = g2.sibling;
                        if (null !== f2) {
                          f2.return = g2.return;
                          g2 = f2;
                          break;
                        }
                        g2 = g2.return;
                      }
                    f2 = g2;
                  }
              Yi(a2, b2, e2.children, c3);
              b2 = b2.child;
            }
            return b2;
          case 9:
            return e2 = b2.type, d2 = b2.pendingProps.children, Tg(b2, c3), e2 = Vg(e2), d2 = d2(e2), b2.flags |= 1, Yi(a2, b2, d2, c3), b2.child;
          case 14:
            return d2 = b2.type, e2 = Lg(d2, b2.pendingProps), e2 = Lg(d2.type, e2), aj(a2, b2, d2, e2, c3);
          case 15:
            return cj(a2, b2, b2.type, b2.pendingProps, c3);
          case 17:
            return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), jj(a2, b2), b2.tag = 1, Zf(d2) ? (a2 = true, cg(b2)) : a2 = false, Tg(b2, c3), ph(b2, d2, e2), rh(b2, d2, e2, c3), kj(null, b2, d2, true, a2, c3);
          case 19:
            return yj(a2, b2, c3);
          case 22:
            return ej(a2, b2, c3);
        }
        throw Error(p2(156, b2.tag));
      };
      function Gk(a2, b2) {
        return ac(a2, b2);
      }
      function al(a2, b2, c3, d2) {
        this.tag = a2;
        this.key = c3;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b2;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d2;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function Bg(a2, b2, c3, d2) {
        return new al(a2, b2, c3, d2);
      }
      function bj(a2) {
        a2 = a2.prototype;
        return !(!a2 || !a2.isReactComponent);
      }
      function $k(a2) {
        if ("function" === typeof a2)
          return bj(a2) ? 1 : 0;
        if (void 0 !== a2 && null !== a2) {
          a2 = a2.$$typeof;
          if (a2 === Da)
            return 11;
          if (a2 === Ga)
            return 14;
        }
        return 2;
      }
      function wh(a2, b2) {
        var c3 = a2.alternate;
        null === c3 ? (c3 = Bg(a2.tag, b2, a2.key, a2.mode), c3.elementType = a2.elementType, c3.type = a2.type, c3.stateNode = a2.stateNode, c3.alternate = a2, a2.alternate = c3) : (c3.pendingProps = b2, c3.type = a2.type, c3.flags = 0, c3.subtreeFlags = 0, c3.deletions = null);
        c3.flags = a2.flags & 14680064;
        c3.childLanes = a2.childLanes;
        c3.lanes = a2.lanes;
        c3.child = a2.child;
        c3.memoizedProps = a2.memoizedProps;
        c3.memoizedState = a2.memoizedState;
        c3.updateQueue = a2.updateQueue;
        b2 = a2.dependencies;
        c3.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
        c3.sibling = a2.sibling;
        c3.index = a2.index;
        c3.ref = a2.ref;
        return c3;
      }
      function yh(a2, b2, c3, d2, e2, f2) {
        var g2 = 2;
        d2 = a2;
        if ("function" === typeof a2)
          bj(a2) && (g2 = 1);
        else if ("string" === typeof a2)
          g2 = 5;
        else
          a:
            switch (a2) {
              case ya:
                return Ah(c3.children, e2, f2, b2);
              case za:
                g2 = 8;
                e2 |= 8;
                break;
              case Aa:
                return a2 = Bg(12, c3, b2, e2 | 2), a2.elementType = Aa, a2.lanes = f2, a2;
              case Ea:
                return a2 = Bg(13, c3, b2, e2), a2.elementType = Ea, a2.lanes = f2, a2;
              case Fa:
                return a2 = Bg(19, c3, b2, e2), a2.elementType = Fa, a2.lanes = f2, a2;
              case Ia:
                return qj(c3, e2, f2, b2);
              default:
                if ("object" === typeof a2 && null !== a2)
                  switch (a2.$$typeof) {
                    case Ba:
                      g2 = 10;
                      break a;
                    case Ca:
                      g2 = 9;
                      break a;
                    case Da:
                      g2 = 11;
                      break a;
                    case Ga:
                      g2 = 14;
                      break a;
                    case Ha:
                      g2 = 16;
                      d2 = null;
                      break a;
                  }
                throw Error(p2(130, null == a2 ? a2 : typeof a2, ""));
            }
        b2 = Bg(g2, c3, b2, e2);
        b2.elementType = a2;
        b2.type = d2;
        b2.lanes = f2;
        return b2;
      }
      function Ah(a2, b2, c3, d2) {
        a2 = Bg(7, a2, d2, b2);
        a2.lanes = c3;
        return a2;
      }
      function qj(a2, b2, c3, d2) {
        a2 = Bg(22, a2, d2, b2);
        a2.elementType = Ia;
        a2.lanes = c3;
        a2.stateNode = { isHidden: false };
        return a2;
      }
      function xh(a2, b2, c3) {
        a2 = Bg(6, a2, null, b2);
        a2.lanes = c3;
        return a2;
      }
      function zh(a2, b2, c3) {
        b2 = Bg(4, null !== a2.children ? a2.children : [], a2.key, b2);
        b2.lanes = c3;
        b2.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation };
        return b2;
      }
      function bl(a2, b2, c3, d2, e2) {
        this.tag = b2;
        this.containerInfo = a2;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.callbackNode = this.pendingContext = this.context = null;
        this.callbackPriority = 0;
        this.eventTimes = zc(0);
        this.expirationTimes = zc(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = zc(0);
        this.identifierPrefix = d2;
        this.onRecoverableError = e2;
        this.mutableSourceEagerHydrationData = null;
      }
      function cl(a2, b2, c3, d2, e2, f2, g2, h2, k2) {
        a2 = new bl(a2, b2, c3, h2, k2);
        1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
        f2 = Bg(3, null, null, b2);
        a2.current = f2;
        f2.stateNode = a2;
        f2.memoizedState = { element: d2, isDehydrated: c3, cache: null, transitions: null, pendingSuspenseBoundaries: null };
        ah(f2);
        return a2;
      }
      function dl(a2, b2, c3) {
        var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a2, containerInfo: b2, implementation: c3 };
      }
      function el(a2) {
        if (!a2)
          return Vf;
        a2 = a2._reactInternals;
        a: {
          if (Vb(a2) !== a2 || 1 !== a2.tag)
            throw Error(p2(170));
          var b2 = a2;
          do {
            switch (b2.tag) {
              case 3:
                b2 = b2.stateNode.context;
                break a;
              case 1:
                if (Zf(b2.type)) {
                  b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
                  break a;
                }
            }
            b2 = b2.return;
          } while (null !== b2);
          throw Error(p2(171));
        }
        if (1 === a2.tag) {
          var c3 = a2.type;
          if (Zf(c3))
            return bg(a2, c3, b2);
        }
        return b2;
      }
      function fl(a2, b2, c3, d2, e2, f2, g2, h2, k2) {
        a2 = cl(c3, d2, true, a2, e2, f2, g2, h2, k2);
        a2.context = el(null);
        c3 = a2.current;
        d2 = L2();
        e2 = lh(c3);
        f2 = ch(d2, e2);
        f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
        dh(c3, f2, e2);
        a2.current.lanes = e2;
        Ac(a2, e2, d2);
        Ek(a2, d2);
        return a2;
      }
      function gl(a2, b2, c3, d2) {
        var e2 = b2.current, f2 = L2(), g2 = lh(e2);
        c3 = el(c3);
        null === b2.context ? b2.context = c3 : b2.pendingContext = c3;
        b2 = ch(f2, g2);
        b2.payload = { element: a2 };
        d2 = void 0 === d2 ? null : d2;
        null !== d2 && (b2.callback = d2);
        a2 = dh(e2, b2, g2);
        null !== a2 && (mh(a2, e2, g2, f2), eh(a2, e2, g2));
        return g2;
      }
      function hl(a2) {
        a2 = a2.current;
        if (!a2.child)
          return null;
        switch (a2.child.tag) {
          case 5:
            return a2.child.stateNode;
          default:
            return a2.child.stateNode;
        }
      }
      function il(a2, b2) {
        a2 = a2.memoizedState;
        if (null !== a2 && null !== a2.dehydrated) {
          var c3 = a2.retryLane;
          a2.retryLane = 0 !== c3 && c3 < b2 ? c3 : b2;
        }
      }
      function jl(a2, b2) {
        il(a2, b2);
        (a2 = a2.alternate) && il(a2, b2);
      }
      function kl() {
        return null;
      }
      var ll = "function" === typeof reportError ? reportError : function(a2) {
        console.error(a2);
      };
      function ml(a2) {
        this._internalRoot = a2;
      }
      nl.prototype.render = ml.prototype.render = function(a2) {
        var b2 = this._internalRoot;
        if (null === b2)
          throw Error(p2(409));
        gl(a2, b2, null, null);
      };
      nl.prototype.unmount = ml.prototype.unmount = function() {
        var a2 = this._internalRoot;
        if (null !== a2) {
          this._internalRoot = null;
          var b2 = a2.containerInfo;
          Sk(function() {
            gl(null, a2, null, null);
          });
          b2[uf] = null;
        }
      };
      function nl(a2) {
        this._internalRoot = a2;
      }
      nl.prototype.unstable_scheduleHydration = function(a2) {
        if (a2) {
          var b2 = Hc();
          a2 = { blockedOn: null, target: a2, priority: b2 };
          for (var c3 = 0; c3 < Qc.length && 0 !== b2 && b2 < Qc[c3].priority; c3++)
            ;
          Qc.splice(c3, 0, a2);
          0 === c3 && Vc(a2);
        }
      };
      function ol(a2) {
        return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType);
      }
      function pl(a2) {
        return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType && (8 !== a2.nodeType || " react-mount-point-unstable " !== a2.nodeValue));
      }
      function ql() {
      }
      function rl(a2, b2, c3, d2, e2) {
        if (e2) {
          if ("function" === typeof d2) {
            var f2 = d2;
            d2 = function() {
              var a3 = hl(g2);
              f2.call(a3);
            };
          }
          var g2 = fl(b2, d2, a2, 0, null, false, false, "", ql);
          a2._reactRootContainer = g2;
          a2[uf] = g2.current;
          sf(8 === a2.nodeType ? a2.parentNode : a2);
          Sk();
          return g2;
        }
        for (; e2 = a2.lastChild; )
          a2.removeChild(e2);
        if ("function" === typeof d2) {
          var h2 = d2;
          d2 = function() {
            var a3 = hl(k2);
            h2.call(a3);
          };
        }
        var k2 = cl(a2, 0, false, null, null, false, false, "", ql);
        a2._reactRootContainer = k2;
        a2[uf] = k2.current;
        sf(8 === a2.nodeType ? a2.parentNode : a2);
        Sk(function() {
          gl(b2, k2, c3, d2);
        });
        return k2;
      }
      function sl(a2, b2, c3, d2, e2) {
        var f2 = c3._reactRootContainer;
        if (f2) {
          var g2 = f2;
          if ("function" === typeof e2) {
            var h2 = e2;
            e2 = function() {
              var a3 = hl(g2);
              h2.call(a3);
            };
          }
          gl(b2, g2, a2, e2);
        } else
          g2 = rl(c3, b2, a2, e2, d2);
        return hl(g2);
      }
      Ec = function(a2) {
        switch (a2.tag) {
          case 3:
            var b2 = a2.stateNode;
            if (b2.current.memoizedState.isDehydrated) {
              var c3 = tc(b2.pendingLanes);
              0 !== c3 && (Cc(b2, c3 | 1), Ek(b2, B2()), 0 === (K & 6) && (Hj = B2() + 500, jg()));
            }
            break;
          case 13:
            Sk(function() {
              var b3 = Zg(a2, 1);
              if (null !== b3) {
                var c4 = L2();
                mh(b3, a2, 1, c4);
              }
            }), jl(a2, 1);
        }
      };
      Fc = function(a2) {
        if (13 === a2.tag) {
          var b2 = Zg(a2, 134217728);
          if (null !== b2) {
            var c3 = L2();
            mh(b2, a2, 134217728, c3);
          }
          jl(a2, 134217728);
        }
      };
      Gc = function(a2) {
        if (13 === a2.tag) {
          var b2 = lh(a2), c3 = Zg(a2, b2);
          if (null !== c3) {
            var d2 = L2();
            mh(c3, a2, b2, d2);
          }
          jl(a2, b2);
        }
      };
      Hc = function() {
        return C2;
      };
      Ic = function(a2, b2) {
        var c3 = C2;
        try {
          return C2 = a2, b2();
        } finally {
          C2 = c3;
        }
      };
      yb = function(a2, b2, c3) {
        switch (b2) {
          case "input":
            bb(a2, c3);
            b2 = c3.name;
            if ("radio" === c3.type && null != b2) {
              for (c3 = a2; c3.parentNode; )
                c3 = c3.parentNode;
              c3 = c3.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
              for (b2 = 0; b2 < c3.length; b2++) {
                var d2 = c3[b2];
                if (d2 !== a2 && d2.form === a2.form) {
                  var e2 = Db(d2);
                  if (!e2)
                    throw Error(p2(90));
                  Wa(d2);
                  bb(d2, e2);
                }
              }
            }
            break;
          case "textarea":
            ib(a2, c3);
            break;
          case "select":
            b2 = c3.value, null != b2 && fb(a2, !!c3.multiple, b2, false);
        }
      };
      Gb = Rk;
      Hb = Sk;
      var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] };
      var ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
      var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
        a2 = Zb(a2);
        return null === a2 ? null : a2.stateNode;
      }, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
      if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!wl.isDisabled && wl.supportsFiber)
          try {
            kc = wl.inject(vl), lc = wl;
          } catch (a2) {
          }
      }
      var wl;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
      exports.createPortal = function(a2, b2) {
        var c3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!ol(b2))
          throw Error(p2(200));
        return dl(a2, b2, null, c3);
      };
      exports.createRoot = function(a2, b2) {
        if (!ol(a2))
          throw Error(p2(299));
        var c3 = false, d2 = "", e2 = ll;
        null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c3 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e2 = b2.onRecoverableError));
        b2 = cl(a2, 1, false, null, null, c3, false, d2, e2);
        a2[uf] = b2.current;
        sf(8 === a2.nodeType ? a2.parentNode : a2);
        return new ml(b2);
      };
      exports.findDOMNode = function(a2) {
        if (null == a2)
          return null;
        if (1 === a2.nodeType)
          return a2;
        var b2 = a2._reactInternals;
        if (void 0 === b2) {
          if ("function" === typeof a2.render)
            throw Error(p2(188));
          a2 = Object.keys(a2).join(",");
          throw Error(p2(268, a2));
        }
        a2 = Zb(b2);
        a2 = null === a2 ? null : a2.stateNode;
        return a2;
      };
      exports.flushSync = function(a2) {
        return Sk(a2);
      };
      exports.hydrate = function(a2, b2, c3) {
        if (!pl(b2))
          throw Error(p2(200));
        return sl(null, a2, b2, true, c3);
      };
      exports.hydrateRoot = function(a2, b2, c3) {
        if (!ol(a2))
          throw Error(p2(405));
        var d2 = null != c3 && c3.hydratedSources || null, e2 = false, f2 = "", g2 = ll;
        null !== c3 && void 0 !== c3 && (true === c3.unstable_strictMode && (e2 = true), void 0 !== c3.identifierPrefix && (f2 = c3.identifierPrefix), void 0 !== c3.onRecoverableError && (g2 = c3.onRecoverableError));
        b2 = fl(b2, null, a2, 1, null != c3 ? c3 : null, e2, false, f2, g2);
        a2[uf] = b2.current;
        sf(a2);
        if (d2)
          for (a2 = 0; a2 < d2.length; a2++)
            c3 = d2[a2], e2 = c3._getVersion, e2 = e2(c3._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c3, e2] : b2.mutableSourceEagerHydrationData.push(
              c3,
              e2
            );
        return new nl(b2);
      };
      exports.render = function(a2, b2, c3) {
        if (!pl(b2))
          throw Error(p2(200));
        return sl(null, a2, b2, false, c3);
      };
      exports.unmountComponentAtNode = function(a2) {
        if (!pl(a2))
          throw Error(p2(40));
        return a2._reactRootContainer ? (Sk(function() {
          sl(null, null, a2, false, function() {
            a2._reactRootContainer = null;
            a2[uf] = null;
          });
        }), true) : false;
      };
      exports.unstable_batchedUpdates = Rk;
      exports.unstable_renderSubtreeIntoContainer = function(a2, b2, c3, d2) {
        if (!pl(c3))
          throw Error(p2(200));
        if (null == a2 || void 0 === a2._reactInternals)
          throw Error(p2(38));
        return sl(a2, b2, c3, false, d2);
      };
      exports.version = "18.2.0-next-9e3b772b8-20220608";
    }
  });

  // ../assets/node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../assets/node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React7 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React7.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment4 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]) {
                  c3--;
                }
                for (; s2 >= 1 && c3 >= 0; s2--, c3--) {
                  if (sampleLines[s2] !== controlLines[c3]) {
                    if (s2 !== 1 || c3 !== 1) {
                      do {
                        s2--;
                        c3--;
                        if (c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment4:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track2(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React7.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b2) {
            if (isInsideEventHandler) {
              return fn(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b2, c3, d2, e2, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c3, d2, e2, f2) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b2, c3, d2, e2, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c3, d2, e2, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log7 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log7(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset2) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script></script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React7.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment4) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment4) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (c3 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode2 & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode2, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode2, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode2 & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment4:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment4:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check = checks[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b2, c3, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b2, c3, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync2(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync2(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync2(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode2) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode2;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode2) {
            return new FiberNode(tag, pendingProps, key, mode2);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode2;
            if (tag === ConcurrentRoot) {
              mode2 = ConcurrentMode;
              if (isStrictMode === true) {
                mode2 |= StrictLegacyMode;
                {
                  mode2 |= StrictEffectsMode;
                }
              }
            } else {
              mode2 = NoMode;
            }
            if (isDevToolsPresent) {
              mode2 |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode2);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode2 |= StrictLegacyMode;
                    if ((mode2 & ConcurrentMode) !== NoMode) {
                      mode2 |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode2);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode2, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode2, lanes, key) {
            var fiber = createFiber(Fragment4, elements, key, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode2, lanes) {
            var fiber = createFiber(HostText, content, null, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode2, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode2);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync2(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index3) {
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index3, value) {
              if (index3 >= path.length) {
                return value;
              }
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync2(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync2();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync2(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync2(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync2(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../assets/node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../assets/node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        if (process.env.NODE_ENV !== "production") {
          throw new Error("^_^");
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      if (process.env.NODE_ENV === "production") {
        checkDCE();
        module.exports = require_react_dom_production_min();
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // ../assets/node_modules/react/cjs/react-jsx-runtime.production.min.js
  var require_react_jsx_runtime_production_min = __commonJS({
    "../assets/node_modules/react/cjs/react-jsx-runtime.production.min.js"(exports) {
      "use strict";
      var f2 = require_react();
      var k2 = Symbol.for("react.element");
      var l2 = Symbol.for("react.fragment");
      var m2 = Object.prototype.hasOwnProperty;
      var n2 = f2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
      var p2 = { key: true, ref: true, __self: true, __source: true };
      function q2(c3, a2, g2) {
        var b2, d2 = {}, e2 = null, h2 = null;
        void 0 !== g2 && (e2 = "" + g2);
        void 0 !== a2.key && (e2 = "" + a2.key);
        void 0 !== a2.ref && (h2 = a2.ref);
        for (b2 in a2)
          m2.call(a2, b2) && !p2.hasOwnProperty(b2) && (d2[b2] = a2[b2]);
        if (c3 && c3.defaultProps)
          for (b2 in a2 = c3.defaultProps, a2)
            void 0 === d2[b2] && (d2[b2] = a2[b2]);
        return { $$typeof: k2, type: c3, key: e2, ref: h2, props: d2, _owner: n2.current };
      }
      exports.Fragment = l2;
      exports.jsx = q2;
      exports.jsxs = q2;
    }
  });

  // ../assets/node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "../assets/node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var React7 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React7.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]) {
                  c3--;
                }
                for (; s2 >= 1 && c3 >= 0; s2--, c3--) {
                  if (sampleLines[s2] !== controlLines[c3]) {
                    if (s2 !== 1 || c3 !== 1) {
                      do {
                        s2--;
                        c3--;
                        if (c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i2 = 0; i2 < node.length; i2++) {
                  var child = node[i2];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        validateChildKeys(children[i2], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx65 = jsxWithValidationDynamic;
          var jsxs30 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx65;
          exports.jsxs = jsxs30;
        })();
      }
    }
  });

  // ../assets/node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../assets/node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_react_jsx_runtime_production_min();
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // ../assets/node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "../assets/node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends() {
        module.exports = _extends = Object.assign ? Object.assign.bind() : function(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = arguments[i2];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _extends.apply(this, arguments);
      }
      module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // ../assets/node_modules/@radix-ui/primitive/dist/index.js
  var require_dist = __commonJS({
    "../assets/node_modules/@radix-ui/primitive/dist/index.js"(exports, module) {
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "composeEventHandlers", () => $1a6a90a521dcd173$export$b9ecd428b558ff10);
      function $1a6a90a521dcd173$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
        return function handleEvent(event) {
          originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
          if (checkForDefaultPrevented === false || !event.defaultPrevented)
            return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
        };
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-compose-refs/dist/index.js
  var require_dist2 = __commonJS({
    "../assets/node_modules/@radix-ui/react-compose-refs/dist/index.js"(exports, module) {
      var $dJwbH$react = require_react();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "composeRefs", () => $9c2aaba23466b352$export$43e446d32b3d21af);
      $parcel$export(module.exports, "useComposedRefs", () => $9c2aaba23466b352$export$c7b2cbe3552a0d05);
      function $9c2aaba23466b352$var$setRef(ref, value) {
        if (typeof ref === "function")
          ref(value);
        else if (ref !== null && ref !== void 0)
          ref.current = value;
      }
      function $9c2aaba23466b352$export$43e446d32b3d21af(...refs) {
        return (node) => refs.forEach(
          (ref) => $9c2aaba23466b352$var$setRef(ref, node)
        );
      }
      function $9c2aaba23466b352$export$c7b2cbe3552a0d05(...refs) {
        return $dJwbH$react.useCallback($9c2aaba23466b352$export$43e446d32b3d21af(...refs), refs);
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-context/dist/index.js
  var require_dist3 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context/dist/index.js"(exports, module) {
      var $4O1Ne$react = require_react();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "createContext", () => $dec3cc0142d4f286$export$fd42f52fd3ae1109);
      $parcel$export(module.exports, "createContextScope", () => $dec3cc0142d4f286$export$50c7b4e9d9f19c1);
      function $dec3cc0142d4f286$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
        const Context = /* @__PURE__ */ $4O1Ne$react.createContext(defaultContext);
        function Provider(props) {
          const _a2 = props, { children } = _a2, context = __objRest(_a2, ["children"]);
          const value = $4O1Ne$react.useMemo(
            () => context,
            Object.values(context)
          );
          return /* @__PURE__ */ $4O1Ne$react.createElement(Context.Provider, {
            value
          }, children);
        }
        function useContext(consumerName) {
          const context = $4O1Ne$react.useContext(Context);
          if (context)
            return context;
          if (defaultContext !== void 0)
            return defaultContext;
          throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
        }
        Provider.displayName = rootComponentName + "Provider";
        return [
          Provider,
          useContext
        ];
      }
      function $dec3cc0142d4f286$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
        let defaultContexts = [];
        function $dec3cc0142d4f286$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
          const BaseContext = /* @__PURE__ */ $4O1Ne$react.createContext(defaultContext);
          const index2 = defaultContexts.length;
          defaultContexts = [
            ...defaultContexts,
            defaultContext
          ];
          function Provider(props) {
            const _a2 = props, { scope, children } = _a2, context = __objRest(_a2, ["scope", "children"]);
            const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index2]) || BaseContext;
            const value = $4O1Ne$react.useMemo(
              () => context,
              Object.values(context)
            );
            return /* @__PURE__ */ $4O1Ne$react.createElement(Context.Provider, {
              value
            }, children);
          }
          function useContext(consumerName, scope) {
            const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index2]) || BaseContext;
            const context = $4O1Ne$react.useContext(Context);
            if (context)
              return context;
            if (defaultContext !== void 0)
              return defaultContext;
            throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
          }
          Provider.displayName = rootComponentName + "Provider";
          return [
            Provider,
            useContext
          ];
        }
        const createScope = () => {
          const scopeContexts = defaultContexts.map((defaultContext) => {
            return /* @__PURE__ */ $4O1Ne$react.createContext(defaultContext);
          });
          return function useScope(scope) {
            const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
            return $4O1Ne$react.useMemo(
              () => ({
                [`__scope${scopeName}`]: __spreadProps(__spreadValues({}, scope), {
                  [scopeName]: contexts
                })
              }),
              [
                scope,
                contexts
              ]
            );
          };
        };
        createScope.scopeName = scopeName;
        return [
          $dec3cc0142d4f286$export$fd42f52fd3ae11092,
          $dec3cc0142d4f286$var$composeContextScopes(createScope, ...createContextScopeDeps)
        ];
      }
      function $dec3cc0142d4f286$var$composeContextScopes(...scopes) {
        const baseScope = scopes[0];
        if (scopes.length === 1)
          return baseScope;
        const createScope1 = () => {
          const scopeHooks = scopes.map(
            (createScope) => ({
              useScope: createScope(),
              scopeName: createScope.scopeName
            })
          );
          return function useComposedScopes(overrideScopes) {
            const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
              const scopeProps = useScope(overrideScopes);
              const currentScope = scopeProps[`__scope${scopeName}`];
              return __spreadValues(__spreadValues({}, nextScopes), currentScope);
            }, {});
            return $4O1Ne$react.useMemo(
              () => ({
                [`__scope${baseScope.scopeName}`]: nextScopes1
              }),
              [
                nextScopes1
              ]
            );
          };
        };
        createScope1.scopeName = baseScope.scopeName;
        return createScope1;
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-slot/dist/index.js
  var require_dist4 = __commonJS({
    "../assets/node_modules/@radix-ui/react-slot/dist/index.js"(exports, module) {
      var $dAvBt$babelruntimehelpersextends = require_extends();
      var $dAvBt$react = require_react();
      var $dAvBt$radixuireactcomposerefs = require_dist2();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "Slot", () => $82dc8d030dec7549$export$8c6ed5c666ac1360);
      $parcel$export(module.exports, "Slottable", () => $82dc8d030dec7549$export$d9f1ccf0bdb05d45);
      $parcel$export(module.exports, "Root", () => $82dc8d030dec7549$export$be92b6f5f03c0fe9);
      var $82dc8d030dec7549$export$8c6ed5c666ac1360 = /* @__PURE__ */ $dAvBt$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { children } = _a2, slotProps = __objRest(_a2, ["children"]);
        const childrenArray = $dAvBt$react.Children.toArray(children);
        const slottable = childrenArray.find($82dc8d030dec7549$var$isSlottable);
        if (slottable) {
          const newElement = slottable.props.children;
          const newChildren = childrenArray.map((child) => {
            if (child === slottable) {
              if ($dAvBt$react.Children.count(newElement) > 1)
                return $dAvBt$react.Children.only(null);
              return /* @__PURE__ */ $dAvBt$react.isValidElement(newElement) ? newElement.props.children : null;
            } else
              return child;
          });
          return /* @__PURE__ */ $dAvBt$react.createElement($82dc8d030dec7549$var$SlotClone, $parcel$interopDefault($dAvBt$babelruntimehelpersextends)({}, slotProps, {
            ref: forwardedRef
          }), /* @__PURE__ */ $dAvBt$react.isValidElement(newElement) ? /* @__PURE__ */ $dAvBt$react.cloneElement(newElement, void 0, newChildren) : null);
        }
        return /* @__PURE__ */ $dAvBt$react.createElement($82dc8d030dec7549$var$SlotClone, $parcel$interopDefault($dAvBt$babelruntimehelpersextends)({}, slotProps, {
          ref: forwardedRef
        }), children);
      });
      $82dc8d030dec7549$export$8c6ed5c666ac1360.displayName = "Slot";
      var $82dc8d030dec7549$var$SlotClone = /* @__PURE__ */ $dAvBt$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { children } = _a2, slotProps = __objRest(_a2, ["children"]);
        if (/* @__PURE__ */ $dAvBt$react.isValidElement(children))
          return /* @__PURE__ */ $dAvBt$react.cloneElement(children, __spreadProps(__spreadValues({}, $82dc8d030dec7549$var$mergeProps(slotProps, children.props)), {
            ref: $dAvBt$radixuireactcomposerefs.composeRefs(forwardedRef, children.ref)
          }));
        return $dAvBt$react.Children.count(children) > 1 ? $dAvBt$react.Children.only(null) : null;
      });
      $82dc8d030dec7549$var$SlotClone.displayName = "SlotClone";
      var $82dc8d030dec7549$export$d9f1ccf0bdb05d45 = ({ children }) => {
        return /* @__PURE__ */ $dAvBt$react.createElement($dAvBt$react.Fragment, null, children);
      };
      function $82dc8d030dec7549$var$isSlottable(child) {
        return /* @__PURE__ */ $dAvBt$react.isValidElement(child) && child.type === $82dc8d030dec7549$export$d9f1ccf0bdb05d45;
      }
      function $82dc8d030dec7549$var$mergeProps(slotProps, childProps) {
        const overrideProps = __spreadValues({}, childProps);
        for (const propName in childProps) {
          const slotPropValue = slotProps[propName];
          const childPropValue = childProps[propName];
          const isHandler = /^on[A-Z]/.test(propName);
          if (isHandler) {
            if (slotPropValue && childPropValue)
              overrideProps[propName] = (...args) => {
                childPropValue(...args);
                slotPropValue(...args);
              };
            else if (slotPropValue)
              overrideProps[propName] = slotPropValue;
          } else if (propName === "style")
            overrideProps[propName] = __spreadValues(__spreadValues({}, slotPropValue), childPropValue);
          else if (propName === "className")
            overrideProps[propName] = [
              slotPropValue,
              childPropValue
            ].filter(Boolean).join(" ");
        }
        return __spreadValues(__spreadValues({}, slotProps), overrideProps);
      }
      var $82dc8d030dec7549$export$be92b6f5f03c0fe9 = $82dc8d030dec7549$export$8c6ed5c666ac1360;
    }
  });

  // ../assets/node_modules/@radix-ui/react-primitive/dist/index.js
  var require_dist5 = __commonJS({
    "../assets/node_modules/@radix-ui/react-primitive/dist/index.js"(exports, module) {
      var $iMixA$babelruntimehelpersextends = require_extends();
      var $iMixA$react = require_react();
      var $iMixA$reactdom = require_react_dom();
      var $iMixA$radixuireactslot = require_dist4();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "Primitive", () => $c3def6332c2749a6$export$250ffa63cdc0d034);
      $parcel$export(module.exports, "Root", () => $c3def6332c2749a6$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "dispatchDiscreteCustomEvent", () => $c3def6332c2749a6$export$6d1a0317bde7de7f);
      var $c3def6332c2749a6$var$NODES = [
        "a",
        "button",
        "div",
        "h2",
        "h3",
        "img",
        "label",
        "li",
        "nav",
        "ol",
        "p",
        "span",
        "svg",
        "ul"
      ];
      var $c3def6332c2749a6$export$250ffa63cdc0d034 = $c3def6332c2749a6$var$NODES.reduce((primitive, node) => {
        const Node = /* @__PURE__ */ $iMixA$react.forwardRef((props, forwardedRef) => {
          const _a2 = props, { asChild } = _a2, primitiveProps = __objRest(_a2, ["asChild"]);
          const Comp = asChild ? $iMixA$radixuireactslot.Slot : node;
          $iMixA$react.useEffect(() => {
            window[Symbol.for("radix-ui")] = true;
          }, []);
          return /* @__PURE__ */ $iMixA$react.createElement(Comp, $parcel$interopDefault($iMixA$babelruntimehelpersextends)({}, primitiveProps, {
            ref: forwardedRef
          }));
        });
        Node.displayName = `Primitive.${node}`;
        return __spreadProps(__spreadValues({}, primitive), {
          [node]: Node
        });
      }, {});
      function $c3def6332c2749a6$export$6d1a0317bde7de7f(target, event) {
        if (target)
          $iMixA$reactdom.flushSync(
            () => target.dispatchEvent(event)
          );
      }
      var $c3def6332c2749a6$export$be92b6f5f03c0fe9 = $c3def6332c2749a6$export$250ffa63cdc0d034;
    }
  });

  // ../assets/node_modules/@radix-ui/react-use-callback-ref/dist/index.js
  var require_dist6 = __commonJS({
    "../assets/node_modules/@radix-ui/react-use-callback-ref/dist/index.js"(exports, module) {
      var $92muK$react = require_react();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useCallbackRef", () => $28e03942f763e819$export$25bec8c6f54ee79a);
      function $28e03942f763e819$export$25bec8c6f54ee79a(callback) {
        const callbackRef = $92muK$react.useRef(callback);
        $92muK$react.useEffect(() => {
          callbackRef.current = callback;
        });
        return $92muK$react.useMemo(
          () => (...args) => {
            var _callbackRef$current;
            return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
          },
          []
        );
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-use-escape-keydown/dist/index.js
  var require_dist7 = __commonJS({
    "../assets/node_modules/@radix-ui/react-use-escape-keydown/dist/index.js"(exports, module) {
      var $b0gz3$react = require_react();
      var $b0gz3$radixuireactusecallbackref = require_dist6();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useEscapeKeydown", () => $24c84e9f83c4454f$export$3a72a57244d6e765);
      function $24c84e9f83c4454f$export$3a72a57244d6e765(onEscapeKeyDownProp, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
        const onEscapeKeyDown = $b0gz3$radixuireactusecallbackref.useCallbackRef(onEscapeKeyDownProp);
        $b0gz3$react.useEffect(() => {
          const handleKeyDown = (event) => {
            if (event.key === "Escape")
              onEscapeKeyDown(event);
          };
          ownerDocument.addEventListener("keydown", handleKeyDown);
          return () => ownerDocument.removeEventListener("keydown", handleKeyDown);
        }, [
          onEscapeKeyDown,
          ownerDocument
        ]);
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-dismissable-layer/dist/index.js
  var require_dist8 = __commonJS({
    "../assets/node_modules/@radix-ui/react-dismissable-layer/dist/index.js"(exports, module) {
      var $g2vWm$babelruntimehelpersextends = require_extends();
      var $g2vWm$react = require_react();
      var $g2vWm$radixuiprimitive = require_dist();
      var $g2vWm$radixuireactprimitive = require_dist5();
      var $g2vWm$radixuireactcomposerefs = require_dist2();
      var $g2vWm$radixuireactusecallbackref = require_dist6();
      var $g2vWm$radixuireactuseescapekeydown = require_dist7();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "DismissableLayer", () => $d715e0554b679f1f$export$177fb62ff3ec1f22);
      $parcel$export(module.exports, "DismissableLayerBranch", () => $d715e0554b679f1f$export$4d5eb2109db14228);
      $parcel$export(module.exports, "Root", () => $d715e0554b679f1f$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Branch", () => $d715e0554b679f1f$export$aecb2ddcb55c95be);
      var $d715e0554b679f1f$var$CONTEXT_UPDATE = "dismissableLayer.update";
      var $d715e0554b679f1f$var$POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
      var $d715e0554b679f1f$var$FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
      var $d715e0554b679f1f$var$originalBodyPointerEvents;
      var $d715e0554b679f1f$var$DismissableLayerContext = /* @__PURE__ */ $g2vWm$react.createContext({
        layers: /* @__PURE__ */ new Set(),
        layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
        branches: /* @__PURE__ */ new Set()
      });
      var $d715e0554b679f1f$export$177fb62ff3ec1f22 = /* @__PURE__ */ $g2vWm$react.forwardRef((props, forwardedRef) => {
        var _node$ownerDocument;
        const _a2 = props, { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss } = _a2, layerProps = __objRest(_a2, ["disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss"]);
        const context = $g2vWm$react.useContext($d715e0554b679f1f$var$DismissableLayerContext);
        const [node1, setNode] = $g2vWm$react.useState(null);
        const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;
        const [, force] = $g2vWm$react.useState({});
        const composedRefs = $g2vWm$radixuireactcomposerefs.useComposedRefs(
          forwardedRef,
          (node) => setNode(node)
        );
        const layers = Array.from(context.layers);
        const [highestLayerWithOutsidePointerEventsDisabled] = [
          ...context.layersWithOutsidePointerEventsDisabled
        ].slice(-1);
        const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
        const index2 = node1 ? layers.indexOf(node1) : -1;
        const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
        const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;
        const pointerDownOutside = $d715e0554b679f1f$var$usePointerDownOutside((event) => {
          const target = event.target;
          const isPointerDownOnBranch = [
            ...context.branches
          ].some(
            (branch) => branch.contains(target)
          );
          if (!isPointerEventsEnabled || isPointerDownOnBranch)
            return;
          onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
          onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
          if (!event.defaultPrevented)
            onDismiss === null || onDismiss === void 0 || onDismiss();
        }, ownerDocument);
        const focusOutside = $d715e0554b679f1f$var$useFocusOutside((event) => {
          const target = event.target;
          const isFocusInBranch = [
            ...context.branches
          ].some(
            (branch) => branch.contains(target)
          );
          if (isFocusInBranch)
            return;
          onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
          onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
          if (!event.defaultPrevented)
            onDismiss === null || onDismiss === void 0 || onDismiss();
        }, ownerDocument);
        $g2vWm$radixuireactuseescapekeydown.useEscapeKeydown((event) => {
          const isHighestLayer = index2 === context.layers.size - 1;
          if (!isHighestLayer)
            return;
          onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
          if (!event.defaultPrevented && onDismiss) {
            event.preventDefault();
            onDismiss();
          }
        }, ownerDocument);
        $g2vWm$react.useEffect(() => {
          if (!node1)
            return;
          if (disableOutsidePointerEvents) {
            if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
              $d715e0554b679f1f$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
              ownerDocument.body.style.pointerEvents = "none";
            }
            context.layersWithOutsidePointerEventsDisabled.add(node1);
          }
          context.layers.add(node1);
          $d715e0554b679f1f$var$dispatchUpdate();
          return () => {
            if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1)
              ownerDocument.body.style.pointerEvents = $d715e0554b679f1f$var$originalBodyPointerEvents;
          };
        }, [
          node1,
          ownerDocument,
          disableOutsidePointerEvents,
          context
        ]);
        $g2vWm$react.useEffect(() => {
          return () => {
            if (!node1)
              return;
            context.layers.delete(node1);
            context.layersWithOutsidePointerEventsDisabled.delete(node1);
            $d715e0554b679f1f$var$dispatchUpdate();
          };
        }, [
          node1,
          context
        ]);
        $g2vWm$react.useEffect(() => {
          const handleUpdate = () => force({});
          document.addEventListener($d715e0554b679f1f$var$CONTEXT_UPDATE, handleUpdate);
          return () => document.removeEventListener($d715e0554b679f1f$var$CONTEXT_UPDATE, handleUpdate);
        }, []);
        return /* @__PURE__ */ $g2vWm$react.createElement($g2vWm$radixuireactprimitive.Primitive.div, $parcel$interopDefault($g2vWm$babelruntimehelpersextends)({}, layerProps, {
          ref: composedRefs,
          style: __spreadValues({
            pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0
          }, props.style),
          onFocusCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),
          onBlurCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),
          onPointerDownCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
        }));
      });
      var $d715e0554b679f1f$export$4d5eb2109db14228 = /* @__PURE__ */ $g2vWm$react.forwardRef((props, forwardedRef) => {
        const context = $g2vWm$react.useContext($d715e0554b679f1f$var$DismissableLayerContext);
        const ref = $g2vWm$react.useRef(null);
        const composedRefs = $g2vWm$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        $g2vWm$react.useEffect(() => {
          const node = ref.current;
          if (node) {
            context.branches.add(node);
            return () => {
              context.branches.delete(node);
            };
          }
        }, [
          context.branches
        ]);
        return /* @__PURE__ */ $g2vWm$react.createElement($g2vWm$radixuireactprimitive.Primitive.div, $parcel$interopDefault($g2vWm$babelruntimehelpersextends)({}, props, {
          ref: composedRefs
        }));
      });
      function $d715e0554b679f1f$var$usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
        const handlePointerDownOutside = $g2vWm$radixuireactusecallbackref.useCallbackRef(onPointerDownOutside);
        const isPointerInsideReactTreeRef = $g2vWm$react.useRef(false);
        const handleClickRef = $g2vWm$react.useRef(() => {
        });
        $g2vWm$react.useEffect(() => {
          const handlePointerDown = (event) => {
            if (event.target && !isPointerInsideReactTreeRef.current) {
              let handleAndDispatchPointerDownOutsideEvent2 = function() {
                $d715e0554b679f1f$var$handleAndDispatchCustomEvent($d715e0554b679f1f$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
                  discrete: true
                });
              };
              var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;
              const eventDetail = {
                originalEvent: event
              };
              if (event.pointerType === "touch") {
                ownerDocument.removeEventListener("click", handleClickRef.current);
                handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
                ownerDocument.addEventListener("click", handleClickRef.current, {
                  once: true
                });
              } else
                handleAndDispatchPointerDownOutsideEvent2();
            }
            isPointerInsideReactTreeRef.current = false;
          };
          const timerId = window.setTimeout(() => {
            ownerDocument.addEventListener("pointerdown", handlePointerDown);
          }, 0);
          return () => {
            window.clearTimeout(timerId);
            ownerDocument.removeEventListener("pointerdown", handlePointerDown);
            ownerDocument.removeEventListener("click", handleClickRef.current);
          };
        }, [
          ownerDocument,
          handlePointerDownOutside
        ]);
        return {
          // ensures we check React component tree (not just DOM tree)
          onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
        };
      }
      function $d715e0554b679f1f$var$useFocusOutside(onFocusOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
        const handleFocusOutside = $g2vWm$radixuireactusecallbackref.useCallbackRef(onFocusOutside);
        const isFocusInsideReactTreeRef = $g2vWm$react.useRef(false);
        $g2vWm$react.useEffect(() => {
          const handleFocus = (event) => {
            if (event.target && !isFocusInsideReactTreeRef.current) {
              const eventDetail = {
                originalEvent: event
              };
              $d715e0554b679f1f$var$handleAndDispatchCustomEvent($d715e0554b679f1f$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
                discrete: false
              });
            }
          };
          ownerDocument.addEventListener("focusin", handleFocus);
          return () => ownerDocument.removeEventListener("focusin", handleFocus);
        }, [
          ownerDocument,
          handleFocusOutside
        ]);
        return {
          onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
          onBlurCapture: () => isFocusInsideReactTreeRef.current = false
        };
      }
      function $d715e0554b679f1f$var$dispatchUpdate() {
        const event = new CustomEvent($d715e0554b679f1f$var$CONTEXT_UPDATE);
        document.dispatchEvent(event);
      }
      function $d715e0554b679f1f$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
        const target = detail.originalEvent.target;
        const event = new CustomEvent(name, {
          bubbles: false,
          cancelable: true,
          detail
        });
        if (handler)
          target.addEventListener(name, handler, {
            once: true
          });
        if (discrete)
          $g2vWm$radixuireactprimitive.dispatchDiscreteCustomEvent(target, event);
        else
          target.dispatchEvent(event);
      }
      var $d715e0554b679f1f$export$be92b6f5f03c0fe9 = $d715e0554b679f1f$export$177fb62ff3ec1f22;
      var $d715e0554b679f1f$export$aecb2ddcb55c95be = $d715e0554b679f1f$export$4d5eb2109db14228;
    }
  });

  // ../assets/node_modules/@radix-ui/react-use-layout-effect/dist/index.js
  var require_dist9 = __commonJS({
    "../assets/node_modules/@radix-ui/react-use-layout-effect/dist/index.js"(exports, module) {
      var $caHyQ$react = require_react();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useLayoutEffect", () => $ca21affb0542a8a4$export$e5c5a5f917a5871c);
      var $ca21affb0542a8a4$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? $caHyQ$react.useLayoutEffect : () => {
      };
    }
  });

  // ../assets/node_modules/@radix-ui/react-id/dist/index.js
  var require_dist10 = __commonJS({
    "../assets/node_modules/@radix-ui/react-id/dist/index.js"(exports, module) {
      var $47woD$react = require_react();
      var $47woD$radixuireactuselayouteffect = require_dist9();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useId", () => $dc478e4659f630c5$export$f680877a34711e37);
      var $dc478e4659f630c5$var$useReactId = $47woD$react["useId".toString()] || (() => void 0);
      var $dc478e4659f630c5$var$count = 0;
      function $dc478e4659f630c5$export$f680877a34711e37(deterministicId) {
        const [id, setId] = $47woD$react.useState($dc478e4659f630c5$var$useReactId());
        $47woD$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (!deterministicId)
            setId(
              (reactId) => reactId !== null && reactId !== void 0 ? reactId : String($dc478e4659f630c5$var$count++)
            );
        }, [
          deterministicId
        ]);
        return deterministicId || (id ? `radix-${id}` : "");
      }
    }
  });

  // ../assets/node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
  }
  function getLengthFromAxis(axis) {
    return axis === "y" ? "height" : "width";
  }
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const mainAxis = getMainAxisFromPlacement(placement);
    const length = getLengthFromAxis(mainAxis);
    const commonAlign = reference[length] / 2 - floating[length] / 2;
    const side = getSide(placement);
    const isVertical = mainAxis === "x";
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  function expandPaddingObject(padding) {
    return __spreadValues({
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, padding);
  }
  function getSideObjectFromPadding(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect(rect) {
    return __spreadProps(__spreadValues({}, rect), {
      top: rect.y,
      left: rect.x,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }
  function detectOverflow(middlewareArguments, options) {
    return __async(this, null, function* () {
      var _await$platform$isEle;
      if (options === void 0) {
        options = {};
      }
      const {
        x: x2,
        y: y2,
        platform: platform2,
        rects,
        elements,
        strategy
      } = middlewareArguments;
      const {
        boundary = "clippingAncestors",
        rootBoundary = "viewport",
        elementContext = "floating",
        altBoundary = false,
        padding = 0
      } = options;
      const paddingObject = getSideObjectFromPadding(padding);
      const altContext = elementContext === "floating" ? "reference" : "floating";
      const element = elements[altBoundary ? altContext : elementContext];
      const clippingClientRect = rectToClientRect(yield platform2.getClippingRect({
        element: ((_await$platform$isEle = yield platform2.isElement == null ? void 0 : platform2.isElement(element)) != null ? _await$platform$isEle : true) ? element : element.contextElement || (yield platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
        boundary,
        rootBoundary,
        strategy
      }));
      const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? yield platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
        rect: elementContext === "floating" ? __spreadProps(__spreadValues({}, rects.floating), {
          x: x2,
          y: y2
        }) : rects.reference,
        offsetParent: yield platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating),
        strategy
      }) : rects[elementContext]);
      return {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
    });
  }
  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (matched) => hash$1[matched]);
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const mainAxis = getMainAxisFromPlacement(placement);
    const length = getLengthFromAxis(mainAxis);
    let mainAlignmentSide = mainAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length] > rects.floating[length]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return {
      main: mainAlignmentSide,
      cross: getOppositePlacement(mainAlignmentSide)
    };
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (matched) => hash[matched]);
  }
  function getPlacementList(alignment, autoAlignment, allowedPlacements) {
    const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
    return allowedPlacementsSortedByAlignment.filter((placement) => {
      if (alignment) {
        return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
      }
      return true;
    });
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getSideOffsets(overflow, rect) {
    return {
      top: overflow.top - rect.height,
      right: overflow.right - rect.width,
      bottom: overflow.bottom - rect.height,
      left: overflow.left - rect.width
    };
  }
  function isAnySideFullyClipped(overflow) {
    return sides.some((side) => overflow[side] >= 0);
  }
  function convertValueToCoords(middlewareArguments, value) {
    return __async(this, null, function* () {
      const {
        placement,
        platform: platform2,
        elements
      } = middlewareArguments;
      const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isVertical = getMainAxisFromPlacement(placement) === "x";
      const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
      const crossAxisMulti = rtl && isVertical ? -1 : 1;
      const rawValue = typeof value === "function" ? value(middlewareArguments) : value;
      let {
        mainAxis,
        crossAxis,
        alignmentAxis
      } = typeof rawValue === "number" ? {
        mainAxis: rawValue,
        crossAxis: 0,
        alignmentAxis: null
      } : __spreadValues({
        mainAxis: 0,
        crossAxis: 0,
        alignmentAxis: null
      }, rawValue);
      if (alignment && typeof alignmentAxis === "number") {
        crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
      }
      return isVertical ? {
        x: crossAxis * crossAxisMulti,
        y: mainAxis * mainAxisMulti
      } : {
        x: mainAxis * mainAxisMulti,
        y: crossAxis * crossAxisMulti
      };
    });
  }
  function getCrossAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  var computePosition, min, max, arrow, hash$1, hash, sides, allPlacements, autoPlacement, flip, hide, offset, shift, limitShift, size, inline;
  var init_floating_ui_core = __esm({
    "../assets/node_modules/@floating-ui/core/dist/floating-ui.core.mjs"() {
      computePosition = (reference, floating, config) => __async(void 0, null, function* () {
        const {
          placement = "bottom",
          strategy = "absolute",
          middleware = [],
          platform: platform2
        } = config;
        const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(floating);
        if (process.env.NODE_ENV !== "production") {
          if (platform2 == null) {
            console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
          }
          if (middleware.filter((_ref) => {
            let {
              name
            } = _ref;
            return name === "autoPlacement" || name === "flip";
          }).length > 1) {
            throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement`", "middleware detected. This will lead to an infinite loop. Ensure only", "one of either has been passed to the `middleware` array."].join(" "));
          }
        }
        let rects = yield platform2.getElementRects({
          reference,
          floating,
          strategy
        });
        let {
          x: x2,
          y: y2
        } = computeCoordsFromPlacement(rects, placement, rtl);
        let statefulPlacement = placement;
        let middlewareData = {};
        let resetCount = 0;
        for (let i2 = 0; i2 < middleware.length; i2++) {
          const {
            name,
            fn
          } = middleware[i2];
          const {
            x: nextX,
            y: nextY,
            data,
            reset
          } = yield fn({
            x: x2,
            y: y2,
            initialPlacement: placement,
            placement: statefulPlacement,
            strategy,
            middlewareData,
            rects,
            platform: platform2,
            elements: {
              reference,
              floating
            }
          });
          x2 = nextX != null ? nextX : x2;
          y2 = nextY != null ? nextY : y2;
          middlewareData = __spreadProps(__spreadValues({}, middlewareData), {
            [name]: __spreadValues(__spreadValues({}, middlewareData[name]), data)
          });
          if (process.env.NODE_ENV !== "production") {
            if (resetCount > 50) {
              console.warn(["Floating UI: The middleware lifecycle appears to be running in an", "infinite loop. This is usually caused by a `reset` continually", "being returned without a break condition."].join(" "));
            }
          }
          if (reset && resetCount <= 50) {
            resetCount++;
            if (typeof reset === "object") {
              if (reset.placement) {
                statefulPlacement = reset.placement;
              }
              if (reset.rects) {
                rects = reset.rects === true ? yield platform2.getElementRects({
                  reference,
                  floating,
                  strategy
                }) : reset.rects;
              }
              ({
                x: x2,
                y: y2
              } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
            }
            i2 = -1;
            continue;
          }
        }
        return {
          x: x2,
          y: y2,
          placement: statefulPlacement,
          strategy,
          middlewareData
        };
      });
      min = Math.min;
      max = Math.max;
      arrow = (options) => ({
        name: "arrow",
        options,
        fn(middlewareArguments) {
          return __async(this, null, function* () {
            const {
              element,
              padding = 0
            } = options != null ? options : {};
            const {
              x: x2,
              y: y2,
              placement,
              rects,
              platform: platform2
            } = middlewareArguments;
            if (element == null) {
              if (process.env.NODE_ENV !== "production") {
                console.warn("Floating UI: No `element` was passed to the `arrow` middleware.");
              }
              return {};
            }
            const paddingObject = getSideObjectFromPadding(padding);
            const coords = {
              x: x2,
              y: y2
            };
            const axis = getMainAxisFromPlacement(placement);
            const alignment = getAlignment(placement);
            const length = getLengthFromAxis(axis);
            const arrowDimensions = yield platform2.getDimensions(element);
            const minProp = axis === "y" ? "top" : "left";
            const maxProp = axis === "y" ? "bottom" : "right";
            const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
            const startDiff = coords[axis] - rects.reference[axis];
            const arrowOffsetParent = yield platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element);
            let clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
            if (clientSize === 0) {
              clientSize = rects.floating[length];
            }
            const centerToReference = endDiff / 2 - startDiff / 2;
            const min3 = paddingObject[minProp];
            const max3 = clientSize - arrowDimensions[length] - paddingObject[maxProp];
            const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
            const offset2 = within(min3, center, max3);
            const alignmentPadding = alignment === "start" ? paddingObject[minProp] : paddingObject[maxProp];
            const shouldAddOffset = alignmentPadding > 0 && center !== offset2 && rects.reference[length] <= rects.floating[length];
            const alignmentOffset = shouldAddOffset ? center < min3 ? min3 - center : max3 - center : 0;
            return {
              [axis]: coords[axis] - alignmentOffset,
              data: {
                [axis]: offset2,
                centerOffset: center - offset2
              }
            };
          });
        }
      });
      hash$1 = {
        left: "right",
        right: "left",
        bottom: "top",
        top: "bottom"
      };
      hash = {
        start: "end",
        end: "start"
      };
      sides = ["top", "right", "bottom", "left"];
      allPlacements = /* @__PURE__ */ sides.reduce((acc, side) => acc.concat(side, side + "-start", side + "-end"), []);
      autoPlacement = function(options) {
        if (options === void 0) {
          options = {};
        }
        return {
          name: "autoPlacement",
          options,
          fn(middlewareArguments) {
            return __async(this, null, function* () {
              var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;
              const {
                x: x2,
                y: y2,
                rects,
                middlewareData,
                placement,
                platform: platform2,
                elements
              } = middlewareArguments;
              const _a3 = options, {
                alignment = null,
                allowedPlacements = allPlacements,
                autoAlignment = true
              } = _a3, detectOverflowOptions = __objRest(_a3, [
                "alignment",
                "allowedPlacements",
                "autoAlignment"
              ]);
              const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);
              const overflow = yield detectOverflow(middlewareArguments, detectOverflowOptions);
              const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;
              const currentPlacement = placements[currentIndex];
              if (currentPlacement == null) {
                return {};
              }
              const {
                main,
                cross
              } = getAlignmentSides(currentPlacement, rects, yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
              if (placement !== currentPlacement) {
                return {
                  x: x2,
                  y: y2,
                  reset: {
                    placement: placements[0]
                  }
                };
              }
              const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];
              const allOverflows = [...(_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : [], {
                placement: currentPlacement,
                overflows: currentOverflows
              }];
              const nextPlacement = placements[currentIndex + 1];
              if (nextPlacement) {
                return {
                  data: {
                    index: currentIndex + 1,
                    overflows: allOverflows
                  },
                  reset: {
                    placement: nextPlacement
                  }
                };
              }
              const placementsSortedByLeastOverflow = allOverflows.slice().sort((a2, b2) => a2.overflows[0] - b2.overflows[0]);
              const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find((_ref) => {
                let {
                  overflows
                } = _ref;
                return overflows.every((overflow2) => overflow2 <= 0);
              })) == null ? void 0 : _placementsSortedByLe.placement;
              const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;
              if (resetPlacement !== placement) {
                return {
                  data: {
                    index: currentIndex + 1,
                    overflows: allOverflows
                  },
                  reset: {
                    placement: resetPlacement
                  }
                };
              }
              return {};
            });
          }
        };
      };
      flip = function(options) {
        if (options === void 0) {
          options = {};
        }
        return {
          name: "flip",
          options,
          fn(middlewareArguments) {
            return __async(this, null, function* () {
              var _middlewareData$flip;
              const {
                placement,
                middlewareData,
                rects,
                initialPlacement,
                platform: platform2,
                elements
              } = middlewareArguments;
              const _a3 = options, {
                mainAxis: checkMainAxis = true,
                crossAxis: checkCrossAxis = true,
                fallbackPlacements: specifiedFallbackPlacements,
                fallbackStrategy = "bestFit",
                flipAlignment = true
              } = _a3, detectOverflowOptions = __objRest(_a3, [
                "mainAxis",
                "crossAxis",
                "fallbackPlacements",
                "fallbackStrategy",
                "flipAlignment"
              ]);
              const side = getSide(placement);
              const isBasePlacement = side === initialPlacement;
              const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
              const placements = [initialPlacement, ...fallbackPlacements];
              const overflow = yield detectOverflow(middlewareArguments, detectOverflowOptions);
              const overflows = [];
              let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
              if (checkMainAxis) {
                overflows.push(overflow[side]);
              }
              if (checkCrossAxis) {
                const {
                  main,
                  cross
                } = getAlignmentSides(placement, rects, yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
                overflows.push(overflow[main], overflow[cross]);
              }
              overflowsData = [...overflowsData, {
                placement,
                overflows
              }];
              if (!overflows.every((side2) => side2 <= 0)) {
                var _middlewareData$flip$, _middlewareData$flip2;
                const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;
                const nextPlacement = placements[nextIndex];
                if (nextPlacement) {
                  return {
                    data: {
                      index: nextIndex,
                      overflows: overflowsData
                    },
                    reset: {
                      placement: nextPlacement
                    }
                  };
                }
                let resetPlacement = "bottom";
                switch (fallbackStrategy) {
                  case "bestFit": {
                    var _overflowsData$map$so;
                    const placement2 = (_overflowsData$map$so = overflowsData.map((d2) => [d2, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b2) => a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;
                    if (placement2) {
                      resetPlacement = placement2;
                    }
                    break;
                  }
                  case "initialPlacement":
                    resetPlacement = initialPlacement;
                    break;
                }
                if (placement !== resetPlacement) {
                  return {
                    reset: {
                      placement: resetPlacement
                    }
                  };
                }
              }
              return {};
            });
          }
        };
      };
      hide = function(_temp) {
        let _a2 = _temp === void 0 ? {} : _temp, {
          strategy = "referenceHidden"
        } = _a2, detectOverflowOptions = __objRest(_a2, [
          "strategy"
        ]);
        return {
          name: "hide",
          fn(middlewareArguments) {
            return __async(this, null, function* () {
              const {
                rects
              } = middlewareArguments;
              switch (strategy) {
                case "referenceHidden": {
                  const overflow = yield detectOverflow(middlewareArguments, __spreadProps(__spreadValues({}, detectOverflowOptions), {
                    elementContext: "reference"
                  }));
                  const offsets = getSideOffsets(overflow, rects.reference);
                  return {
                    data: {
                      referenceHiddenOffsets: offsets,
                      referenceHidden: isAnySideFullyClipped(offsets)
                    }
                  };
                }
                case "escaped": {
                  const overflow = yield detectOverflow(middlewareArguments, __spreadProps(__spreadValues({}, detectOverflowOptions), {
                    altBoundary: true
                  }));
                  const offsets = getSideOffsets(overflow, rects.floating);
                  return {
                    data: {
                      escapedOffsets: offsets,
                      escaped: isAnySideFullyClipped(offsets)
                    }
                  };
                }
                default: {
                  return {};
                }
              }
            });
          }
        };
      };
      offset = function(value) {
        if (value === void 0) {
          value = 0;
        }
        return {
          name: "offset",
          options: value,
          fn(middlewareArguments) {
            return __async(this, null, function* () {
              const {
                x: x2,
                y: y2
              } = middlewareArguments;
              const diffCoords = yield convertValueToCoords(middlewareArguments, value);
              return {
                x: x2 + diffCoords.x,
                y: y2 + diffCoords.y,
                data: diffCoords
              };
            });
          }
        };
      };
      shift = function(options) {
        if (options === void 0) {
          options = {};
        }
        return {
          name: "shift",
          options,
          fn(middlewareArguments) {
            return __async(this, null, function* () {
              const {
                x: x2,
                y: y2,
                placement
              } = middlewareArguments;
              const _a3 = options, {
                mainAxis: checkMainAxis = true,
                crossAxis: checkCrossAxis = false,
                limiter = {
                  fn: (_ref) => {
                    let {
                      x: x3,
                      y: y3
                    } = _ref;
                    return {
                      x: x3,
                      y: y3
                    };
                  }
                }
              } = _a3, detectOverflowOptions = __objRest(_a3, [
                "mainAxis",
                "crossAxis",
                "limiter"
              ]);
              const coords = {
                x: x2,
                y: y2
              };
              const overflow = yield detectOverflow(middlewareArguments, detectOverflowOptions);
              const mainAxis = getMainAxisFromPlacement(getSide(placement));
              const crossAxis = getCrossAxis(mainAxis);
              let mainAxisCoord = coords[mainAxis];
              let crossAxisCoord = coords[crossAxis];
              if (checkMainAxis) {
                const minSide = mainAxis === "y" ? "top" : "left";
                const maxSide = mainAxis === "y" ? "bottom" : "right";
                const min3 = mainAxisCoord + overflow[minSide];
                const max3 = mainAxisCoord - overflow[maxSide];
                mainAxisCoord = within(min3, mainAxisCoord, max3);
              }
              if (checkCrossAxis) {
                const minSide = crossAxis === "y" ? "top" : "left";
                const maxSide = crossAxis === "y" ? "bottom" : "right";
                const min3 = crossAxisCoord + overflow[minSide];
                const max3 = crossAxisCoord - overflow[maxSide];
                crossAxisCoord = within(min3, crossAxisCoord, max3);
              }
              const limitedCoords = limiter.fn(__spreadProps(__spreadValues({}, middlewareArguments), {
                [mainAxis]: mainAxisCoord,
                [crossAxis]: crossAxisCoord
              }));
              return __spreadProps(__spreadValues({}, limitedCoords), {
                data: {
                  x: limitedCoords.x - x2,
                  y: limitedCoords.y - y2
                }
              });
            });
          }
        };
      };
      limitShift = function(options) {
        if (options === void 0) {
          options = {};
        }
        return {
          options,
          fn(middlewareArguments) {
            const {
              x: x2,
              y: y2,
              placement,
              rects,
              middlewareData
            } = middlewareArguments;
            const {
              offset: offset2 = 0,
              mainAxis: checkMainAxis = true,
              crossAxis: checkCrossAxis = true
            } = options;
            const coords = {
              x: x2,
              y: y2
            };
            const mainAxis = getMainAxisFromPlacement(placement);
            const crossAxis = getCrossAxis(mainAxis);
            let mainAxisCoord = coords[mainAxis];
            let crossAxisCoord = coords[crossAxis];
            const rawOffset = typeof offset2 === "function" ? offset2(__spreadProps(__spreadValues({}, rects), {
              placement
            })) : offset2;
            const computedOffset = typeof rawOffset === "number" ? {
              mainAxis: rawOffset,
              crossAxis: 0
            } : __spreadValues({
              mainAxis: 0,
              crossAxis: 0
            }, rawOffset);
            if (checkMainAxis) {
              const len = mainAxis === "y" ? "height" : "width";
              const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
              const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
              if (mainAxisCoord < limitMin) {
                mainAxisCoord = limitMin;
              } else if (mainAxisCoord > limitMax) {
                mainAxisCoord = limitMax;
              }
            }
            if (checkCrossAxis) {
              var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;
              const len = mainAxis === "y" ? "width" : "height";
              const isOriginSide = ["top", "left"].includes(getSide(placement));
              const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
              const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);
              if (crossAxisCoord < limitMin) {
                crossAxisCoord = limitMin;
              } else if (crossAxisCoord > limitMax) {
                crossAxisCoord = limitMax;
              }
            }
            return {
              [mainAxis]: mainAxisCoord,
              [crossAxis]: crossAxisCoord
            };
          }
        };
      };
      size = function(options) {
        if (options === void 0) {
          options = {};
        }
        return {
          name: "size",
          options,
          fn(middlewareArguments) {
            return __async(this, null, function* () {
              const {
                placement,
                rects,
                platform: platform2,
                elements
              } = middlewareArguments;
              const _a3 = options, {
                apply
              } = _a3, detectOverflowOptions = __objRest(_a3, [
                "apply"
              ]);
              const overflow = yield detectOverflow(middlewareArguments, detectOverflowOptions);
              const side = getSide(placement);
              const alignment = getAlignment(placement);
              let heightSide;
              let widthSide;
              if (side === "top" || side === "bottom") {
                heightSide = side;
                widthSide = alignment === ((yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
              } else {
                widthSide = side;
                heightSide = alignment === "end" ? "top" : "bottom";
              }
              const xMin = max(overflow.left, 0);
              const xMax = max(overflow.right, 0);
              const yMin = max(overflow.top, 0);
              const yMax = max(overflow.bottom, 0);
              const dimensions = {
                availableHeight: rects.floating.height - (["left", "right"].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),
                availableWidth: rects.floating.width - (["top", "bottom"].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])
              };
              const prevDimensions = yield platform2.getDimensions(elements.floating);
              apply == null ? void 0 : apply(__spreadValues(__spreadValues({}, middlewareArguments), dimensions));
              const nextDimensions = yield platform2.getDimensions(elements.floating);
              if (prevDimensions.width !== nextDimensions.width || prevDimensions.height !== nextDimensions.height) {
                return {
                  reset: {
                    rects: true
                  }
                };
              }
              return {};
            });
          }
        };
      };
      inline = function(options) {
        if (options === void 0) {
          options = {};
        }
        return {
          name: "inline",
          options,
          fn(middlewareArguments) {
            return __async(this, null, function* () {
              var _await$platform$getCl;
              const {
                placement,
                elements,
                rects,
                platform: platform2,
                strategy
              } = middlewareArguments;
              const {
                padding = 2,
                x: x2,
                y: y2
              } = options;
              const fallback = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? yield platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
                rect: rects.reference,
                offsetParent: yield platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating),
                strategy
              }) : rects.reference);
              const clientRects = (_await$platform$getCl = yield platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) != null ? _await$platform$getCl : [];
              const paddingObject = getSideObjectFromPadding(padding);
              function getBoundingClientRect2() {
                if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x2 != null && y2 != null) {
                  var _clientRects$find;
                  return (_clientRects$find = clientRects.find((rect) => x2 > rect.left - paddingObject.left && x2 < rect.right + paddingObject.right && y2 > rect.top - paddingObject.top && y2 < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;
                }
                if (clientRects.length >= 2) {
                  if (getMainAxisFromPlacement(placement) === "x") {
                    const firstRect = clientRects[0];
                    const lastRect = clientRects[clientRects.length - 1];
                    const isTop = getSide(placement) === "top";
                    const top2 = firstRect.top;
                    const bottom2 = lastRect.bottom;
                    const left2 = isTop ? firstRect.left : lastRect.left;
                    const right2 = isTop ? firstRect.right : lastRect.right;
                    const width2 = right2 - left2;
                    const height2 = bottom2 - top2;
                    return {
                      top: top2,
                      bottom: bottom2,
                      left: left2,
                      right: right2,
                      width: width2,
                      height: height2,
                      x: left2,
                      y: top2
                    };
                  }
                  const isLeftSide = getSide(placement) === "left";
                  const maxRight = max(...clientRects.map((rect) => rect.right));
                  const minLeft = min(...clientRects.map((rect) => rect.left));
                  const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
                  const top = measureRects[0].top;
                  const bottom = measureRects[measureRects.length - 1].bottom;
                  const left = minLeft;
                  const right = maxRight;
                  const width = right - left;
                  const height = bottom - top;
                  return {
                    top,
                    bottom,
                    left,
                    right,
                    width,
                    height,
                    x: left,
                    y: top
                  };
                }
                return fallback;
              }
              const resetRects = yield platform2.getElementRects({
                reference: {
                  getBoundingClientRect: getBoundingClientRect2
                },
                floating: elements.floating,
                strategy
              });
              if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
                return {
                  reset: {
                    rects: resetRects
                  }
                };
              }
              return {};
            });
          }
        };
      };
    }
  });

  // ../assets/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function isWindow(value) {
    return value && value.document && value.location && value.alert && value.setInterval;
  }
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (!isWindow(node)) {
      const ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }
  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function getNodeName(node) {
    return isWindow(node) ? "" : node ? (node.nodeName || "").toLowerCase() : "";
  }
  function getUAString() {
    const uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands) {
      return uaData.brands.map((item) => item.brand + "/" + item.version).join(" ");
    }
    return navigator.userAgent;
  }
  function isHTMLElement(value) {
    return value instanceof getWindow(value).HTMLElement;
  }
  function isElement(value) {
    return value instanceof getWindow(value).Element;
  }
  function isNode(value) {
    return value instanceof getWindow(value).Node;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    const OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY
    } = getComputedStyle$1(element);
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }
  function isTableElement(element) {
    return ["table", "td", "th"].includes(getNodeName(element));
  }
  function isContainingBlock(element) {
    const isFirefox = /firefox/i.test(getUAString());
    const css2 = getComputedStyle$1(element);
    return css2.transform !== "none" || css2.perspective !== "none" || // @ts-ignore (TS 4.1 compat)
    css2.contain === "paint" || ["transform", "perspective"].includes(css2.willChange) || isFirefox && css2.willChange === "filter" || isFirefox && (css2.filter ? css2.filter !== "none" : false);
  }
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    let scaleX = 1;
    let scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    const win = isElement(element) ? getWindow(element) : window;
    const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    const x2 = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scaleX;
    const y2 = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scaleY;
    const width = clientRect.width / scaleX;
    const height = clientRect.height / scaleY;
    return {
      width,
      height,
      top: y2,
      right: x2 + width,
      bottom: y2 + height,
      left: x2,
      x: x2,
      y: y2
    };
  }
  function getDocumentElement(node) {
    return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
  }
  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
  }
  function isScaled(element) {
    const rect = getBoundingClientRect(element);
    return round(rect.width) !== element.offsetWidth || round(rect.height) !== element.offsetHeight;
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const rect = getBoundingClientRect(
      element,
      // @ts-ignore - checked above (TS 4.1 compat)
      isOffsetParentAnElement && isScaled(offsetParent),
      strategy === "fixed"
    );
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent, true);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // @ts-ignore
      node.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      node.parentNode || // DOM Element detected
      (isShadowRoot(node) ? node.host : null) || // ShadowRoot detected
      getDocumentElement(node)
    );
  }
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && !["html", "body"].includes(getNodeName(currentNode))) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    const window2 = getWindow(element);
    let offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }
  function getDimensions(element) {
    if (isHTMLElement(element)) {
      return {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
    }
    const rect = getBoundingClientRect(element);
    return {
      width: rect.width,
      height: rect.height
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    if (offsetParent === documentElement) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent, true);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    return __spreadProps(__spreadValues({}, rect), {
      x: rect.x - scroll.scrollLeft + offsets.x,
      y: rect.y - scroll.scrollTop + offsets.y
    });
  }
  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x2 = 0;
    let y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x2 = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    const width = max2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    const height = max2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y2 = -scroll.scrollTop;
    if (getComputedStyle$1(body || html).direction === "rtl") {
      x2 += max2(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (["html", "body", "#document"].includes(getNodeName(parentNode))) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node, list) {
    var _node$ownerDocument;
    if (list === void 0) {
      list = [];
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
    const win = getWindow(scrollableAncestor);
    const target = isBody ? [win].concat(win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []) : scrollableAncestor;
    const updatedList = list.concat(target);
    return isBody ? updatedList : (
      // @ts-ignore: isBody tells us target will be an HTMLElement here
      updatedList.concat(getOverflowAncestors(target))
    );
  }
  function contains(parent, child) {
    const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      let next = child;
      do {
        if (next && parent === next) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, false, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    return {
      top,
      left,
      x: left,
      y: top,
      right: left + element.clientWidth,
      bottom: top + element.clientHeight,
      width: element.clientWidth,
      height: element.clientHeight
    };
  }
  function getClientRectFromClippingAncestor(element, clippingParent, strategy) {
    if (clippingParent === "viewport") {
      return rectToClientRect(getViewportRect(element, strategy));
    }
    if (isElement(clippingParent)) {
      return getInnerBoundingClientRect(clippingParent, strategy);
    }
    return rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingAncestors(element) {
    const clippingAncestors = getOverflowAncestors(element);
    const canEscapeClipping = ["absolute", "fixed"].includes(getComputedStyle$1(element).position);
    const clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingAncestors.filter((clippingAncestors2) => isElement(clippingAncestors2) && contains(clippingAncestors2, clipperElement) && getNodeName(clippingAncestors2) !== "body");
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const mainClippingAncestors = boundary === "clippingAncestors" ? getClippingAncestors(element) : [].concat(boundary);
    const clippingAncestors = [...mainClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max2(rect.top, accRect.top);
      accRect.right = min2(rect.right, accRect.right);
      accRect.bottom = min2(rect.bottom, accRect.bottom);
      accRect.left = max2(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll: _ancestorScroll = true,
      ancestorResize: _ancestorResize = true,
      elementResize = true,
      animationFrame = false
    } = options;
    const ancestorScroll = _ancestorScroll && !animationFrame;
    const ancestorResize = _ancestorResize && !animationFrame;
    const ancestors = ancestorScroll || ancestorResize ? [...isElement(reference) ? getOverflowAncestors(reference) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    let observer = null;
    if (elementResize) {
      let initialUpdate = true;
      observer = new ResizeObserver(() => {
        if (!initialUpdate) {
          update();
        }
        initialUpdate = false;
      });
      isElement(reference) && !animationFrame && observer.observe(reference);
      observer.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      var _observer;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      (_observer = observer) == null ? void 0 : _observer.disconnect();
      observer = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  var min2, max2, round, platform, computePosition2;
  var init_floating_ui_dom = __esm({
    "../assets/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"() {
      init_floating_ui_core();
      init_floating_ui_core();
      min2 = Math.min;
      max2 = Math.max;
      round = Math.round;
      platform = {
        getClippingRect,
        convertOffsetParentRelativeRectToViewportRelativeRect,
        isElement,
        getDimensions,
        getOffsetParent,
        getDocumentElement,
        getElementRects: (_ref) => {
          let {
            reference,
            floating,
            strategy
          } = _ref;
          return {
            reference: getRectRelativeToOffsetParent(reference, getOffsetParent(floating), strategy),
            floating: __spreadProps(__spreadValues({}, getDimensions(floating)), {
              x: 0,
              y: 0
            })
          };
        },
        getClientRects: (element) => Array.from(element.getClientRects()),
        isRTL: (element) => getComputedStyle$1(element).direction === "rtl"
      };
      computePosition2 = (reference, floating, options) => computePosition(reference, floating, __spreadValues({
        platform
      }, options));
    }
  });

  // ../assets/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js
  var floating_ui_react_dom_esm_exports = {};
  __export(floating_ui_react_dom_esm_exports, {
    arrow: () => arrow2,
    autoPlacement: () => autoPlacement,
    autoUpdate: () => autoUpdate,
    computePosition: () => computePosition2,
    detectOverflow: () => detectOverflow,
    flip: () => flip,
    getOverflowAncestors: () => getOverflowAncestors,
    hide: () => hide,
    inline: () => inline,
    limitShift: () => limitShift,
    offset: () => offset,
    shift: () => shift,
    size: () => size,
    useFloating: () => useFloating
  });
  function deepEqual(a2, b2) {
    if (a2 === b2) {
      return true;
    }
    if (typeof a2 !== typeof b2) {
      return false;
    }
    if (typeof a2 === "function" && a2.toString() === b2.toString()) {
      return true;
    }
    let length, i2, keys;
    if (a2 && b2 && typeof a2 == "object") {
      if (Array.isArray(a2)) {
        length = a2.length;
        if (length != b2.length)
          return false;
        for (i2 = length; i2-- !== 0; ) {
          if (!deepEqual(a2[i2], b2[i2])) {
            return false;
          }
        }
        return true;
      }
      keys = Object.keys(a2);
      length = keys.length;
      if (length !== Object.keys(b2).length) {
        return false;
      }
      for (i2 = length; i2-- !== 0; ) {
        if (!Object.prototype.hasOwnProperty.call(b2, keys[i2])) {
          return false;
        }
      }
      for (i2 = length; i2-- !== 0; ) {
        const key = keys[i2];
        if (key === "_owner" && a2.$$typeof) {
          continue;
        }
        if (!deepEqual(a2[key], b2[key])) {
          return false;
        }
      }
      return true;
    }
    return a2 !== a2 && b2 !== b2;
  }
  function useLatestRef(value) {
    const ref = React.useRef(value);
    index(() => {
      ref.current = value;
    });
    return ref;
  }
  function useFloating(_temp) {
    let {
      middleware,
      placement = "bottom",
      strategy = "absolute",
      whileElementsMounted
    } = _temp === void 0 ? {} : _temp;
    const reference = React.useRef(null);
    const floating = React.useRef(null);
    const whileElementsMountedRef = useLatestRef(whileElementsMounted);
    const cleanupRef = React.useRef(null);
    const [data, setData] = React.useState({
      // Setting these to `null` will allow the consumer to determine if
      // `computePosition()` has run yet
      x: null,
      y: null,
      strategy,
      placement,
      middlewareData: {}
    });
    const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);
    if (!deepEqual(latestMiddleware == null ? void 0 : latestMiddleware.map((_ref) => {
      let {
        options
      } = _ref;
      return options;
    }), middleware == null ? void 0 : middleware.map((_ref2) => {
      let {
        options
      } = _ref2;
      return options;
    }))) {
      setLatestMiddleware(middleware);
    }
    const update = React.useCallback(() => {
      if (!reference.current || !floating.current) {
        return;
      }
      computePosition2(reference.current, floating.current, {
        middleware: latestMiddleware,
        placement,
        strategy
      }).then((data2) => {
        if (isMountedRef.current) {
          ReactDOM.flushSync(() => {
            setData(data2);
          });
        }
      });
    }, [latestMiddleware, placement, strategy]);
    index(() => {
      if (isMountedRef.current) {
        update();
      }
    }, [update]);
    const isMountedRef = React.useRef(false);
    index(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    const runElementMountCallback = React.useCallback(() => {
      if (typeof cleanupRef.current === "function") {
        cleanupRef.current();
        cleanupRef.current = null;
      }
      if (reference.current && floating.current) {
        if (whileElementsMountedRef.current) {
          const cleanupFn = whileElementsMountedRef.current(reference.current, floating.current, update);
          cleanupRef.current = cleanupFn;
        } else {
          update();
        }
      }
    }, [update, whileElementsMountedRef]);
    const setReference = React.useCallback((node) => {
      reference.current = node;
      runElementMountCallback();
    }, [runElementMountCallback]);
    const setFloating = React.useCallback((node) => {
      floating.current = node;
      runElementMountCallback();
    }, [runElementMountCallback]);
    const refs = React.useMemo(() => ({
      reference,
      floating
    }), []);
    return React.useMemo(() => __spreadProps(__spreadValues({}, data), {
      update,
      refs,
      reference: setReference,
      floating: setFloating
    }), [data, update, refs, setReference, setFloating]);
  }
  var React, import_react3, ReactDOM, index, arrow2;
  var init_floating_ui_react_dom_esm = __esm({
    "../assets/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js"() {
      init_floating_ui_dom();
      init_floating_ui_dom();
      React = __toESM(require_react());
      import_react3 = __toESM(require_react());
      ReactDOM = __toESM(require_react_dom());
      index = typeof document !== "undefined" ? import_react3.useLayoutEffect : import_react3.useEffect;
      arrow2 = (options) => {
        const {
          element,
          padding
        } = options;
        function isRef(value) {
          return Object.prototype.hasOwnProperty.call(value, "current");
        }
        return {
          name: "arrow",
          options,
          fn(args) {
            if (isRef(element)) {
              if (element.current != null) {
                return arrow({
                  element: element.current,
                  padding
                }).fn(args);
              }
              return {};
            } else if (element) {
              return arrow({
                element,
                padding
              }).fn(args);
            }
            return {};
          }
        };
      };
    }
  });

  // ../assets/node_modules/@radix-ui/react-arrow/dist/index.js
  var require_dist11 = __commonJS({
    "../assets/node_modules/@radix-ui/react-arrow/dist/index.js"(exports, module) {
      var $eQpDd$babelruntimehelpersextends = require_extends();
      var $eQpDd$react = require_react();
      var $eQpDd$radixuireactprimitive = require_dist5();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "Arrow", () => $09f4ad68a9251bc3$export$21b07c8f274aebd5);
      $parcel$export(module.exports, "Root", () => $09f4ad68a9251bc3$export$be92b6f5f03c0fe9);
      var $09f4ad68a9251bc3$export$21b07c8f274aebd5 = /* @__PURE__ */ $eQpDd$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { children, width = 10, height = 5 } = _a2, arrowProps = __objRest(_a2, ["children", "width", "height"]);
        return /* @__PURE__ */ $eQpDd$react.createElement($eQpDd$radixuireactprimitive.Primitive.svg, $parcel$interopDefault($eQpDd$babelruntimehelpersextends)({}, arrowProps, {
          ref: forwardedRef,
          width,
          height,
          viewBox: "0 0 30 10",
          preserveAspectRatio: "none"
        }), props.asChild ? children : /* @__PURE__ */ $eQpDd$react.createElement("polygon", {
          points: "0,0 30,0 15,10"
        }));
      });
      var $09f4ad68a9251bc3$export$be92b6f5f03c0fe9 = $09f4ad68a9251bc3$export$21b07c8f274aebd5;
    }
  });

  // ../assets/node_modules/@radix-ui/react-use-size/dist/index.js
  var require_dist12 = __commonJS({
    "../assets/node_modules/@radix-ui/react-use-size/dist/index.js"(exports, module) {
      var $ksDzM$react = require_react();
      var $ksDzM$radixuireactuselayouteffect = require_dist9();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useSize", () => $d2c1d285af17635b$export$1ab7ae714698c4b8);
      function $d2c1d285af17635b$export$1ab7ae714698c4b8(element) {
        const [size2, setSize] = $ksDzM$react.useState(void 0);
        $ksDzM$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (element) {
            setSize({
              width: element.offsetWidth,
              height: element.offsetHeight
            });
            const resizeObserver = new ResizeObserver((entries) => {
              if (!Array.isArray(entries))
                return;
              if (!entries.length)
                return;
              const entry = entries[0];
              let width;
              let height;
              if ("borderBoxSize" in entry) {
                const borderSizeEntry = entry["borderBoxSize"];
                const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
                width = borderSize["inlineSize"];
                height = borderSize["blockSize"];
              } else {
                width = element.offsetWidth;
                height = element.offsetHeight;
              }
              setSize({
                width,
                height
              });
            });
            resizeObserver.observe(element, {
              box: "border-box"
            });
            return () => resizeObserver.unobserve(element);
          } else
            setSize(void 0);
        }, [
          element
        ]);
        return size2;
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-popper/dist/index.js
  var require_dist13 = __commonJS({
    "../assets/node_modules/@radix-ui/react-popper/dist/index.js"(exports, module) {
      var $50Iv9$babelruntimehelpersextends = require_extends();
      var $50Iv9$react = require_react();
      var $50Iv9$floatinguireactdom = (init_floating_ui_react_dom_esm(), __toCommonJS(floating_ui_react_dom_esm_exports));
      var $50Iv9$radixuireactarrow = require_dist11();
      var $50Iv9$radixuireactcomposerefs = require_dist2();
      var $50Iv9$radixuireactcontext = require_dist3();
      var $50Iv9$radixuireactprimitive = require_dist5();
      var $50Iv9$radixuireactusecallbackref = require_dist6();
      var $50Iv9$radixuireactuselayouteffect = require_dist9();
      var $50Iv9$radixuireactusesize = require_dist12();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "createPopperScope", () => $34310caa050a8d63$export$722aac194ae923);
      $parcel$export(module.exports, "Popper", () => $34310caa050a8d63$export$badac9ada3a0bdf9);
      $parcel$export(module.exports, "PopperAnchor", () => $34310caa050a8d63$export$ecd4e1ccab6ed6d);
      $parcel$export(module.exports, "PopperContent", () => $34310caa050a8d63$export$bc4ae5855d3c4fc);
      $parcel$export(module.exports, "PopperArrow", () => $34310caa050a8d63$export$79d62cd4e10a3fd0);
      $parcel$export(module.exports, "Root", () => $34310caa050a8d63$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Anchor", () => $34310caa050a8d63$export$b688253958b8dfe7);
      $parcel$export(module.exports, "Content", () => $34310caa050a8d63$export$7c6e2c02157bb7d2);
      $parcel$export(module.exports, "Arrow", () => $34310caa050a8d63$export$21b07c8f274aebd5);
      $parcel$export(module.exports, "SIDE_OPTIONS", () => $34310caa050a8d63$export$36f0086da09c4b9f);
      $parcel$export(module.exports, "ALIGN_OPTIONS", () => $34310caa050a8d63$export$3671ffab7b302fc9);
      var $34310caa050a8d63$export$36f0086da09c4b9f = [
        "top",
        "right",
        "bottom",
        "left"
      ];
      var $34310caa050a8d63$export$3671ffab7b302fc9 = [
        "start",
        "center",
        "end"
      ];
      var $34310caa050a8d63$var$POPPER_NAME = "Popper";
      var [$34310caa050a8d63$var$createPopperContext, $34310caa050a8d63$export$722aac194ae923] = $50Iv9$radixuireactcontext.createContextScope($34310caa050a8d63$var$POPPER_NAME);
      var [$34310caa050a8d63$var$PopperProvider, $34310caa050a8d63$var$usePopperContext] = $34310caa050a8d63$var$createPopperContext($34310caa050a8d63$var$POPPER_NAME);
      var $34310caa050a8d63$export$badac9ada3a0bdf9 = (props) => {
        const { __scopePopper, children } = props;
        const [anchor, setAnchor] = $50Iv9$react.useState(null);
        return /* @__PURE__ */ $50Iv9$react.createElement($34310caa050a8d63$var$PopperProvider, {
          scope: __scopePopper,
          anchor,
          onAnchorChange: setAnchor
        }, children);
      };
      var $34310caa050a8d63$var$ANCHOR_NAME = "PopperAnchor";
      var $34310caa050a8d63$export$ecd4e1ccab6ed6d = /* @__PURE__ */ $50Iv9$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopePopper, virtualRef } = _a2, anchorProps = __objRest(_a2, ["__scopePopper", "virtualRef"]);
        const context = $34310caa050a8d63$var$usePopperContext($34310caa050a8d63$var$ANCHOR_NAME, __scopePopper);
        const ref = $50Iv9$react.useRef(null);
        const composedRefs = $50Iv9$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        $50Iv9$react.useEffect(() => {
          context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
        });
        return virtualRef ? null : /* @__PURE__ */ $50Iv9$react.createElement($50Iv9$radixuireactprimitive.Primitive.div, $parcel$interopDefault($50Iv9$babelruntimehelpersextends)({}, anchorProps, {
          ref: composedRefs
        }));
      });
      var $34310caa050a8d63$var$CONTENT_NAME = "PopperContent";
      var [$34310caa050a8d63$var$PopperContentProvider, $34310caa050a8d63$var$useContentContext] = $34310caa050a8d63$var$createPopperContext($34310caa050a8d63$var$CONTENT_NAME);
      var [$34310caa050a8d63$var$PositionContextProvider, $34310caa050a8d63$var$usePositionContext] = $34310caa050a8d63$var$createPopperContext($34310caa050a8d63$var$CONTENT_NAME, {
        hasParent: false,
        positionUpdateFns: /* @__PURE__ */ new Set()
      });
      var $34310caa050a8d63$export$bc4ae5855d3c4fc = /* @__PURE__ */ $50Iv9$react.forwardRef((props, forwardedRef) => {
        var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$hide, _middlewareData$trans, _middlewareData$trans2;
        const _a2 = props, { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, avoidCollisions = true, onPlaced } = _a2, contentProps = __objRest(_a2, ["__scopePopper", "side", "sideOffset", "align", "alignOffset", "arrowPadding", "collisionBoundary", "collisionPadding", "sticky", "hideWhenDetached", "avoidCollisions", "onPlaced"]);
        const context = $34310caa050a8d63$var$usePopperContext($34310caa050a8d63$var$CONTENT_NAME, __scopePopper);
        const [content, setContent] = $50Iv9$react.useState(null);
        const composedRefs = $50Iv9$radixuireactcomposerefs.useComposedRefs(
          forwardedRef,
          (node) => setContent(node)
        );
        const [arrow3, setArrow] = $50Iv9$react.useState(null);
        const arrowSize = $50Iv9$radixuireactusesize.useSize(arrow3);
        const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
        const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
        const desiredPlacement = side + (align !== "center" ? "-" + align : "");
        const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : __spreadValues({
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }, collisionPaddingProp);
        const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
          collisionBoundary
        ];
        const hasExplicitBoundaries = boundary.length > 0;
        const detectOverflowOptions = {
          padding: collisionPadding,
          boundary: boundary.filter($34310caa050a8d63$var$isNotNull),
          // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
          altBoundary: hasExplicitBoundaries
        };
        const { reference, floating, strategy, x: x2, y: y2, placement, middlewareData, update } = $50Iv9$floatinguireactdom.useFloating({
          // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
          strategy: "fixed",
          placement: desiredPlacement,
          whileElementsMounted: $50Iv9$floatinguireactdom.autoUpdate,
          middleware: [
            $34310caa050a8d63$var$anchorCssProperties(),
            $50Iv9$floatinguireactdom.offset({
              mainAxis: sideOffset + arrowHeight,
              alignmentAxis: alignOffset
            }),
            avoidCollisions ? $50Iv9$floatinguireactdom.shift(__spreadValues({
              mainAxis: true,
              crossAxis: false,
              limiter: sticky === "partial" ? $50Iv9$floatinguireactdom.limitShift() : void 0
            }, detectOverflowOptions)) : void 0,
            arrow3 ? $50Iv9$floatinguireactdom.arrow({
              element: arrow3,
              padding: arrowPadding
            }) : void 0,
            avoidCollisions ? $50Iv9$floatinguireactdom.flip(__spreadValues({}, detectOverflowOptions)) : void 0,
            $50Iv9$floatinguireactdom.size(__spreadProps(__spreadValues({}, detectOverflowOptions), {
              apply: ({ elements, availableWidth: width, availableHeight: height }) => {
                elements.floating.style.setProperty("--radix-popper-available-width", `${width}px`);
                elements.floating.style.setProperty("--radix-popper-available-height", `${height}px`);
              }
            })),
            $34310caa050a8d63$var$transformOrigin({
              arrowWidth,
              arrowHeight
            }),
            hideWhenDetached ? $50Iv9$floatinguireactdom.hide({
              strategy: "referenceHidden"
            }) : void 0
          ].filter($34310caa050a8d63$var$isDefined)
        });
        $50Iv9$radixuireactuselayouteffect.useLayoutEffect(() => {
          reference(context.anchor);
        }, [
          reference,
          context.anchor
        ]);
        const isPlaced = x2 !== null && y2 !== null;
        const [placedSide, placedAlign] = $34310caa050a8d63$var$getSideAndAlignFromPlacement(placement);
        const handlePlaced = $50Iv9$radixuireactusecallbackref.useCallbackRef(onPlaced);
        $50Iv9$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (isPlaced)
            handlePlaced === null || handlePlaced === void 0 || handlePlaced();
        }, [
          isPlaced,
          handlePlaced
        ]);
        const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
        const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
        const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
        const [contentZIndex, setContentZIndex] = $50Iv9$react.useState();
        $50Iv9$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (content)
            setContentZIndex(window.getComputedStyle(content).zIndex);
        }, [
          content
        ]);
        const { hasParent, positionUpdateFns } = $34310caa050a8d63$var$usePositionContext($34310caa050a8d63$var$CONTENT_NAME, __scopePopper);
        const isRoot = !hasParent;
        $50Iv9$react.useLayoutEffect(() => {
          if (!isRoot) {
            positionUpdateFns.add(update);
            return () => {
              positionUpdateFns.delete(update);
            };
          }
        }, [
          isRoot,
          positionUpdateFns,
          update
        ]);
        $50Iv9$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (isRoot && isPlaced)
            Array.from(positionUpdateFns).reverse().forEach(
              (fn) => requestAnimationFrame(fn)
            );
        }, [
          isRoot,
          isPlaced,
          positionUpdateFns
        ]);
        const commonProps = __spreadProps(__spreadValues({
          "data-side": placedSide,
          "data-align": placedAlign
        }, contentProps), {
          ref: composedRefs,
          style: __spreadProps(__spreadValues({}, contentProps.style), {
            // if the PopperContent hasn't been placed yet (not all measurements done)
            // we prevent animations so that users's animation don't kick in too early referring wrong sides
            animation: !isPlaced ? "none" : void 0,
            // hide the content if using the hide middleware and should be hidden
            opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
          })
        });
        return /* @__PURE__ */ $50Iv9$react.createElement("div", {
          ref: floating,
          "data-radix-popper-content-wrapper": "",
          style: {
            position: strategy,
            left: 0,
            top: 0,
            transform: isPlaced ? `translate3d(${Math.round(x2)}px, ${Math.round(y2)}px, 0)` : "translate3d(0, -200%, 0)",
            // keep off the page when measuring
            minWidth: "max-content",
            zIndex: contentZIndex,
            ["--radix-popper-transform-origin"]: [
              (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
              (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
            ].join(" ")
          },
          dir: props.dir
        }, /* @__PURE__ */ $50Iv9$react.createElement($34310caa050a8d63$var$PopperContentProvider, {
          scope: __scopePopper,
          placedSide,
          onArrowChange: setArrow,
          arrowX,
          arrowY,
          shouldHideArrow: cannotCenterArrow
        }, isRoot ? /* @__PURE__ */ $50Iv9$react.createElement($34310caa050a8d63$var$PositionContextProvider, {
          scope: __scopePopper,
          hasParent: true,
          positionUpdateFns
        }, /* @__PURE__ */ $50Iv9$react.createElement($50Iv9$radixuireactprimitive.Primitive.div, commonProps)) : /* @__PURE__ */ $50Iv9$react.createElement($50Iv9$radixuireactprimitive.Primitive.div, commonProps)));
      });
      var $34310caa050a8d63$var$ARROW_NAME = "PopperArrow";
      var $34310caa050a8d63$var$OPPOSITE_SIDE = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right"
      };
      var $34310caa050a8d63$export$79d62cd4e10a3fd0 = /* @__PURE__ */ $50Iv9$react.forwardRef(function $34310caa050a8d63$export$79d62cd4e10a3fd02(props, forwardedRef) {
        const _a2 = props, { __scopePopper } = _a2, arrowProps = __objRest(_a2, ["__scopePopper"]);
        const contentContext = $34310caa050a8d63$var$useContentContext($34310caa050a8d63$var$ARROW_NAME, __scopePopper);
        const baseSide = $34310caa050a8d63$var$OPPOSITE_SIDE[contentContext.placedSide];
        return (
          // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
          // doesn't report size as we'd expect on SVG elements.
          // it reports their bounding box which is effectively the largest path inside the SVG.
          /* @__PURE__ */ $50Iv9$react.createElement("span", {
            ref: contentContext.onArrowChange,
            style: {
              position: "absolute",
              left: contentContext.arrowX,
              top: contentContext.arrowY,
              [baseSide]: 0,
              transformOrigin: {
                top: "",
                right: "0 0",
                bottom: "center 0",
                left: "100% 0"
              }[contentContext.placedSide],
              transform: {
                top: "translateY(100%)",
                right: "translateY(50%) rotate(90deg) translateX(-50%)",
                bottom: `rotate(180deg)`,
                left: "translateY(50%) rotate(-90deg) translateX(50%)"
              }[contentContext.placedSide],
              visibility: contentContext.shouldHideArrow ? "hidden" : void 0
            }
          }, /* @__PURE__ */ $50Iv9$react.createElement($50Iv9$radixuireactarrow.Root, $parcel$interopDefault($50Iv9$babelruntimehelpersextends)({}, arrowProps, {
            ref: forwardedRef,
            style: __spreadProps(__spreadValues({}, arrowProps.style), {
              // ensures the element can be measured correctly (mostly for if SVG)
              display: "block"
            })
          })))
        );
      });
      function $34310caa050a8d63$var$isDefined(value) {
        return value !== void 0;
      }
      function $34310caa050a8d63$var$isNotNull(value) {
        return value !== null;
      }
      var $34310caa050a8d63$var$anchorCssProperties = () => ({
        name: "anchorCssProperties",
        fn(data) {
          const { rects, elements } = data;
          const { width, height } = rects.reference;
          elements.floating.style.setProperty("--radix-popper-anchor-width", `${width}px`);
          elements.floating.style.setProperty("--radix-popper-anchor-height", `${height}px`);
          return {};
        }
      });
      var $34310caa050a8d63$var$transformOrigin = (options) => ({
        name: "transformOrigin",
        options,
        fn(data) {
          var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
          const { placement, rects, middlewareData } = data;
          const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
          const isArrowHidden = cannotCenterArrow;
          const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
          const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
          const [placedSide, placedAlign] = $34310caa050a8d63$var$getSideAndAlignFromPlacement(placement);
          const noArrowAlign = {
            start: "0%",
            center: "50%",
            end: "100%"
          }[placedAlign];
          const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
          const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
          let x2 = "";
          let y2 = "";
          if (placedSide === "bottom") {
            x2 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
            y2 = `${-arrowHeight}px`;
          } else if (placedSide === "top") {
            x2 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
            y2 = `${rects.floating.height + arrowHeight}px`;
          } else if (placedSide === "right") {
            x2 = `${-arrowHeight}px`;
            y2 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
          } else if (placedSide === "left") {
            x2 = `${rects.floating.width + arrowHeight}px`;
            y2 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
          }
          return {
            data: {
              x: x2,
              y: y2
            }
          };
        }
      });
      function $34310caa050a8d63$var$getSideAndAlignFromPlacement(placement) {
        const [side, align = "center"] = placement.split("-");
        return [
          side,
          align
        ];
      }
      var $34310caa050a8d63$export$be92b6f5f03c0fe9 = $34310caa050a8d63$export$badac9ada3a0bdf9;
      var $34310caa050a8d63$export$b688253958b8dfe7 = $34310caa050a8d63$export$ecd4e1ccab6ed6d;
      var $34310caa050a8d63$export$7c6e2c02157bb7d2 = $34310caa050a8d63$export$bc4ae5855d3c4fc;
      var $34310caa050a8d63$export$21b07c8f274aebd5 = $34310caa050a8d63$export$79d62cd4e10a3fd0;
    }
  });

  // ../assets/node_modules/@radix-ui/react-portal/dist/index.js
  var require_dist14 = __commonJS({
    "../assets/node_modules/@radix-ui/react-portal/dist/index.js"(exports, module) {
      var $amzHf$babelruntimehelpersextends = require_extends();
      var $amzHf$react = require_react();
      var $amzHf$reactdom = require_react_dom();
      var $amzHf$radixuireactprimitive = require_dist5();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "Portal", () => $913a70b877676c16$export$602eac185826482c);
      $parcel$export(module.exports, "Root", () => $913a70b877676c16$export$be92b6f5f03c0fe9);
      var $913a70b877676c16$export$602eac185826482c = /* @__PURE__ */ $amzHf$react.forwardRef((props, forwardedRef) => {
        var _globalThis$document;
        const _a2 = props, { container = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body } = _a2, portalProps = __objRest(_a2, ["container"]);
        return container ? /* @__PURE__ */ $parcel$interopDefault($amzHf$reactdom).createPortal(/* @__PURE__ */ $amzHf$react.createElement($amzHf$radixuireactprimitive.Primitive.div, $parcel$interopDefault($amzHf$babelruntimehelpersextends)({}, portalProps, {
          ref: forwardedRef
        })), container) : null;
      });
      var $913a70b877676c16$export$be92b6f5f03c0fe9 = $913a70b877676c16$export$602eac185826482c;
    }
  });

  // ../assets/node_modules/@radix-ui/react-presence/dist/index.js
  var require_dist15 = __commonJS({
    "../assets/node_modules/@radix-ui/react-presence/dist/index.js"(exports, module) {
      var $fnLeV$react = require_react();
      var $fnLeV$reactdom = require_react_dom();
      var $fnLeV$radixuireactcomposerefs = require_dist2();
      var $fnLeV$radixuireactuselayouteffect = require_dist9();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "Presence", () => $a2fa0214bb2735a1$export$99c2b779aa4e8b8b);
      function $8f63844556d0d3cd$export$3e6543de14f8614f(initialState, machine) {
        return $fnLeV$react.useReducer((state, event) => {
          const nextState = machine[state][event];
          return nextState !== null && nextState !== void 0 ? nextState : state;
        }, initialState);
      }
      var $a2fa0214bb2735a1$export$99c2b779aa4e8b8b = (props) => {
        const { present, children } = props;
        const presence = $a2fa0214bb2735a1$var$usePresence(present);
        const child = typeof children === "function" ? children({
          present: presence.isPresent
        }) : $fnLeV$react.Children.only(children);
        const ref = $fnLeV$radixuireactcomposerefs.useComposedRefs(presence.ref, child.ref);
        const forceMount = typeof children === "function";
        return forceMount || presence.isPresent ? /* @__PURE__ */ $fnLeV$react.cloneElement(child, {
          ref
        }) : null;
      };
      $a2fa0214bb2735a1$export$99c2b779aa4e8b8b.displayName = "Presence";
      function $a2fa0214bb2735a1$var$usePresence(present) {
        const [node1, setNode] = $fnLeV$react.useState();
        const stylesRef = $fnLeV$react.useRef({});
        const prevPresentRef = $fnLeV$react.useRef(present);
        const prevAnimationNameRef = $fnLeV$react.useRef("none");
        const initialState = present ? "mounted" : "unmounted";
        const [state, send] = $8f63844556d0d3cd$export$3e6543de14f8614f(initialState, {
          mounted: {
            UNMOUNT: "unmounted",
            ANIMATION_OUT: "unmountSuspended"
          },
          unmountSuspended: {
            MOUNT: "mounted",
            ANIMATION_END: "unmounted"
          },
          unmounted: {
            MOUNT: "mounted"
          }
        });
        $fnLeV$react.useEffect(() => {
          const currentAnimationName = $a2fa0214bb2735a1$var$getAnimationName(stylesRef.current);
          prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
        }, [
          state
        ]);
        $fnLeV$radixuireactuselayouteffect.useLayoutEffect(() => {
          const styles = stylesRef.current;
          const wasPresent = prevPresentRef.current;
          const hasPresentChanged = wasPresent !== present;
          if (hasPresentChanged) {
            const prevAnimationName = prevAnimationNameRef.current;
            const currentAnimationName = $a2fa0214bb2735a1$var$getAnimationName(styles);
            if (present)
              send("MOUNT");
            else if (currentAnimationName === "none" || (styles === null || styles === void 0 ? void 0 : styles.display) === "none")
              send("UNMOUNT");
            else {
              const isAnimating = prevAnimationName !== currentAnimationName;
              if (wasPresent && isAnimating)
                send("ANIMATION_OUT");
              else
                send("UNMOUNT");
            }
            prevPresentRef.current = present;
          }
        }, [
          present,
          send
        ]);
        $fnLeV$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (node1) {
            const handleAnimationEnd = (event) => {
              const currentAnimationName = $a2fa0214bb2735a1$var$getAnimationName(stylesRef.current);
              const isCurrentAnimation = currentAnimationName.includes(event.animationName);
              if (event.target === node1 && isCurrentAnimation)
                $fnLeV$reactdom.flushSync(
                  () => send("ANIMATION_END")
                );
            };
            const handleAnimationStart = (event) => {
              if (event.target === node1)
                prevAnimationNameRef.current = $a2fa0214bb2735a1$var$getAnimationName(stylesRef.current);
            };
            node1.addEventListener("animationstart", handleAnimationStart);
            node1.addEventListener("animationcancel", handleAnimationEnd);
            node1.addEventListener("animationend", handleAnimationEnd);
            return () => {
              node1.removeEventListener("animationstart", handleAnimationStart);
              node1.removeEventListener("animationcancel", handleAnimationEnd);
              node1.removeEventListener("animationend", handleAnimationEnd);
            };
          } else
            send("ANIMATION_END");
        }, [
          node1,
          send
        ]);
        return {
          isPresent: [
            "mounted",
            "unmountSuspended"
          ].includes(state),
          ref: $fnLeV$react.useCallback((node) => {
            if (node)
              stylesRef.current = getComputedStyle(node);
            setNode(node);
          }, [])
        };
      }
      function $a2fa0214bb2735a1$var$getAnimationName(styles) {
        return (styles === null || styles === void 0 ? void 0 : styles.animationName) || "none";
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-use-controllable-state/dist/index.js
  var require_dist16 = __commonJS({
    "../assets/node_modules/@radix-ui/react-use-controllable-state/dist/index.js"(exports, module) {
      var $ijazI$react = require_react();
      var $ijazI$radixuireactusecallbackref = require_dist6();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useControllableState", () => $b84d42d44371bff7$export$6f32135080cb4c3);
      function $b84d42d44371bff7$export$6f32135080cb4c3({ prop, defaultProp, onChange = () => {
      } }) {
        const [uncontrolledProp, setUncontrolledProp] = $b84d42d44371bff7$var$useUncontrolledState({
          defaultProp,
          onChange
        });
        const isControlled = prop !== void 0;
        const value1 = isControlled ? prop : uncontrolledProp;
        const handleChange = $ijazI$radixuireactusecallbackref.useCallbackRef(onChange);
        const setValue = $ijazI$react.useCallback((nextValue) => {
          if (isControlled) {
            const setter = nextValue;
            const value = typeof nextValue === "function" ? setter(prop) : nextValue;
            if (value !== prop)
              handleChange(value);
          } else
            setUncontrolledProp(nextValue);
        }, [
          isControlled,
          prop,
          setUncontrolledProp,
          handleChange
        ]);
        return [
          value1,
          setValue
        ];
      }
      function $b84d42d44371bff7$var$useUncontrolledState({ defaultProp, onChange }) {
        const uncontrolledState = $ijazI$react.useState(defaultProp);
        const [value] = uncontrolledState;
        const prevValueRef = $ijazI$react.useRef(value);
        const handleChange = $ijazI$radixuireactusecallbackref.useCallbackRef(onChange);
        $ijazI$react.useEffect(() => {
          if (prevValueRef.current !== value) {
            handleChange(value);
            prevValueRef.current = value;
          }
        }, [
          value,
          prevValueRef,
          handleChange
        ]);
        return uncontrolledState;
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-visually-hidden/dist/index.js
  var require_dist17 = __commonJS({
    "../assets/node_modules/@radix-ui/react-visually-hidden/dist/index.js"(exports, module) {
      var $awrN2$babelruntimehelpersextends = require_extends();
      var $awrN2$react = require_react();
      var $awrN2$radixuireactprimitive = require_dist5();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "VisuallyHidden", () => $685371e9c20848e2$export$439d29a4e110a164);
      $parcel$export(module.exports, "Root", () => $685371e9c20848e2$export$be92b6f5f03c0fe9);
      var $685371e9c20848e2$export$439d29a4e110a164 = /* @__PURE__ */ $awrN2$react.forwardRef((props, forwardedRef) => {
        return /* @__PURE__ */ $awrN2$react.createElement($awrN2$radixuireactprimitive.Primitive.span, $parcel$interopDefault($awrN2$babelruntimehelpersextends)({}, props, {
          ref: forwardedRef,
          style: __spreadValues({
            // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss
            position: "absolute",
            border: 0,
            width: 1,
            height: 1,
            padding: 0,
            margin: -1,
            overflow: "hidden",
            clip: "rect(0, 0, 0, 0)",
            whiteSpace: "nowrap",
            wordWrap: "normal"
          }, props.style)
        }));
      });
      var $685371e9c20848e2$export$be92b6f5f03c0fe9 = $685371e9c20848e2$export$439d29a4e110a164;
    }
  });

  // ../assets/node_modules/@radix-ui/react-tooltip/dist/index.js
  var require_dist18 = __commonJS({
    "../assets/node_modules/@radix-ui/react-tooltip/dist/index.js"(exports, module) {
      var $iVrL9$babelruntimehelpersextends = require_extends();
      var $iVrL9$react = require_react();
      var $iVrL9$radixuiprimitive = require_dist();
      var $iVrL9$radixuireactcomposerefs = require_dist2();
      var $iVrL9$radixuireactcontext = require_dist3();
      var $iVrL9$radixuireactdismissablelayer = require_dist8();
      var $iVrL9$radixuireactid = require_dist10();
      var $iVrL9$radixuireactpopper = require_dist13();
      var $iVrL9$radixuireactportal = require_dist14();
      var $iVrL9$radixuireactpresence = require_dist15();
      var $iVrL9$radixuireactprimitive = require_dist5();
      var $iVrL9$radixuireactslot = require_dist4();
      var $iVrL9$radixuireactusecontrollablestate = require_dist16();
      var $iVrL9$radixuireactvisuallyhidden = require_dist17();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "createTooltipScope", () => $c34afbc43c90cc6f$export$1c540a2224f0d865);
      $parcel$export(module.exports, "TooltipProvider", () => $c34afbc43c90cc6f$export$f78649fb9ca566b8);
      $parcel$export(module.exports, "Tooltip", () => $c34afbc43c90cc6f$export$28c660c63b792dea);
      $parcel$export(module.exports, "TooltipTrigger", () => $c34afbc43c90cc6f$export$8c610744efcf8a1d);
      $parcel$export(module.exports, "TooltipPortal", () => $c34afbc43c90cc6f$export$7b36b8f925ab7497);
      $parcel$export(module.exports, "TooltipContent", () => $c34afbc43c90cc6f$export$e9003e2be37ec060);
      $parcel$export(module.exports, "TooltipArrow", () => $c34afbc43c90cc6f$export$c27ee0ad710f7559);
      $parcel$export(module.exports, "Provider", () => $c34afbc43c90cc6f$export$2881499e37b75b9a);
      $parcel$export(module.exports, "Root", () => $c34afbc43c90cc6f$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Trigger", () => $c34afbc43c90cc6f$export$41fb9f06171c75f4);
      $parcel$export(module.exports, "Portal", () => $c34afbc43c90cc6f$export$602eac185826482c);
      $parcel$export(module.exports, "Content", () => $c34afbc43c90cc6f$export$7c6e2c02157bb7d2);
      $parcel$export(module.exports, "Arrow", () => $c34afbc43c90cc6f$export$21b07c8f274aebd5);
      var [$c34afbc43c90cc6f$var$createTooltipContext, $c34afbc43c90cc6f$export$1c540a2224f0d865] = $iVrL9$radixuireactcontext.createContextScope("Tooltip", [
        $iVrL9$radixuireactpopper.createPopperScope
      ]);
      var $c34afbc43c90cc6f$var$usePopperScope = $iVrL9$radixuireactpopper.createPopperScope();
      var $c34afbc43c90cc6f$var$PROVIDER_NAME = "TooltipProvider";
      var $c34afbc43c90cc6f$var$DEFAULT_DELAY_DURATION = 700;
      var $c34afbc43c90cc6f$var$TOOLTIP_OPEN = "tooltip.open";
      var [$c34afbc43c90cc6f$var$TooltipProviderContextProvider, $c34afbc43c90cc6f$var$useTooltipProviderContext] = $c34afbc43c90cc6f$var$createTooltipContext($c34afbc43c90cc6f$var$PROVIDER_NAME);
      var $c34afbc43c90cc6f$export$f78649fb9ca566b8 = (props) => {
        const { __scopeTooltip, delayDuration = $c34afbc43c90cc6f$var$DEFAULT_DELAY_DURATION, skipDelayDuration = 300, disableHoverableContent = false, children } = props;
        const [isOpenDelayed, setIsOpenDelayed] = $iVrL9$react.useState(true);
        const isPointerInTransitRef = $iVrL9$react.useRef(false);
        const skipDelayTimerRef = $iVrL9$react.useRef(0);
        $iVrL9$react.useEffect(() => {
          const skipDelayTimer = skipDelayTimerRef.current;
          return () => window.clearTimeout(skipDelayTimer);
        }, []);
        return /* @__PURE__ */ $iVrL9$react.createElement($c34afbc43c90cc6f$var$TooltipProviderContextProvider, {
          scope: __scopeTooltip,
          isOpenDelayed,
          delayDuration,
          onOpen: $iVrL9$react.useCallback(() => {
            window.clearTimeout(skipDelayTimerRef.current);
            setIsOpenDelayed(false);
          }, []),
          onClose: $iVrL9$react.useCallback(() => {
            window.clearTimeout(skipDelayTimerRef.current);
            skipDelayTimerRef.current = window.setTimeout(
              () => setIsOpenDelayed(true),
              skipDelayDuration
            );
          }, [
            skipDelayDuration
          ]),
          isPointerInTransitRef,
          onPointerInTransitChange: $iVrL9$react.useCallback((inTransit) => {
            isPointerInTransitRef.current = inTransit;
          }, []),
          disableHoverableContent
        }, children);
      };
      var $c34afbc43c90cc6f$var$TOOLTIP_NAME = "Tooltip";
      var [$c34afbc43c90cc6f$var$TooltipContextProvider, $c34afbc43c90cc6f$var$useTooltipContext] = $c34afbc43c90cc6f$var$createTooltipContext($c34afbc43c90cc6f$var$TOOLTIP_NAME);
      var $c34afbc43c90cc6f$export$28c660c63b792dea = (props) => {
        const { __scopeTooltip, children, open: openProp, defaultOpen = false, onOpenChange, disableHoverableContent: disableHoverableContentProp, delayDuration: delayDurationProp } = props;
        const providerContext = $c34afbc43c90cc6f$var$useTooltipProviderContext($c34afbc43c90cc6f$var$TOOLTIP_NAME, props.__scopeTooltip);
        const popperScope = $c34afbc43c90cc6f$var$usePopperScope(__scopeTooltip);
        const [trigger, setTrigger] = $iVrL9$react.useState(null);
        const contentId = $iVrL9$radixuireactid.useId();
        const openTimerRef = $iVrL9$react.useRef(0);
        const disableHoverableContent = disableHoverableContentProp !== null && disableHoverableContentProp !== void 0 ? disableHoverableContentProp : providerContext.disableHoverableContent;
        const delayDuration = delayDurationProp !== null && delayDurationProp !== void 0 ? delayDurationProp : providerContext.delayDuration;
        const wasOpenDelayedRef = $iVrL9$react.useRef(false);
        const [open1 = false, setOpen] = $iVrL9$radixuireactusecontrollablestate.useControllableState({
          prop: openProp,
          defaultProp: defaultOpen,
          onChange: (open) => {
            if (open) {
              providerContext.onOpen();
              document.dispatchEvent(new CustomEvent($c34afbc43c90cc6f$var$TOOLTIP_OPEN));
            } else
              providerContext.onClose();
            onOpenChange === null || onOpenChange === void 0 || onOpenChange(open);
          }
        });
        const stateAttribute = $iVrL9$react.useMemo(() => {
          return open1 ? wasOpenDelayedRef.current ? "delayed-open" : "instant-open" : "closed";
        }, [
          open1
        ]);
        const handleOpen = $iVrL9$react.useCallback(() => {
          window.clearTimeout(openTimerRef.current);
          wasOpenDelayedRef.current = false;
          setOpen(true);
        }, [
          setOpen
        ]);
        const handleClose = $iVrL9$react.useCallback(() => {
          window.clearTimeout(openTimerRef.current);
          setOpen(false);
        }, [
          setOpen
        ]);
        const handleDelayedOpen = $iVrL9$react.useCallback(() => {
          window.clearTimeout(openTimerRef.current);
          openTimerRef.current = window.setTimeout(() => {
            wasOpenDelayedRef.current = true;
            setOpen(true);
          }, delayDuration);
        }, [
          delayDuration,
          setOpen
        ]);
        $iVrL9$react.useEffect(() => {
          return () => window.clearTimeout(openTimerRef.current);
        }, []);
        return /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactpopper.Root, popperScope, /* @__PURE__ */ $iVrL9$react.createElement($c34afbc43c90cc6f$var$TooltipContextProvider, {
          scope: __scopeTooltip,
          contentId,
          open: open1,
          stateAttribute,
          trigger,
          onTriggerChange: setTrigger,
          onTriggerEnter: $iVrL9$react.useCallback(() => {
            if (providerContext.isOpenDelayed)
              handleDelayedOpen();
            else
              handleOpen();
          }, [
            providerContext.isOpenDelayed,
            handleDelayedOpen,
            handleOpen
          ]),
          onTriggerLeave: $iVrL9$react.useCallback(() => {
            if (disableHoverableContent)
              handleClose();
            else
              window.clearTimeout(openTimerRef.current);
          }, [
            handleClose,
            disableHoverableContent
          ]),
          onOpen: handleOpen,
          onClose: handleClose,
          disableHoverableContent
        }, children));
      };
      var $c34afbc43c90cc6f$var$TRIGGER_NAME = "TooltipTrigger";
      var $c34afbc43c90cc6f$export$8c610744efcf8a1d = /* @__PURE__ */ $iVrL9$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeTooltip } = _a2, triggerProps = __objRest(_a2, ["__scopeTooltip"]);
        const context = $c34afbc43c90cc6f$var$useTooltipContext($c34afbc43c90cc6f$var$TRIGGER_NAME, __scopeTooltip);
        const providerContext = $c34afbc43c90cc6f$var$useTooltipProviderContext($c34afbc43c90cc6f$var$TRIGGER_NAME, __scopeTooltip);
        const popperScope = $c34afbc43c90cc6f$var$usePopperScope(__scopeTooltip);
        const ref = $iVrL9$react.useRef(null);
        const composedRefs = $iVrL9$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref, context.onTriggerChange);
        const isPointerDownRef = $iVrL9$react.useRef(false);
        const hasPointerMoveOpenedRef = $iVrL9$react.useRef(false);
        const handlePointerUp = $iVrL9$react.useCallback(
          () => isPointerDownRef.current = false,
          []
        );
        $iVrL9$react.useEffect(() => {
          return () => document.removeEventListener("pointerup", handlePointerUp);
        }, [
          handlePointerUp
        ]);
        return /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactpopper.Anchor, $parcel$interopDefault($iVrL9$babelruntimehelpersextends)({
          asChild: true
        }, popperScope), /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactprimitive.Primitive.button, $parcel$interopDefault($iVrL9$babelruntimehelpersextends)({
          // We purposefully avoid adding `type=button` here because tooltip triggers are also
          // commonly anchors and the anchor `type` attribute signifies MIME type.
          "aria-describedby": context.open ? context.contentId : void 0,
          "data-state": context.stateAttribute
        }, triggerProps, {
          ref: composedRefs,
          onPointerMove: $iVrL9$radixuiprimitive.composeEventHandlers(props.onPointerMove, (event) => {
            if (event.pointerType === "touch")
              return;
            if (!hasPointerMoveOpenedRef.current && !providerContext.isPointerInTransitRef.current) {
              context.onTriggerEnter();
              hasPointerMoveOpenedRef.current = true;
            }
          }),
          onPointerLeave: $iVrL9$radixuiprimitive.composeEventHandlers(props.onPointerLeave, () => {
            context.onTriggerLeave();
            hasPointerMoveOpenedRef.current = false;
          }),
          onPointerDown: $iVrL9$radixuiprimitive.composeEventHandlers(props.onPointerDown, () => {
            isPointerDownRef.current = true;
            document.addEventListener("pointerup", handlePointerUp, {
              once: true
            });
          }),
          onFocus: $iVrL9$radixuiprimitive.composeEventHandlers(props.onFocus, () => {
            if (!isPointerDownRef.current)
              context.onOpen();
          }),
          onBlur: $iVrL9$radixuiprimitive.composeEventHandlers(props.onBlur, context.onClose),
          onClick: $iVrL9$radixuiprimitive.composeEventHandlers(props.onClick, context.onClose)
        })));
      });
      var $c34afbc43c90cc6f$var$PORTAL_NAME = "TooltipPortal";
      var [$c34afbc43c90cc6f$var$PortalProvider, $c34afbc43c90cc6f$var$usePortalContext] = $c34afbc43c90cc6f$var$createTooltipContext($c34afbc43c90cc6f$var$PORTAL_NAME, {
        forceMount: void 0
      });
      var $c34afbc43c90cc6f$export$7b36b8f925ab7497 = (props) => {
        const { __scopeTooltip, forceMount, children, container } = props;
        const context = $c34afbc43c90cc6f$var$useTooltipContext($c34afbc43c90cc6f$var$PORTAL_NAME, __scopeTooltip);
        return /* @__PURE__ */ $iVrL9$react.createElement($c34afbc43c90cc6f$var$PortalProvider, {
          scope: __scopeTooltip,
          forceMount
        }, /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactpresence.Presence, {
          present: forceMount || context.open
        }, /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactportal.Portal, {
          asChild: true,
          container
        }, children)));
      };
      var $c34afbc43c90cc6f$var$CONTENT_NAME = "TooltipContent";
      var $c34afbc43c90cc6f$export$e9003e2be37ec060 = /* @__PURE__ */ $iVrL9$react.forwardRef((props, forwardedRef) => {
        const portalContext = $c34afbc43c90cc6f$var$usePortalContext($c34afbc43c90cc6f$var$CONTENT_NAME, props.__scopeTooltip);
        const _a2 = props, { forceMount = portalContext.forceMount, side = "top" } = _a2, contentProps = __objRest(_a2, ["forceMount", "side"]);
        const context = $c34afbc43c90cc6f$var$useTooltipContext($c34afbc43c90cc6f$var$CONTENT_NAME, props.__scopeTooltip);
        return /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactpresence.Presence, {
          present: forceMount || context.open
        }, context.disableHoverableContent ? /* @__PURE__ */ $iVrL9$react.createElement($c34afbc43c90cc6f$var$TooltipContentImpl, $parcel$interopDefault($iVrL9$babelruntimehelpersextends)({
          side
        }, contentProps, {
          ref: forwardedRef
        })) : /* @__PURE__ */ $iVrL9$react.createElement($c34afbc43c90cc6f$var$TooltipContentHoverable, $parcel$interopDefault($iVrL9$babelruntimehelpersextends)({
          side
        }, contentProps, {
          ref: forwardedRef
        })));
      });
      var $c34afbc43c90cc6f$var$TooltipContentHoverable = /* @__PURE__ */ $iVrL9$react.forwardRef((props, forwardedRef) => {
        const context = $c34afbc43c90cc6f$var$useTooltipContext($c34afbc43c90cc6f$var$CONTENT_NAME, props.__scopeTooltip);
        const providerContext = $c34afbc43c90cc6f$var$useTooltipProviderContext($c34afbc43c90cc6f$var$CONTENT_NAME, props.__scopeTooltip);
        const ref = $iVrL9$react.useRef(null);
        const composedRefs = $iVrL9$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        const [pointerGraceArea, setPointerGraceArea] = $iVrL9$react.useState(null);
        const { trigger, onClose } = context;
        const content = ref.current;
        const { onPointerInTransitChange } = providerContext;
        const handleRemoveGraceArea = $iVrL9$react.useCallback(() => {
          setPointerGraceArea(null);
          onPointerInTransitChange(false);
        }, [
          onPointerInTransitChange
        ]);
        const handleCreateGraceArea = $iVrL9$react.useCallback((event, hoverTarget) => {
          const currentTarget = event.currentTarget;
          const exitPoint = {
            x: event.clientX,
            y: event.clientY
          };
          const exitSide = $c34afbc43c90cc6f$var$getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());
          const bleed = exitSide === "right" || exitSide === "bottom" ? -5 : 5;
          const isXAxis = exitSide === "right" || exitSide === "left";
          const startPoint = isXAxis ? {
            x: event.clientX + bleed,
            y: event.clientY
          } : {
            x: event.clientX,
            y: event.clientY + bleed
          };
          const hoverTargetPoints = $c34afbc43c90cc6f$var$getPointsFromRect(hoverTarget.getBoundingClientRect());
          const graceArea = $c34afbc43c90cc6f$var$getHull([
            startPoint,
            ...hoverTargetPoints
          ]);
          setPointerGraceArea(graceArea);
          onPointerInTransitChange(true);
        }, [
          onPointerInTransitChange
        ]);
        $iVrL9$react.useEffect(() => {
          return () => handleRemoveGraceArea();
        }, [
          handleRemoveGraceArea
        ]);
        $iVrL9$react.useEffect(() => {
          if (trigger && content) {
            const handleTriggerLeave = (event) => handleCreateGraceArea(event, content);
            const handleContentLeave = (event) => handleCreateGraceArea(event, trigger);
            trigger.addEventListener("pointerleave", handleTriggerLeave);
            content.addEventListener("pointerleave", handleContentLeave);
            return () => {
              trigger.removeEventListener("pointerleave", handleTriggerLeave);
              content.removeEventListener("pointerleave", handleContentLeave);
            };
          }
        }, [
          trigger,
          content,
          handleCreateGraceArea,
          handleRemoveGraceArea
        ]);
        $iVrL9$react.useEffect(() => {
          if (pointerGraceArea) {
            const handleTrackPointerGrace = (event) => {
              const target = event.target;
              const pointerPosition = {
                x: event.clientX,
                y: event.clientY
              };
              const hasEnteredTarget = (trigger === null || trigger === void 0 ? void 0 : trigger.contains(target)) || (content === null || content === void 0 ? void 0 : content.contains(target));
              const isPointerOutsideGraceArea = !$c34afbc43c90cc6f$var$isPointInPolygon(pointerPosition, pointerGraceArea);
              if (hasEnteredTarget)
                handleRemoveGraceArea();
              else if (isPointerOutsideGraceArea) {
                handleRemoveGraceArea();
                onClose();
              }
            };
            document.addEventListener("pointermove", handleTrackPointerGrace);
            return () => document.removeEventListener("pointermove", handleTrackPointerGrace);
          }
        }, [
          trigger,
          content,
          pointerGraceArea,
          onClose,
          handleRemoveGraceArea
        ]);
        return /* @__PURE__ */ $iVrL9$react.createElement($c34afbc43c90cc6f$var$TooltipContentImpl, $parcel$interopDefault($iVrL9$babelruntimehelpersextends)({}, props, {
          ref: composedRefs
        }));
      });
      var [$c34afbc43c90cc6f$var$VisuallyHiddenContentContextProvider, $c34afbc43c90cc6f$var$useVisuallyHiddenContentContext] = $c34afbc43c90cc6f$var$createTooltipContext($c34afbc43c90cc6f$var$TOOLTIP_NAME, {
        isInside: false
      });
      var $c34afbc43c90cc6f$var$TooltipContentImpl = /* @__PURE__ */ $iVrL9$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeTooltip, children, "aria-label": ariaLabel, onEscapeKeyDown, onPointerDownOutside } = _a2, contentProps = __objRest(_a2, ["__scopeTooltip", "children", "aria-label", "onEscapeKeyDown", "onPointerDownOutside"]);
        const context = $c34afbc43c90cc6f$var$useTooltipContext($c34afbc43c90cc6f$var$CONTENT_NAME, __scopeTooltip);
        const popperScope = $c34afbc43c90cc6f$var$usePopperScope(__scopeTooltip);
        const { onClose } = context;
        $iVrL9$react.useEffect(() => {
          document.addEventListener($c34afbc43c90cc6f$var$TOOLTIP_OPEN, onClose);
          return () => document.removeEventListener($c34afbc43c90cc6f$var$TOOLTIP_OPEN, onClose);
        }, [
          onClose
        ]);
        $iVrL9$react.useEffect(() => {
          if (context.trigger) {
            const handleScroll = (event) => {
              const target = event.target;
              if (target !== null && target !== void 0 && target.contains(context.trigger))
                onClose();
            };
            window.addEventListener("scroll", handleScroll, {
              capture: true
            });
            return () => window.removeEventListener("scroll", handleScroll, {
              capture: true
            });
          }
        }, [
          context.trigger,
          onClose
        ]);
        return /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactdismissablelayer.DismissableLayer, {
          asChild: true,
          disableOutsidePointerEvents: false,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside: (event) => event.preventDefault(),
          onDismiss: onClose
        }, /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactpopper.Content, $parcel$interopDefault($iVrL9$babelruntimehelpersextends)({
          "data-state": context.stateAttribute
        }, popperScope, contentProps, {
          ref: forwardedRef,
          style: __spreadProps(__spreadValues({}, contentProps.style), {
            // re-namespace exposed content custom property
            ["--radix-tooltip-content-transform-origin"]: "var(--radix-popper-transform-origin)"
          })
        }), /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactslot.Slottable, null, children), /* @__PURE__ */ $iVrL9$react.createElement($c34afbc43c90cc6f$var$VisuallyHiddenContentContextProvider, {
          scope: __scopeTooltip,
          isInside: true
        }, /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactvisuallyhidden.Root, {
          id: context.contentId,
          role: "tooltip"
        }, ariaLabel || children))));
      });
      var $c34afbc43c90cc6f$var$ARROW_NAME = "TooltipArrow";
      var $c34afbc43c90cc6f$export$c27ee0ad710f7559 = /* @__PURE__ */ $iVrL9$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeTooltip } = _a2, arrowProps = __objRest(_a2, ["__scopeTooltip"]);
        const popperScope = $c34afbc43c90cc6f$var$usePopperScope(__scopeTooltip);
        const visuallyHiddenContentContext = $c34afbc43c90cc6f$var$useVisuallyHiddenContentContext($c34afbc43c90cc6f$var$ARROW_NAME, __scopeTooltip);
        return visuallyHiddenContentContext.isInside ? null : /* @__PURE__ */ $iVrL9$react.createElement($iVrL9$radixuireactpopper.Arrow, $parcel$interopDefault($iVrL9$babelruntimehelpersextends)({}, popperScope, arrowProps, {
          ref: forwardedRef
        }));
      });
      function $c34afbc43c90cc6f$var$getExitSideFromRect(point, rect) {
        const top = Math.abs(rect.top - point.y);
        const bottom = Math.abs(rect.bottom - point.y);
        const right = Math.abs(rect.right - point.x);
        const left = Math.abs(rect.left - point.x);
        switch (Math.min(top, bottom, right, left)) {
          case left:
            return "left";
          case right:
            return "right";
          case top:
            return "top";
          case bottom:
            return "bottom";
          default:
            return null;
        }
      }
      function $c34afbc43c90cc6f$var$getPointsFromRect(rect) {
        const { top, right, bottom, left } = rect;
        return [
          {
            x: left,
            y: top
          },
          {
            x: right,
            y: top
          },
          {
            x: right,
            y: bottom
          },
          {
            x: left,
            y: bottom
          }
        ];
      }
      function $c34afbc43c90cc6f$var$isPointInPolygon(point, polygon) {
        const { x: x2, y: y2 } = point;
        let inside = false;
        for (let i2 = 0, j2 = polygon.length - 1; i2 < polygon.length; j2 = i2++) {
          const xi = polygon[i2].x;
          const yi = polygon[i2].y;
          const xj = polygon[j2].x;
          const yj = polygon[j2].y;
          const intersect = yi > y2 !== yj > y2 && x2 < (xj - xi) * (y2 - yi) / (yj - yi) + xi;
          if (intersect)
            inside = !inside;
        }
        return inside;
      }
      function $c34afbc43c90cc6f$var$getHull(points) {
        const newPoints = points.slice();
        newPoints.sort((a2, b2) => {
          if (a2.x < b2.x)
            return -1;
          else if (a2.x > b2.x)
            return 1;
          else if (a2.y < b2.y)
            return -1;
          else if (a2.y > b2.y)
            return 1;
          else
            return 0;
        });
        return $c34afbc43c90cc6f$var$getHullPresorted(newPoints);
      }
      function $c34afbc43c90cc6f$var$getHullPresorted(points) {
        if (points.length <= 1)
          return points.slice();
        const upperHull = [];
        for (let i2 = 0; i2 < points.length; i2++) {
          const p2 = points[i2];
          while (upperHull.length >= 2) {
            const q2 = upperHull[upperHull.length - 1];
            const r2 = upperHull[upperHull.length - 2];
            if ((q2.x - r2.x) * (p2.y - r2.y) >= (q2.y - r2.y) * (p2.x - r2.x))
              upperHull.pop();
            else
              break;
          }
          upperHull.push(p2);
        }
        upperHull.pop();
        const lowerHull = [];
        for (let i1 = points.length - 1; i1 >= 0; i1--) {
          const p2 = points[i1];
          while (lowerHull.length >= 2) {
            const q2 = lowerHull[lowerHull.length - 1];
            const r2 = lowerHull[lowerHull.length - 2];
            if ((q2.x - r2.x) * (p2.y - r2.y) >= (q2.y - r2.y) * (p2.x - r2.x))
              lowerHull.pop();
            else
              break;
          }
          lowerHull.push(p2);
        }
        lowerHull.pop();
        if (upperHull.length === 1 && lowerHull.length === 1 && upperHull[0].x === lowerHull[0].x && upperHull[0].y === lowerHull[0].y)
          return upperHull;
        else
          return upperHull.concat(lowerHull);
      }
      var $c34afbc43c90cc6f$export$2881499e37b75b9a = $c34afbc43c90cc6f$export$f78649fb9ca566b8;
      var $c34afbc43c90cc6f$export$be92b6f5f03c0fe9 = $c34afbc43c90cc6f$export$28c660c63b792dea;
      var $c34afbc43c90cc6f$export$41fb9f06171c75f4 = $c34afbc43c90cc6f$export$8c610744efcf8a1d;
      var $c34afbc43c90cc6f$export$602eac185826482c = $c34afbc43c90cc6f$export$7b36b8f925ab7497;
      var $c34afbc43c90cc6f$export$7c6e2c02157bb7d2 = $c34afbc43c90cc6f$export$e9003e2be37ec060;
      var $c34afbc43c90cc6f$export$21b07c8f274aebd5 = $c34afbc43c90cc6f$export$c27ee0ad710f7559;
    }
  });

  // ../assets/node_modules/@radix-ui/react-avatar/dist/index.js
  var require_dist19 = __commonJS({
    "../assets/node_modules/@radix-ui/react-avatar/dist/index.js"(exports, module) {
      var $6FDFN$babelruntimehelpersextends = require_extends();
      var $6FDFN$react = require_react();
      var $6FDFN$radixuireactcontext = require_dist3();
      var $6FDFN$radixuireactusecallbackref = require_dist6();
      var $6FDFN$radixuireactuselayouteffect = require_dist9();
      var $6FDFN$radixuireactprimitive = require_dist5();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "createAvatarScope", () => $94437fed6c1d6d8a$export$90370d16b488820f);
      $parcel$export(module.exports, "Avatar", () => $94437fed6c1d6d8a$export$e2255cf6045e8d47);
      $parcel$export(module.exports, "AvatarImage", () => $94437fed6c1d6d8a$export$2cd8ae1985206fe8);
      $parcel$export(module.exports, "AvatarFallback", () => $94437fed6c1d6d8a$export$69fffb6a9571fbfe);
      $parcel$export(module.exports, "Root", () => $94437fed6c1d6d8a$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Image", () => $94437fed6c1d6d8a$export$3e431a229df88919);
      $parcel$export(module.exports, "Fallback", () => $94437fed6c1d6d8a$export$fb8d7f40caaeea67);
      var $94437fed6c1d6d8a$var$AVATAR_NAME = "Avatar";
      var [$94437fed6c1d6d8a$var$createAvatarContext, $94437fed6c1d6d8a$export$90370d16b488820f] = $6FDFN$radixuireactcontext.createContextScope($94437fed6c1d6d8a$var$AVATAR_NAME);
      var [$94437fed6c1d6d8a$var$AvatarProvider, $94437fed6c1d6d8a$var$useAvatarContext] = $94437fed6c1d6d8a$var$createAvatarContext($94437fed6c1d6d8a$var$AVATAR_NAME);
      var $94437fed6c1d6d8a$export$e2255cf6045e8d47 = /* @__PURE__ */ $6FDFN$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeAvatar } = _a2, avatarProps = __objRest(_a2, ["__scopeAvatar"]);
        const [imageLoadingStatus, setImageLoadingStatus] = $6FDFN$react.useState("idle");
        return /* @__PURE__ */ $6FDFN$react.createElement($94437fed6c1d6d8a$var$AvatarProvider, {
          scope: __scopeAvatar,
          imageLoadingStatus,
          onImageLoadingStatusChange: setImageLoadingStatus
        }, /* @__PURE__ */ $6FDFN$react.createElement($6FDFN$radixuireactprimitive.Primitive.span, $parcel$interopDefault($6FDFN$babelruntimehelpersextends)({}, avatarProps, {
          ref: forwardedRef
        })));
      });
      var $94437fed6c1d6d8a$var$IMAGE_NAME = "AvatarImage";
      var $94437fed6c1d6d8a$export$2cd8ae1985206fe8 = /* @__PURE__ */ $6FDFN$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeAvatar, src, onLoadingStatusChange = () => {
        } } = _a2, imageProps = __objRest(_a2, ["__scopeAvatar", "src", "onLoadingStatusChange"]);
        const context = $94437fed6c1d6d8a$var$useAvatarContext($94437fed6c1d6d8a$var$IMAGE_NAME, __scopeAvatar);
        const imageLoadingStatus = $94437fed6c1d6d8a$var$useImageLoadingStatus(src);
        const handleLoadingStatusChange = $6FDFN$radixuireactusecallbackref.useCallbackRef((status) => {
          onLoadingStatusChange(status);
          context.onImageLoadingStatusChange(status);
        });
        $6FDFN$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (imageLoadingStatus !== "idle")
            handleLoadingStatusChange(imageLoadingStatus);
        }, [
          imageLoadingStatus,
          handleLoadingStatusChange
        ]);
        return imageLoadingStatus === "loaded" ? /* @__PURE__ */ $6FDFN$react.createElement($6FDFN$radixuireactprimitive.Primitive.img, $parcel$interopDefault($6FDFN$babelruntimehelpersextends)({}, imageProps, {
          ref: forwardedRef,
          src
        })) : null;
      });
      var $94437fed6c1d6d8a$var$FALLBACK_NAME = "AvatarFallback";
      var $94437fed6c1d6d8a$export$69fffb6a9571fbfe = /* @__PURE__ */ $6FDFN$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeAvatar, delayMs } = _a2, fallbackProps = __objRest(_a2, ["__scopeAvatar", "delayMs"]);
        const context = $94437fed6c1d6d8a$var$useAvatarContext($94437fed6c1d6d8a$var$FALLBACK_NAME, __scopeAvatar);
        const [canRender, setCanRender] = $6FDFN$react.useState(delayMs === void 0);
        $6FDFN$react.useEffect(() => {
          if (delayMs !== void 0) {
            const timerId = window.setTimeout(
              () => setCanRender(true),
              delayMs
            );
            return () => window.clearTimeout(timerId);
          }
        }, [
          delayMs
        ]);
        return canRender && context.imageLoadingStatus !== "loaded" ? /* @__PURE__ */ $6FDFN$react.createElement($6FDFN$radixuireactprimitive.Primitive.span, $parcel$interopDefault($6FDFN$babelruntimehelpersextends)({}, fallbackProps, {
          ref: forwardedRef
        })) : null;
      });
      function $94437fed6c1d6d8a$var$useImageLoadingStatus(src) {
        const [loadingStatus, setLoadingStatus] = $6FDFN$react.useState("idle");
        $6FDFN$react.useEffect(() => {
          if (!src) {
            setLoadingStatus("error");
            return;
          }
          let isMounted = true;
          const image = new window.Image();
          const updateStatus = (status) => () => {
            if (!isMounted)
              return;
            setLoadingStatus(status);
          };
          setLoadingStatus("loading");
          image.onload = updateStatus("loaded");
          image.onerror = updateStatus("error");
          image.src = src;
          return () => {
            isMounted = false;
          };
        }, [
          src
        ]);
        return loadingStatus;
      }
      var $94437fed6c1d6d8a$export$be92b6f5f03c0fe9 = $94437fed6c1d6d8a$export$e2255cf6045e8d47;
      var $94437fed6c1d6d8a$export$3e431a229df88919 = $94437fed6c1d6d8a$export$2cd8ae1985206fe8;
      var $94437fed6c1d6d8a$export$fb8d7f40caaeea67 = $94437fed6c1d6d8a$export$69fffb6a9571fbfe;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-primitive/dist/index.js
  var require_dist20 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-primitive/dist/index.js"(exports, module) {
      var $iMixA$babelruntimehelpersextends = require_extends();
      var $iMixA$react = require_react();
      var $iMixA$reactdom = require_react_dom();
      var $iMixA$radixuireactslot = require_dist4();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "Primitive", () => $c3def6332c2749a6$export$250ffa63cdc0d034);
      $parcel$export(module.exports, "Root", () => $c3def6332c2749a6$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "dispatchDiscreteCustomEvent", () => $c3def6332c2749a6$export$6d1a0317bde7de7f);
      var $c3def6332c2749a6$var$NODES = [
        "a",
        "button",
        "div",
        "form",
        "h2",
        "h3",
        "img",
        "input",
        "label",
        "li",
        "nav",
        "ol",
        "p",
        "span",
        "svg",
        "ul"
      ];
      var $c3def6332c2749a6$export$250ffa63cdc0d034 = $c3def6332c2749a6$var$NODES.reduce((primitive, node) => {
        const Node = /* @__PURE__ */ $iMixA$react.forwardRef((props, forwardedRef) => {
          const _a2 = props, { asChild } = _a2, primitiveProps = __objRest(_a2, ["asChild"]);
          const Comp = asChild ? $iMixA$radixuireactslot.Slot : node;
          $iMixA$react.useEffect(() => {
            window[Symbol.for("radix-ui")] = true;
          }, []);
          return /* @__PURE__ */ $iMixA$react.createElement(Comp, $parcel$interopDefault($iMixA$babelruntimehelpersextends)({}, primitiveProps, {
            ref: forwardedRef
          }));
        });
        Node.displayName = `Primitive.${node}`;
        return __spreadProps(__spreadValues({}, primitive), {
          [node]: Node
        });
      }, {});
      function $c3def6332c2749a6$export$6d1a0317bde7de7f(target, event) {
        if (target)
          $iMixA$reactdom.flushSync(
            () => target.dispatchEvent(event)
          );
      }
      var $c3def6332c2749a6$export$be92b6f5f03c0fe9 = $c3def6332c2749a6$export$250ffa63cdc0d034;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-collection/dist/index.js
  var require_dist21 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-collection/dist/index.js"(exports, module) {
      var $hnlpS$react = require_react();
      var $hnlpS$radixuireactcontext = require_dist3();
      var $hnlpS$radixuireactcomposerefs = require_dist2();
      var $hnlpS$radixuireactslot = require_dist4();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "createCollection", () => $1a96635ec239608b$export$c74125a8e3af6bb2);
      function $1a96635ec239608b$export$c74125a8e3af6bb2(name) {
        const PROVIDER_NAME = name + "CollectionProvider";
        const [createCollectionContext, createCollectionScope] = $hnlpS$radixuireactcontext.createContextScope(PROVIDER_NAME);
        const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
          collectionRef: {
            current: null
          },
          itemMap: /* @__PURE__ */ new Map()
        });
        const CollectionProvider = (props) => {
          const { scope, children } = props;
          const ref = $parcel$interopDefault($hnlpS$react).useRef(null);
          const itemMap = $parcel$interopDefault($hnlpS$react).useRef(/* @__PURE__ */ new Map()).current;
          return /* @__PURE__ */ $parcel$interopDefault($hnlpS$react).createElement(CollectionProviderImpl, {
            scope,
            itemMap,
            collectionRef: ref
          }, children);
        };
        /* @__PURE__ */ Object.assign(CollectionProvider, {
          displayName: PROVIDER_NAME
        });
        const COLLECTION_SLOT_NAME = name + "CollectionSlot";
        const CollectionSlot = /* @__PURE__ */ $parcel$interopDefault($hnlpS$react).forwardRef((props, forwardedRef) => {
          const { scope, children } = props;
          const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
          const composedRefs = $hnlpS$radixuireactcomposerefs.useComposedRefs(forwardedRef, context.collectionRef);
          return /* @__PURE__ */ $parcel$interopDefault($hnlpS$react).createElement($hnlpS$radixuireactslot.Slot, {
            ref: composedRefs
          }, children);
        });
        /* @__PURE__ */ Object.assign(CollectionSlot, {
          displayName: COLLECTION_SLOT_NAME
        });
        const ITEM_SLOT_NAME = name + "CollectionItemSlot";
        const ITEM_DATA_ATTR = "data-radix-collection-item";
        const CollectionItemSlot = /* @__PURE__ */ $parcel$interopDefault($hnlpS$react).forwardRef((props, forwardedRef) => {
          const _a2 = props, { scope, children } = _a2, itemData = __objRest(_a2, ["scope", "children"]);
          const ref = $parcel$interopDefault($hnlpS$react).useRef(null);
          const composedRefs = $hnlpS$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
          const context = useCollectionContext(ITEM_SLOT_NAME, scope);
          $parcel$interopDefault($hnlpS$react).useEffect(() => {
            context.itemMap.set(ref, __spreadValues({
              ref
            }, itemData));
            return () => void context.itemMap.delete(ref);
          });
          return /* @__PURE__ */ $parcel$interopDefault($hnlpS$react).createElement($hnlpS$radixuireactslot.Slot, {
            [ITEM_DATA_ATTR]: "",
            ref: composedRefs
          }, children);
        });
        /* @__PURE__ */ Object.assign(CollectionItemSlot, {
          displayName: ITEM_SLOT_NAME
        });
        function useCollection(scope) {
          const context = useCollectionContext(name + "CollectionConsumer", scope);
          const getItems = $parcel$interopDefault($hnlpS$react).useCallback(() => {
            const collectionNode = context.collectionRef.current;
            if (!collectionNode)
              return [];
            const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
            const items = Array.from(context.itemMap.values());
            const orderedItems = items.sort(
              (a2, b2) => orderedNodes.indexOf(a2.ref.current) - orderedNodes.indexOf(b2.ref.current)
            );
            return orderedItems;
          }, [
            context.collectionRef,
            context.itemMap
          ]);
          return getItems;
        }
        return [
          {
            Provider: CollectionProvider,
            Slot: CollectionSlot,
            ItemSlot: CollectionItemSlot
          },
          useCollection,
          createCollectionScope
        ];
      }
    }
  });

  // ../assets/node_modules/@radix-ui/react-direction/dist/index.js
  var require_dist22 = __commonJS({
    "../assets/node_modules/@radix-ui/react-direction/dist/index.js"(exports, module) {
      var $9g4ps$react = require_react();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useDirection", () => $cc45c1b701a63adc$export$b39126d51d94e6f3);
      $parcel$export(module.exports, "Provider", () => $cc45c1b701a63adc$export$2881499e37b75b9a);
      $parcel$export(module.exports, "DirectionProvider", () => $cc45c1b701a63adc$export$c760c09fdd558351);
      var $cc45c1b701a63adc$var$DirectionContext = /* @__PURE__ */ $9g4ps$react.createContext(void 0);
      var $cc45c1b701a63adc$export$c760c09fdd558351 = (props) => {
        const { dir, children } = props;
        return /* @__PURE__ */ $9g4ps$react.createElement($cc45c1b701a63adc$var$DirectionContext.Provider, {
          value: dir
        }, children);
      };
      function $cc45c1b701a63adc$export$b39126d51d94e6f3(localDir) {
        const globalDir = $9g4ps$react.useContext($cc45c1b701a63adc$var$DirectionContext);
        return localDir || globalDir || "ltr";
      }
      var $cc45c1b701a63adc$export$2881499e37b75b9a = $cc45c1b701a63adc$export$c760c09fdd558351;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-dismissable-layer/dist/index.js
  var require_dist23 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-dismissable-layer/dist/index.js"(exports, module) {
      var $g2vWm$babelruntimehelpersextends = require_extends();
      var $g2vWm$react = require_react();
      var $g2vWm$radixuiprimitive = require_dist();
      var $g2vWm$radixuireactprimitive = require_dist20();
      var $g2vWm$radixuireactcomposerefs = require_dist2();
      var $g2vWm$radixuireactusecallbackref = require_dist6();
      var $g2vWm$radixuireactuseescapekeydown = require_dist7();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "DismissableLayer", () => $d715e0554b679f1f$export$177fb62ff3ec1f22);
      $parcel$export(module.exports, "DismissableLayerBranch", () => $d715e0554b679f1f$export$4d5eb2109db14228);
      $parcel$export(module.exports, "Root", () => $d715e0554b679f1f$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Branch", () => $d715e0554b679f1f$export$aecb2ddcb55c95be);
      var $d715e0554b679f1f$var$CONTEXT_UPDATE = "dismissableLayer.update";
      var $d715e0554b679f1f$var$POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
      var $d715e0554b679f1f$var$FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
      var $d715e0554b679f1f$var$originalBodyPointerEvents;
      var $d715e0554b679f1f$var$DismissableLayerContext = /* @__PURE__ */ $g2vWm$react.createContext({
        layers: /* @__PURE__ */ new Set(),
        layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
        branches: /* @__PURE__ */ new Set()
      });
      var $d715e0554b679f1f$export$177fb62ff3ec1f22 = /* @__PURE__ */ $g2vWm$react.forwardRef((props, forwardedRef) => {
        var _node$ownerDocument;
        const _a2 = props, { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss } = _a2, layerProps = __objRest(_a2, ["disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss"]);
        const context = $g2vWm$react.useContext($d715e0554b679f1f$var$DismissableLayerContext);
        const [node1, setNode] = $g2vWm$react.useState(null);
        const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;
        const [, force] = $g2vWm$react.useState({});
        const composedRefs = $g2vWm$radixuireactcomposerefs.useComposedRefs(
          forwardedRef,
          (node) => setNode(node)
        );
        const layers = Array.from(context.layers);
        const [highestLayerWithOutsidePointerEventsDisabled] = [
          ...context.layersWithOutsidePointerEventsDisabled
        ].slice(-1);
        const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
        const index2 = node1 ? layers.indexOf(node1) : -1;
        const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
        const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;
        const pointerDownOutside = $d715e0554b679f1f$var$usePointerDownOutside((event) => {
          const target = event.target;
          const isPointerDownOnBranch = [
            ...context.branches
          ].some(
            (branch) => branch.contains(target)
          );
          if (!isPointerEventsEnabled || isPointerDownOnBranch)
            return;
          onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
          onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
          if (!event.defaultPrevented)
            onDismiss === null || onDismiss === void 0 || onDismiss();
        }, ownerDocument);
        const focusOutside = $d715e0554b679f1f$var$useFocusOutside((event) => {
          const target = event.target;
          const isFocusInBranch = [
            ...context.branches
          ].some(
            (branch) => branch.contains(target)
          );
          if (isFocusInBranch)
            return;
          onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
          onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
          if (!event.defaultPrevented)
            onDismiss === null || onDismiss === void 0 || onDismiss();
        }, ownerDocument);
        $g2vWm$radixuireactuseescapekeydown.useEscapeKeydown((event) => {
          const isHighestLayer = index2 === context.layers.size - 1;
          if (!isHighestLayer)
            return;
          onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
          if (!event.defaultPrevented && onDismiss) {
            event.preventDefault();
            onDismiss();
          }
        }, ownerDocument);
        $g2vWm$react.useEffect(() => {
          if (!node1)
            return;
          if (disableOutsidePointerEvents) {
            if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
              $d715e0554b679f1f$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
              ownerDocument.body.style.pointerEvents = "none";
            }
            context.layersWithOutsidePointerEventsDisabled.add(node1);
          }
          context.layers.add(node1);
          $d715e0554b679f1f$var$dispatchUpdate();
          return () => {
            if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1)
              ownerDocument.body.style.pointerEvents = $d715e0554b679f1f$var$originalBodyPointerEvents;
          };
        }, [
          node1,
          ownerDocument,
          disableOutsidePointerEvents,
          context
        ]);
        $g2vWm$react.useEffect(() => {
          return () => {
            if (!node1)
              return;
            context.layers.delete(node1);
            context.layersWithOutsidePointerEventsDisabled.delete(node1);
            $d715e0554b679f1f$var$dispatchUpdate();
          };
        }, [
          node1,
          context
        ]);
        $g2vWm$react.useEffect(() => {
          const handleUpdate = () => force({});
          document.addEventListener($d715e0554b679f1f$var$CONTEXT_UPDATE, handleUpdate);
          return () => document.removeEventListener($d715e0554b679f1f$var$CONTEXT_UPDATE, handleUpdate);
        }, []);
        return /* @__PURE__ */ $g2vWm$react.createElement($g2vWm$radixuireactprimitive.Primitive.div, $parcel$interopDefault($g2vWm$babelruntimehelpersextends)({}, layerProps, {
          ref: composedRefs,
          style: __spreadValues({
            pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0
          }, props.style),
          onFocusCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),
          onBlurCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),
          onPointerDownCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
        }));
      });
      var $d715e0554b679f1f$export$4d5eb2109db14228 = /* @__PURE__ */ $g2vWm$react.forwardRef((props, forwardedRef) => {
        const context = $g2vWm$react.useContext($d715e0554b679f1f$var$DismissableLayerContext);
        const ref = $g2vWm$react.useRef(null);
        const composedRefs = $g2vWm$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        $g2vWm$react.useEffect(() => {
          const node = ref.current;
          if (node) {
            context.branches.add(node);
            return () => {
              context.branches.delete(node);
            };
          }
        }, [
          context.branches
        ]);
        return /* @__PURE__ */ $g2vWm$react.createElement($g2vWm$radixuireactprimitive.Primitive.div, $parcel$interopDefault($g2vWm$babelruntimehelpersextends)({}, props, {
          ref: composedRefs
        }));
      });
      function $d715e0554b679f1f$var$usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
        const handlePointerDownOutside = $g2vWm$radixuireactusecallbackref.useCallbackRef(onPointerDownOutside);
        const isPointerInsideReactTreeRef = $g2vWm$react.useRef(false);
        const handleClickRef = $g2vWm$react.useRef(() => {
        });
        $g2vWm$react.useEffect(() => {
          const handlePointerDown = (event) => {
            if (event.target && !isPointerInsideReactTreeRef.current) {
              let handleAndDispatchPointerDownOutsideEvent2 = function() {
                $d715e0554b679f1f$var$handleAndDispatchCustomEvent($d715e0554b679f1f$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
                  discrete: true
                });
              };
              var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;
              const eventDetail = {
                originalEvent: event
              };
              if (event.pointerType === "touch") {
                ownerDocument.removeEventListener("click", handleClickRef.current);
                handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
                ownerDocument.addEventListener("click", handleClickRef.current, {
                  once: true
                });
              } else
                handleAndDispatchPointerDownOutsideEvent2();
            }
            isPointerInsideReactTreeRef.current = false;
          };
          const timerId = window.setTimeout(() => {
            ownerDocument.addEventListener("pointerdown", handlePointerDown);
          }, 0);
          return () => {
            window.clearTimeout(timerId);
            ownerDocument.removeEventListener("pointerdown", handlePointerDown);
            ownerDocument.removeEventListener("click", handleClickRef.current);
          };
        }, [
          ownerDocument,
          handlePointerDownOutside
        ]);
        return {
          // ensures we check React component tree (not just DOM tree)
          onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
        };
      }
      function $d715e0554b679f1f$var$useFocusOutside(onFocusOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
        const handleFocusOutside = $g2vWm$radixuireactusecallbackref.useCallbackRef(onFocusOutside);
        const isFocusInsideReactTreeRef = $g2vWm$react.useRef(false);
        $g2vWm$react.useEffect(() => {
          const handleFocus = (event) => {
            if (event.target && !isFocusInsideReactTreeRef.current) {
              const eventDetail = {
                originalEvent: event
              };
              $d715e0554b679f1f$var$handleAndDispatchCustomEvent($d715e0554b679f1f$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
                discrete: false
              });
            }
          };
          ownerDocument.addEventListener("focusin", handleFocus);
          return () => ownerDocument.removeEventListener("focusin", handleFocus);
        }, [
          ownerDocument,
          handleFocusOutside
        ]);
        return {
          onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
          onBlurCapture: () => isFocusInsideReactTreeRef.current = false
        };
      }
      function $d715e0554b679f1f$var$dispatchUpdate() {
        const event = new CustomEvent($d715e0554b679f1f$var$CONTEXT_UPDATE);
        document.dispatchEvent(event);
      }
      function $d715e0554b679f1f$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
        const target = detail.originalEvent.target;
        const event = new CustomEvent(name, {
          bubbles: false,
          cancelable: true,
          detail
        });
        if (handler)
          target.addEventListener(name, handler, {
            once: true
          });
        if (discrete)
          $g2vWm$radixuireactprimitive.dispatchDiscreteCustomEvent(target, event);
        else
          target.dispatchEvent(event);
      }
      var $d715e0554b679f1f$export$be92b6f5f03c0fe9 = $d715e0554b679f1f$export$177fb62ff3ec1f22;
      var $d715e0554b679f1f$export$aecb2ddcb55c95be = $d715e0554b679f1f$export$4d5eb2109db14228;
    }
  });

  // ../assets/node_modules/@radix-ui/react-focus-guards/dist/index.js
  var require_dist24 = __commonJS({
    "../assets/node_modules/@radix-ui/react-focus-guards/dist/index.js"(exports, module) {
      var $cnctE$react = require_react();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "FocusGuards", () => $71476a6ed7dbbaf3$export$ac5b58043b79449b);
      $parcel$export(module.exports, "Root", () => $71476a6ed7dbbaf3$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "useFocusGuards", () => $71476a6ed7dbbaf3$export$b7ece24a22aeda8c);
      var $71476a6ed7dbbaf3$var$count = 0;
      function $71476a6ed7dbbaf3$export$ac5b58043b79449b(props) {
        $71476a6ed7dbbaf3$export$b7ece24a22aeda8c();
        return props.children;
      }
      function $71476a6ed7dbbaf3$export$b7ece24a22aeda8c() {
        $cnctE$react.useEffect(() => {
          var _edgeGuards$, _edgeGuards$2;
          const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
          document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $71476a6ed7dbbaf3$var$createFocusGuard());
          document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $71476a6ed7dbbaf3$var$createFocusGuard());
          $71476a6ed7dbbaf3$var$count++;
          return () => {
            if ($71476a6ed7dbbaf3$var$count === 1)
              document.querySelectorAll("[data-radix-focus-guard]").forEach(
                (node) => node.remove()
              );
            $71476a6ed7dbbaf3$var$count--;
          };
        }, []);
      }
      function $71476a6ed7dbbaf3$var$createFocusGuard() {
        const element = document.createElement("span");
        element.setAttribute("data-radix-focus-guard", "");
        element.tabIndex = 0;
        element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none";
        return element;
      }
      var $71476a6ed7dbbaf3$export$be92b6f5f03c0fe9 = $71476a6ed7dbbaf3$export$ac5b58043b79449b;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-focus-scope/dist/index.js
  var require_dist25 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-focus-scope/dist/index.js"(exports, module) {
      var $buum9$babelruntimehelpersextends = require_extends();
      var $buum9$react = require_react();
      var $buum9$radixuireactcomposerefs = require_dist2();
      var $buum9$radixuireactprimitive = require_dist20();
      var $buum9$radixuireactusecallbackref = require_dist6();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "FocusScope", () => $2bc01e66e04aa9ed$export$20e40289641fbbb6);
      $parcel$export(module.exports, "Root", () => $2bc01e66e04aa9ed$export$be92b6f5f03c0fe9);
      var $2bc01e66e04aa9ed$var$AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
      var $2bc01e66e04aa9ed$var$AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
      var $2bc01e66e04aa9ed$var$EVENT_OPTIONS = {
        bubbles: false,
        cancelable: true
      };
      var $2bc01e66e04aa9ed$export$20e40289641fbbb6 = /* @__PURE__ */ $buum9$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp } = _a2, scopeProps = __objRest(_a2, ["loop", "trapped", "onMountAutoFocus", "onUnmountAutoFocus"]);
        const [container1, setContainer] = $buum9$react.useState(null);
        const onMountAutoFocus = $buum9$radixuireactusecallbackref.useCallbackRef(onMountAutoFocusProp);
        const onUnmountAutoFocus = $buum9$radixuireactusecallbackref.useCallbackRef(onUnmountAutoFocusProp);
        const lastFocusedElementRef = $buum9$react.useRef(null);
        const composedRefs = $buum9$radixuireactcomposerefs.useComposedRefs(
          forwardedRef,
          (node) => setContainer(node)
        );
        const focusScope = $buum9$react.useRef({
          paused: false,
          pause() {
            this.paused = true;
          },
          resume() {
            this.paused = false;
          }
        }).current;
        $buum9$react.useEffect(() => {
          if (trapped) {
            let handleFocusIn2 = function(event) {
              if (focusScope.paused || !container1)
                return;
              const target = event.target;
              if (container1.contains(target))
                lastFocusedElementRef.current = target;
              else
                $2bc01e66e04aa9ed$var$focus(lastFocusedElementRef.current, {
                  select: true
                });
            }, handleFocusOut2 = function(event) {
              if (focusScope.paused || !container1)
                return;
              if (!container1.contains(event.relatedTarget))
                $2bc01e66e04aa9ed$var$focus(lastFocusedElementRef.current, {
                  select: true
                });
            };
            var handleFocusIn = handleFocusIn2, handleFocusOut = handleFocusOut2;
            document.addEventListener("focusin", handleFocusIn2);
            document.addEventListener("focusout", handleFocusOut2);
            return () => {
              document.removeEventListener("focusin", handleFocusIn2);
              document.removeEventListener("focusout", handleFocusOut2);
            };
          }
        }, [
          trapped,
          container1,
          focusScope.paused
        ]);
        $buum9$react.useEffect(() => {
          if (container1) {
            $2bc01e66e04aa9ed$var$focusScopesStack.add(focusScope);
            const previouslyFocusedElement = document.activeElement;
            const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
            if (!hasFocusedCandidate) {
              const mountEvent = new CustomEvent($2bc01e66e04aa9ed$var$AUTOFOCUS_ON_MOUNT, $2bc01e66e04aa9ed$var$EVENT_OPTIONS);
              container1.addEventListener($2bc01e66e04aa9ed$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
              container1.dispatchEvent(mountEvent);
              if (!mountEvent.defaultPrevented) {
                $2bc01e66e04aa9ed$var$focusFirst($2bc01e66e04aa9ed$var$removeLinks($2bc01e66e04aa9ed$var$getTabbableCandidates(container1)), {
                  select: true
                });
                if (document.activeElement === previouslyFocusedElement)
                  $2bc01e66e04aa9ed$var$focus(container1);
              }
            }
            return () => {
              container1.removeEventListener($2bc01e66e04aa9ed$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
              setTimeout(() => {
                const unmountEvent = new CustomEvent($2bc01e66e04aa9ed$var$AUTOFOCUS_ON_UNMOUNT, $2bc01e66e04aa9ed$var$EVENT_OPTIONS);
                container1.addEventListener($2bc01e66e04aa9ed$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
                container1.dispatchEvent(unmountEvent);
                if (!unmountEvent.defaultPrevented)
                  $2bc01e66e04aa9ed$var$focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
                    select: true
                  });
                container1.removeEventListener($2bc01e66e04aa9ed$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
                $2bc01e66e04aa9ed$var$focusScopesStack.remove(focusScope);
              }, 0);
            };
          }
        }, [
          container1,
          onMountAutoFocus,
          onUnmountAutoFocus,
          focusScope
        ]);
        const handleKeyDown = $buum9$react.useCallback((event) => {
          if (!loop && !trapped)
            return;
          if (focusScope.paused)
            return;
          const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
          const focusedElement = document.activeElement;
          if (isTabKey && focusedElement) {
            const container = event.currentTarget;
            const [first, last] = $2bc01e66e04aa9ed$var$getTabbableEdges(container);
            const hasTabbableElementsInside = first && last;
            if (!hasTabbableElementsInside) {
              if (focusedElement === container)
                event.preventDefault();
            } else {
              if (!event.shiftKey && focusedElement === last) {
                event.preventDefault();
                if (loop)
                  $2bc01e66e04aa9ed$var$focus(first, {
                    select: true
                  });
              } else if (event.shiftKey && focusedElement === first) {
                event.preventDefault();
                if (loop)
                  $2bc01e66e04aa9ed$var$focus(last, {
                    select: true
                  });
              }
            }
          }
        }, [
          loop,
          trapped,
          focusScope.paused
        ]);
        return /* @__PURE__ */ $buum9$react.createElement($buum9$radixuireactprimitive.Primitive.div, $parcel$interopDefault($buum9$babelruntimehelpersextends)({
          tabIndex: -1
        }, scopeProps, {
          ref: composedRefs,
          onKeyDown: handleKeyDown
        }));
      });
      function $2bc01e66e04aa9ed$var$focusFirst(candidates, { select = false } = {}) {
        const previouslyFocusedElement = document.activeElement;
        for (const candidate of candidates) {
          $2bc01e66e04aa9ed$var$focus(candidate, {
            select
          });
          if (document.activeElement !== previouslyFocusedElement)
            return;
        }
      }
      function $2bc01e66e04aa9ed$var$getTabbableEdges(container) {
        const candidates = $2bc01e66e04aa9ed$var$getTabbableCandidates(container);
        const first = $2bc01e66e04aa9ed$var$findVisible(candidates, container);
        const last = $2bc01e66e04aa9ed$var$findVisible(candidates.reverse(), container);
        return [
          first,
          last
        ];
      }
      function $2bc01e66e04aa9ed$var$getTabbableCandidates(container) {
        const nodes = [];
        const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
          acceptNode: (node) => {
            const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
            if (node.disabled || node.hidden || isHiddenInput)
              return NodeFilter.FILTER_SKIP;
            return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
          }
        });
        while (walker.nextNode())
          nodes.push(walker.currentNode);
        return nodes;
      }
      function $2bc01e66e04aa9ed$var$findVisible(elements, container) {
        for (const element of elements) {
          if (!$2bc01e66e04aa9ed$var$isHidden(element, {
            upTo: container
          }))
            return element;
        }
      }
      function $2bc01e66e04aa9ed$var$isHidden(node, { upTo }) {
        if (getComputedStyle(node).visibility === "hidden")
          return true;
        while (node) {
          if (upTo !== void 0 && node === upTo)
            return false;
          if (getComputedStyle(node).display === "none")
            return true;
          node = node.parentElement;
        }
        return false;
      }
      function $2bc01e66e04aa9ed$var$isSelectableInput(element) {
        return element instanceof HTMLInputElement && "select" in element;
      }
      function $2bc01e66e04aa9ed$var$focus(element, { select = false } = {}) {
        if (element && element.focus) {
          const previouslyFocusedElement = document.activeElement;
          element.focus({
            preventScroll: true
          });
          if (element !== previouslyFocusedElement && $2bc01e66e04aa9ed$var$isSelectableInput(element) && select)
            element.select();
        }
      }
      var $2bc01e66e04aa9ed$var$focusScopesStack = $2bc01e66e04aa9ed$var$createFocusScopesStack();
      function $2bc01e66e04aa9ed$var$createFocusScopesStack() {
        let stack = [];
        return {
          add(focusScope) {
            const activeFocusScope = stack[0];
            if (focusScope !== activeFocusScope)
              activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
            stack = $2bc01e66e04aa9ed$var$arrayRemove(stack, focusScope);
            stack.unshift(focusScope);
          },
          remove(focusScope) {
            var _stack$;
            stack = $2bc01e66e04aa9ed$var$arrayRemove(stack, focusScope);
            (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
          }
        };
      }
      function $2bc01e66e04aa9ed$var$arrayRemove(array, item) {
        const updatedArray = [
          ...array
        ];
        const index2 = updatedArray.indexOf(item);
        if (index2 !== -1)
          updatedArray.splice(index2, 1);
        return updatedArray;
      }
      function $2bc01e66e04aa9ed$var$removeLinks(items) {
        return items.filter(
          (item) => item.tagName !== "A"
        );
      }
      var $2bc01e66e04aa9ed$export$be92b6f5f03c0fe9 = $2bc01e66e04aa9ed$export$20e40289641fbbb6;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-arrow/dist/index.js
  var require_dist26 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-arrow/dist/index.js"(exports, module) {
      var $eQpDd$babelruntimehelpersextends = require_extends();
      var $eQpDd$react = require_react();
      var $eQpDd$radixuireactprimitive = require_dist20();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "Arrow", () => $09f4ad68a9251bc3$export$21b07c8f274aebd5);
      $parcel$export(module.exports, "Root", () => $09f4ad68a9251bc3$export$be92b6f5f03c0fe9);
      var $09f4ad68a9251bc3$export$21b07c8f274aebd5 = /* @__PURE__ */ $eQpDd$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { children, width = 10, height = 5 } = _a2, arrowProps = __objRest(_a2, ["children", "width", "height"]);
        return /* @__PURE__ */ $eQpDd$react.createElement($eQpDd$radixuireactprimitive.Primitive.svg, $parcel$interopDefault($eQpDd$babelruntimehelpersextends)({}, arrowProps, {
          ref: forwardedRef,
          width,
          height,
          viewBox: "0 0 30 10",
          preserveAspectRatio: "none"
        }), props.asChild ? children : /* @__PURE__ */ $eQpDd$react.createElement("polygon", {
          points: "0,0 30,0 15,10"
        }));
      });
      var $09f4ad68a9251bc3$export$be92b6f5f03c0fe9 = $09f4ad68a9251bc3$export$21b07c8f274aebd5;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-popper/dist/index.js
  var require_dist27 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-popper/dist/index.js"(exports, module) {
      var $50Iv9$babelruntimehelpersextends = require_extends();
      var $50Iv9$react = require_react();
      var $50Iv9$floatinguireactdom = (init_floating_ui_react_dom_esm(), __toCommonJS(floating_ui_react_dom_esm_exports));
      var $50Iv9$radixuireactarrow = require_dist26();
      var $50Iv9$radixuireactcomposerefs = require_dist2();
      var $50Iv9$radixuireactcontext = require_dist3();
      var $50Iv9$radixuireactprimitive = require_dist20();
      var $50Iv9$radixuireactusecallbackref = require_dist6();
      var $50Iv9$radixuireactuselayouteffect = require_dist9();
      var $50Iv9$radixuireactusesize = require_dist12();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "createPopperScope", () => $34310caa050a8d63$export$722aac194ae923);
      $parcel$export(module.exports, "Popper", () => $34310caa050a8d63$export$badac9ada3a0bdf9);
      $parcel$export(module.exports, "PopperAnchor", () => $34310caa050a8d63$export$ecd4e1ccab6ed6d);
      $parcel$export(module.exports, "PopperContent", () => $34310caa050a8d63$export$bc4ae5855d3c4fc);
      $parcel$export(module.exports, "PopperArrow", () => $34310caa050a8d63$export$79d62cd4e10a3fd0);
      $parcel$export(module.exports, "Root", () => $34310caa050a8d63$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Anchor", () => $34310caa050a8d63$export$b688253958b8dfe7);
      $parcel$export(module.exports, "Content", () => $34310caa050a8d63$export$7c6e2c02157bb7d2);
      $parcel$export(module.exports, "Arrow", () => $34310caa050a8d63$export$21b07c8f274aebd5);
      $parcel$export(module.exports, "SIDE_OPTIONS", () => $34310caa050a8d63$export$36f0086da09c4b9f);
      $parcel$export(module.exports, "ALIGN_OPTIONS", () => $34310caa050a8d63$export$3671ffab7b302fc9);
      var $34310caa050a8d63$export$36f0086da09c4b9f = [
        "top",
        "right",
        "bottom",
        "left"
      ];
      var $34310caa050a8d63$export$3671ffab7b302fc9 = [
        "start",
        "center",
        "end"
      ];
      var $34310caa050a8d63$var$POPPER_NAME = "Popper";
      var [$34310caa050a8d63$var$createPopperContext, $34310caa050a8d63$export$722aac194ae923] = $50Iv9$radixuireactcontext.createContextScope($34310caa050a8d63$var$POPPER_NAME);
      var [$34310caa050a8d63$var$PopperProvider, $34310caa050a8d63$var$usePopperContext] = $34310caa050a8d63$var$createPopperContext($34310caa050a8d63$var$POPPER_NAME);
      var $34310caa050a8d63$export$badac9ada3a0bdf9 = (props) => {
        const { __scopePopper, children } = props;
        const [anchor, setAnchor] = $50Iv9$react.useState(null);
        return /* @__PURE__ */ $50Iv9$react.createElement($34310caa050a8d63$var$PopperProvider, {
          scope: __scopePopper,
          anchor,
          onAnchorChange: setAnchor
        }, children);
      };
      var $34310caa050a8d63$var$ANCHOR_NAME = "PopperAnchor";
      var $34310caa050a8d63$export$ecd4e1ccab6ed6d = /* @__PURE__ */ $50Iv9$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopePopper, virtualRef } = _a2, anchorProps = __objRest(_a2, ["__scopePopper", "virtualRef"]);
        const context = $34310caa050a8d63$var$usePopperContext($34310caa050a8d63$var$ANCHOR_NAME, __scopePopper);
        const ref = $50Iv9$react.useRef(null);
        const composedRefs = $50Iv9$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        $50Iv9$react.useEffect(() => {
          context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
        });
        return virtualRef ? null : /* @__PURE__ */ $50Iv9$react.createElement($50Iv9$radixuireactprimitive.Primitive.div, $parcel$interopDefault($50Iv9$babelruntimehelpersextends)({}, anchorProps, {
          ref: composedRefs
        }));
      });
      var $34310caa050a8d63$var$CONTENT_NAME = "PopperContent";
      var [$34310caa050a8d63$var$PopperContentProvider, $34310caa050a8d63$var$useContentContext] = $34310caa050a8d63$var$createPopperContext($34310caa050a8d63$var$CONTENT_NAME);
      var [$34310caa050a8d63$var$PositionContextProvider, $34310caa050a8d63$var$usePositionContext] = $34310caa050a8d63$var$createPopperContext($34310caa050a8d63$var$CONTENT_NAME, {
        hasParent: false,
        positionUpdateFns: /* @__PURE__ */ new Set()
      });
      var $34310caa050a8d63$export$bc4ae5855d3c4fc = /* @__PURE__ */ $50Iv9$react.forwardRef((props, forwardedRef) => {
        var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$hide, _middlewareData$trans, _middlewareData$trans2;
        const _a2 = props, { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, avoidCollisions = true, onPlaced } = _a2, contentProps = __objRest(_a2, ["__scopePopper", "side", "sideOffset", "align", "alignOffset", "arrowPadding", "collisionBoundary", "collisionPadding", "sticky", "hideWhenDetached", "avoidCollisions", "onPlaced"]);
        const context = $34310caa050a8d63$var$usePopperContext($34310caa050a8d63$var$CONTENT_NAME, __scopePopper);
        const [content, setContent] = $50Iv9$react.useState(null);
        const composedRefs = $50Iv9$radixuireactcomposerefs.useComposedRefs(
          forwardedRef,
          (node) => setContent(node)
        );
        const [arrow3, setArrow] = $50Iv9$react.useState(null);
        const arrowSize = $50Iv9$radixuireactusesize.useSize(arrow3);
        const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
        const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
        const desiredPlacement = side + (align !== "center" ? "-" + align : "");
        const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : __spreadValues({
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }, collisionPaddingProp);
        const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
          collisionBoundary
        ];
        const hasExplicitBoundaries = boundary.length > 0;
        const detectOverflowOptions = {
          padding: collisionPadding,
          boundary: boundary.filter($34310caa050a8d63$var$isNotNull),
          // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
          altBoundary: hasExplicitBoundaries
        };
        const { reference, floating, strategy, x: x2, y: y2, placement, middlewareData, update } = $50Iv9$floatinguireactdom.useFloating({
          // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
          strategy: "fixed",
          placement: desiredPlacement,
          whileElementsMounted: $50Iv9$floatinguireactdom.autoUpdate,
          middleware: [
            $34310caa050a8d63$var$anchorCssProperties(),
            $50Iv9$floatinguireactdom.offset({
              mainAxis: sideOffset + arrowHeight,
              alignmentAxis: alignOffset
            }),
            avoidCollisions ? $50Iv9$floatinguireactdom.shift(__spreadValues({
              mainAxis: true,
              crossAxis: false,
              limiter: sticky === "partial" ? $50Iv9$floatinguireactdom.limitShift() : void 0
            }, detectOverflowOptions)) : void 0,
            arrow3 ? $50Iv9$floatinguireactdom.arrow({
              element: arrow3,
              padding: arrowPadding
            }) : void 0,
            avoidCollisions ? $50Iv9$floatinguireactdom.flip(__spreadValues({}, detectOverflowOptions)) : void 0,
            $50Iv9$floatinguireactdom.size(__spreadProps(__spreadValues({}, detectOverflowOptions), {
              apply: ({ elements, availableWidth: width, availableHeight: height }) => {
                elements.floating.style.setProperty("--radix-popper-available-width", `${width}px`);
                elements.floating.style.setProperty("--radix-popper-available-height", `${height}px`);
              }
            })),
            $34310caa050a8d63$var$transformOrigin({
              arrowWidth,
              arrowHeight
            }),
            hideWhenDetached ? $50Iv9$floatinguireactdom.hide({
              strategy: "referenceHidden"
            }) : void 0
          ].filter($34310caa050a8d63$var$isDefined)
        });
        $50Iv9$radixuireactuselayouteffect.useLayoutEffect(() => {
          reference(context.anchor);
        }, [
          reference,
          context.anchor
        ]);
        const isPlaced = x2 !== null && y2 !== null;
        const [placedSide, placedAlign] = $34310caa050a8d63$var$getSideAndAlignFromPlacement(placement);
        const handlePlaced = $50Iv9$radixuireactusecallbackref.useCallbackRef(onPlaced);
        $50Iv9$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (isPlaced)
            handlePlaced === null || handlePlaced === void 0 || handlePlaced();
        }, [
          isPlaced,
          handlePlaced
        ]);
        const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
        const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
        const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
        const [contentZIndex, setContentZIndex] = $50Iv9$react.useState();
        $50Iv9$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (content)
            setContentZIndex(window.getComputedStyle(content).zIndex);
        }, [
          content
        ]);
        const { hasParent, positionUpdateFns } = $34310caa050a8d63$var$usePositionContext($34310caa050a8d63$var$CONTENT_NAME, __scopePopper);
        const isRoot = !hasParent;
        $50Iv9$react.useLayoutEffect(() => {
          if (!isRoot) {
            positionUpdateFns.add(update);
            return () => {
              positionUpdateFns.delete(update);
            };
          }
        }, [
          isRoot,
          positionUpdateFns,
          update
        ]);
        $50Iv9$radixuireactuselayouteffect.useLayoutEffect(() => {
          if (isRoot && isPlaced)
            Array.from(positionUpdateFns).reverse().forEach(
              (fn) => requestAnimationFrame(fn)
            );
        }, [
          isRoot,
          isPlaced,
          positionUpdateFns
        ]);
        const commonProps = __spreadProps(__spreadValues({
          "data-side": placedSide,
          "data-align": placedAlign
        }, contentProps), {
          ref: composedRefs,
          style: __spreadProps(__spreadValues({}, contentProps.style), {
            // if the PopperContent hasn't been placed yet (not all measurements done)
            // we prevent animations so that users's animation don't kick in too early referring wrong sides
            animation: !isPlaced ? "none" : void 0,
            // hide the content if using the hide middleware and should be hidden
            opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
          })
        });
        return /* @__PURE__ */ $50Iv9$react.createElement("div", {
          ref: floating,
          "data-radix-popper-content-wrapper": "",
          style: {
            position: strategy,
            left: 0,
            top: 0,
            transform: isPlaced ? `translate3d(${Math.round(x2)}px, ${Math.round(y2)}px, 0)` : "translate3d(0, -200%, 0)",
            // keep off the page when measuring
            minWidth: "max-content",
            zIndex: contentZIndex,
            ["--radix-popper-transform-origin"]: [
              (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
              (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
            ].join(" ")
          },
          dir: props.dir
        }, /* @__PURE__ */ $50Iv9$react.createElement($34310caa050a8d63$var$PopperContentProvider, {
          scope: __scopePopper,
          placedSide,
          onArrowChange: setArrow,
          arrowX,
          arrowY,
          shouldHideArrow: cannotCenterArrow
        }, isRoot ? /* @__PURE__ */ $50Iv9$react.createElement($34310caa050a8d63$var$PositionContextProvider, {
          scope: __scopePopper,
          hasParent: true,
          positionUpdateFns
        }, /* @__PURE__ */ $50Iv9$react.createElement($50Iv9$radixuireactprimitive.Primitive.div, commonProps)) : /* @__PURE__ */ $50Iv9$react.createElement($50Iv9$radixuireactprimitive.Primitive.div, commonProps)));
      });
      var $34310caa050a8d63$var$ARROW_NAME = "PopperArrow";
      var $34310caa050a8d63$var$OPPOSITE_SIDE = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right"
      };
      var $34310caa050a8d63$export$79d62cd4e10a3fd0 = /* @__PURE__ */ $50Iv9$react.forwardRef(function $34310caa050a8d63$export$79d62cd4e10a3fd02(props, forwardedRef) {
        const _a2 = props, { __scopePopper } = _a2, arrowProps = __objRest(_a2, ["__scopePopper"]);
        const contentContext = $34310caa050a8d63$var$useContentContext($34310caa050a8d63$var$ARROW_NAME, __scopePopper);
        const baseSide = $34310caa050a8d63$var$OPPOSITE_SIDE[contentContext.placedSide];
        return (
          // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
          // doesn't report size as we'd expect on SVG elements.
          // it reports their bounding box which is effectively the largest path inside the SVG.
          /* @__PURE__ */ $50Iv9$react.createElement("span", {
            ref: contentContext.onArrowChange,
            style: {
              position: "absolute",
              left: contentContext.arrowX,
              top: contentContext.arrowY,
              [baseSide]: 0,
              transformOrigin: {
                top: "",
                right: "0 0",
                bottom: "center 0",
                left: "100% 0"
              }[contentContext.placedSide],
              transform: {
                top: "translateY(100%)",
                right: "translateY(50%) rotate(90deg) translateX(-50%)",
                bottom: `rotate(180deg)`,
                left: "translateY(50%) rotate(-90deg) translateX(50%)"
              }[contentContext.placedSide],
              visibility: contentContext.shouldHideArrow ? "hidden" : void 0
            }
          }, /* @__PURE__ */ $50Iv9$react.createElement($50Iv9$radixuireactarrow.Root, $parcel$interopDefault($50Iv9$babelruntimehelpersextends)({}, arrowProps, {
            ref: forwardedRef,
            style: __spreadProps(__spreadValues({}, arrowProps.style), {
              // ensures the element can be measured correctly (mostly for if SVG)
              display: "block"
            })
          })))
        );
      });
      function $34310caa050a8d63$var$isDefined(value) {
        return value !== void 0;
      }
      function $34310caa050a8d63$var$isNotNull(value) {
        return value !== null;
      }
      var $34310caa050a8d63$var$anchorCssProperties = () => ({
        name: "anchorCssProperties",
        fn(data) {
          const { rects, elements } = data;
          const { width, height } = rects.reference;
          elements.floating.style.setProperty("--radix-popper-anchor-width", `${width}px`);
          elements.floating.style.setProperty("--radix-popper-anchor-height", `${height}px`);
          return {};
        }
      });
      var $34310caa050a8d63$var$transformOrigin = (options) => ({
        name: "transformOrigin",
        options,
        fn(data) {
          var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
          const { placement, rects, middlewareData } = data;
          const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
          const isArrowHidden = cannotCenterArrow;
          const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
          const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
          const [placedSide, placedAlign] = $34310caa050a8d63$var$getSideAndAlignFromPlacement(placement);
          const noArrowAlign = {
            start: "0%",
            center: "50%",
            end: "100%"
          }[placedAlign];
          const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
          const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
          let x2 = "";
          let y2 = "";
          if (placedSide === "bottom") {
            x2 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
            y2 = `${-arrowHeight}px`;
          } else if (placedSide === "top") {
            x2 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
            y2 = `${rects.floating.height + arrowHeight}px`;
          } else if (placedSide === "right") {
            x2 = `${-arrowHeight}px`;
            y2 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
          } else if (placedSide === "left") {
            x2 = `${rects.floating.width + arrowHeight}px`;
            y2 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
          }
          return {
            data: {
              x: x2,
              y: y2
            }
          };
        }
      });
      function $34310caa050a8d63$var$getSideAndAlignFromPlacement(placement) {
        const [side, align = "center"] = placement.split("-");
        return [
          side,
          align
        ];
      }
      var $34310caa050a8d63$export$be92b6f5f03c0fe9 = $34310caa050a8d63$export$badac9ada3a0bdf9;
      var $34310caa050a8d63$export$b688253958b8dfe7 = $34310caa050a8d63$export$ecd4e1ccab6ed6d;
      var $34310caa050a8d63$export$7c6e2c02157bb7d2 = $34310caa050a8d63$export$bc4ae5855d3c4fc;
      var $34310caa050a8d63$export$21b07c8f274aebd5 = $34310caa050a8d63$export$79d62cd4e10a3fd0;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-portal/dist/index.js
  var require_dist28 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-portal/dist/index.js"(exports, module) {
      var $amzHf$babelruntimehelpersextends = require_extends();
      var $amzHf$react = require_react();
      var $amzHf$reactdom = require_react_dom();
      var $amzHf$radixuireactprimitive = require_dist20();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "Portal", () => $913a70b877676c16$export$602eac185826482c);
      $parcel$export(module.exports, "Root", () => $913a70b877676c16$export$be92b6f5f03c0fe9);
      var $913a70b877676c16$export$602eac185826482c = /* @__PURE__ */ $amzHf$react.forwardRef((props, forwardedRef) => {
        var _globalThis$document;
        const _a2 = props, { container = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body } = _a2, portalProps = __objRest(_a2, ["container"]);
        return container ? /* @__PURE__ */ $parcel$interopDefault($amzHf$reactdom).createPortal(/* @__PURE__ */ $amzHf$react.createElement($amzHf$radixuireactprimitive.Primitive.div, $parcel$interopDefault($amzHf$babelruntimehelpersextends)({}, portalProps, {
          ref: forwardedRef
        })), container) : null;
      });
      var $913a70b877676c16$export$be92b6f5f03c0fe9 = $913a70b877676c16$export$602eac185826482c;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-roving-focus/dist/index.js
  var require_dist29 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-roving-focus/dist/index.js"(exports, module) {
      var $9QJ9Y$babelruntimehelpersextends = require_extends();
      var $9QJ9Y$react = require_react();
      var $9QJ9Y$radixuiprimitive = require_dist();
      var $9QJ9Y$radixuireactcollection = require_dist21();
      var $9QJ9Y$radixuireactcomposerefs = require_dist2();
      var $9QJ9Y$radixuireactcontext = require_dist3();
      var $9QJ9Y$radixuireactid = require_dist10();
      var $9QJ9Y$radixuireactprimitive = require_dist20();
      var $9QJ9Y$radixuireactusecallbackref = require_dist6();
      var $9QJ9Y$radixuireactusecontrollablestate = require_dist16();
      var $9QJ9Y$radixuireactdirection = require_dist22();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "createRovingFocusGroupScope", () => $0063afae63b3fa70$export$c7109489551a4f4);
      $parcel$export(module.exports, "RovingFocusGroup", () => $0063afae63b3fa70$export$8699f7c8af148338);
      $parcel$export(module.exports, "RovingFocusGroupItem", () => $0063afae63b3fa70$export$ab9df7c53fe8454);
      $parcel$export(module.exports, "Root", () => $0063afae63b3fa70$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Item", () => $0063afae63b3fa70$export$6d08773d2e66f8f2);
      var $0063afae63b3fa70$var$ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
      var $0063afae63b3fa70$var$EVENT_OPTIONS = {
        bubbles: false,
        cancelable: true
      };
      var $0063afae63b3fa70$var$GROUP_NAME = "RovingFocusGroup";
      var [$0063afae63b3fa70$var$Collection, $0063afae63b3fa70$var$useCollection, $0063afae63b3fa70$var$createCollectionScope] = $9QJ9Y$radixuireactcollection.createCollection($0063afae63b3fa70$var$GROUP_NAME);
      var [$0063afae63b3fa70$var$createRovingFocusGroupContext, $0063afae63b3fa70$export$c7109489551a4f4] = $9QJ9Y$radixuireactcontext.createContextScope($0063afae63b3fa70$var$GROUP_NAME, [
        $0063afae63b3fa70$var$createCollectionScope
      ]);
      var [$0063afae63b3fa70$var$RovingFocusProvider, $0063afae63b3fa70$var$useRovingFocusContext] = $0063afae63b3fa70$var$createRovingFocusGroupContext($0063afae63b3fa70$var$GROUP_NAME);
      var $0063afae63b3fa70$export$8699f7c8af148338 = /* @__PURE__ */ $9QJ9Y$react.forwardRef((props, forwardedRef) => {
        return /* @__PURE__ */ $9QJ9Y$react.createElement($0063afae63b3fa70$var$Collection.Provider, {
          scope: props.__scopeRovingFocusGroup
        }, /* @__PURE__ */ $9QJ9Y$react.createElement($0063afae63b3fa70$var$Collection.Slot, {
          scope: props.__scopeRovingFocusGroup
        }, /* @__PURE__ */ $9QJ9Y$react.createElement($0063afae63b3fa70$var$RovingFocusGroupImpl, $parcel$interopDefault($9QJ9Y$babelruntimehelpersextends)({}, props, {
          ref: forwardedRef
        }))));
      });
      var $0063afae63b3fa70$var$RovingFocusGroupImpl = /* @__PURE__ */ $9QJ9Y$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeRovingFocusGroup, orientation, loop = false, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus } = _a2, groupProps = __objRest(_a2, ["__scopeRovingFocusGroup", "orientation", "loop", "dir", "currentTabStopId", "defaultCurrentTabStopId", "onCurrentTabStopIdChange", "onEntryFocus"]);
        const ref = $9QJ9Y$react.useRef(null);
        const composedRefs = $9QJ9Y$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        const direction = $9QJ9Y$radixuireactdirection.useDirection(dir);
        const [currentTabStopId = null, setCurrentTabStopId] = $9QJ9Y$radixuireactusecontrollablestate.useControllableState({
          prop: currentTabStopIdProp,
          defaultProp: defaultCurrentTabStopId,
          onChange: onCurrentTabStopIdChange
        });
        const [isTabbingBackOut, setIsTabbingBackOut] = $9QJ9Y$react.useState(false);
        const handleEntryFocus = $9QJ9Y$radixuireactusecallbackref.useCallbackRef(onEntryFocus);
        const getItems = $0063afae63b3fa70$var$useCollection(__scopeRovingFocusGroup);
        const isClickFocusRef = $9QJ9Y$react.useRef(false);
        const [focusableItemsCount, setFocusableItemsCount] = $9QJ9Y$react.useState(0);
        $9QJ9Y$react.useEffect(() => {
          const node = ref.current;
          if (node) {
            node.addEventListener($0063afae63b3fa70$var$ENTRY_FOCUS, handleEntryFocus);
            return () => node.removeEventListener($0063afae63b3fa70$var$ENTRY_FOCUS, handleEntryFocus);
          }
        }, [
          handleEntryFocus
        ]);
        return /* @__PURE__ */ $9QJ9Y$react.createElement($0063afae63b3fa70$var$RovingFocusProvider, {
          scope: __scopeRovingFocusGroup,
          orientation,
          dir: direction,
          loop,
          currentTabStopId,
          onItemFocus: $9QJ9Y$react.useCallback(
            (tabStopId) => setCurrentTabStopId(tabStopId),
            [
              setCurrentTabStopId
            ]
          ),
          onItemShiftTab: $9QJ9Y$react.useCallback(
            () => setIsTabbingBackOut(true),
            []
          ),
          onFocusableItemAdd: $9QJ9Y$react.useCallback(
            () => setFocusableItemsCount(
              (prevCount) => prevCount + 1
            ),
            []
          ),
          onFocusableItemRemove: $9QJ9Y$react.useCallback(
            () => setFocusableItemsCount(
              (prevCount) => prevCount - 1
            ),
            []
          )
        }, /* @__PURE__ */ $9QJ9Y$react.createElement($9QJ9Y$radixuireactprimitive.Primitive.div, $parcel$interopDefault($9QJ9Y$babelruntimehelpersextends)({
          tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
          "data-orientation": orientation
        }, groupProps, {
          ref: composedRefs,
          style: __spreadValues({
            outline: "none"
          }, props.style),
          onMouseDown: $9QJ9Y$radixuiprimitive.composeEventHandlers(props.onMouseDown, () => {
            isClickFocusRef.current = true;
          }),
          onFocus: $9QJ9Y$radixuiprimitive.composeEventHandlers(props.onFocus, (event) => {
            const isKeyboardFocus = !isClickFocusRef.current;
            if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
              const entryFocusEvent = new CustomEvent($0063afae63b3fa70$var$ENTRY_FOCUS, $0063afae63b3fa70$var$EVENT_OPTIONS);
              event.currentTarget.dispatchEvent(entryFocusEvent);
              if (!entryFocusEvent.defaultPrevented) {
                const items = getItems().filter(
                  (item) => item.focusable
                );
                const activeItem = items.find(
                  (item) => item.active
                );
                const currentItem = items.find(
                  (item) => item.id === currentTabStopId
                );
                const candidateItems = [
                  activeItem,
                  currentItem,
                  ...items
                ].filter(Boolean);
                const candidateNodes = candidateItems.map(
                  (item) => item.ref.current
                );
                $0063afae63b3fa70$var$focusFirst(candidateNodes);
              }
            }
            isClickFocusRef.current = false;
          }),
          onBlur: $9QJ9Y$radixuiprimitive.composeEventHandlers(
            props.onBlur,
            () => setIsTabbingBackOut(false)
          )
        })));
      });
      var $0063afae63b3fa70$var$ITEM_NAME = "RovingFocusGroupItem";
      var $0063afae63b3fa70$export$ab9df7c53fe8454 = /* @__PURE__ */ $9QJ9Y$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeRovingFocusGroup, focusable = true, active = false, tabStopId } = _a2, itemProps = __objRest(_a2, ["__scopeRovingFocusGroup", "focusable", "active", "tabStopId"]);
        const autoId = $9QJ9Y$radixuireactid.useId();
        const id = tabStopId || autoId;
        const context = $0063afae63b3fa70$var$useRovingFocusContext($0063afae63b3fa70$var$ITEM_NAME, __scopeRovingFocusGroup);
        const isCurrentTabStop = context.currentTabStopId === id;
        const getItems = $0063afae63b3fa70$var$useCollection(__scopeRovingFocusGroup);
        const { onFocusableItemAdd, onFocusableItemRemove } = context;
        $9QJ9Y$react.useEffect(() => {
          if (focusable) {
            onFocusableItemAdd();
            return () => onFocusableItemRemove();
          }
        }, [
          focusable,
          onFocusableItemAdd,
          onFocusableItemRemove
        ]);
        return /* @__PURE__ */ $9QJ9Y$react.createElement($0063afae63b3fa70$var$Collection.ItemSlot, {
          scope: __scopeRovingFocusGroup,
          id,
          focusable,
          active
        }, /* @__PURE__ */ $9QJ9Y$react.createElement($9QJ9Y$radixuireactprimitive.Primitive.span, $parcel$interopDefault($9QJ9Y$babelruntimehelpersextends)({
          tabIndex: isCurrentTabStop ? 0 : -1,
          "data-orientation": context.orientation
        }, itemProps, {
          ref: forwardedRef,
          onMouseDown: $9QJ9Y$radixuiprimitive.composeEventHandlers(props.onMouseDown, (event) => {
            if (!focusable)
              event.preventDefault();
            else
              context.onItemFocus(id);
          }),
          onFocus: $9QJ9Y$radixuiprimitive.composeEventHandlers(
            props.onFocus,
            () => context.onItemFocus(id)
          ),
          onKeyDown: $9QJ9Y$radixuiprimitive.composeEventHandlers(props.onKeyDown, (event) => {
            if (event.key === "Tab" && event.shiftKey) {
              context.onItemShiftTab();
              return;
            }
            if (event.target !== event.currentTarget)
              return;
            const focusIntent = $0063afae63b3fa70$var$getFocusIntent(event, context.orientation, context.dir);
            if (focusIntent !== void 0) {
              event.preventDefault();
              const items = getItems().filter(
                (item) => item.focusable
              );
              let candidateNodes = items.map(
                (item) => item.ref.current
              );
              if (focusIntent === "last")
                candidateNodes.reverse();
              else if (focusIntent === "prev" || focusIntent === "next") {
                if (focusIntent === "prev")
                  candidateNodes.reverse();
                const currentIndex = candidateNodes.indexOf(event.currentTarget);
                candidateNodes = context.loop ? $0063afae63b3fa70$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
              }
              setTimeout(
                () => $0063afae63b3fa70$var$focusFirst(candidateNodes)
              );
            }
          })
        })));
      });
      var $0063afae63b3fa70$var$MAP_KEY_TO_FOCUS_INTENT = {
        ArrowLeft: "prev",
        ArrowUp: "prev",
        ArrowRight: "next",
        ArrowDown: "next",
        PageUp: "first",
        Home: "first",
        PageDown: "last",
        End: "last"
      };
      function $0063afae63b3fa70$var$getDirectionAwareKey(key, dir) {
        if (dir !== "rtl")
          return key;
        return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
      }
      function $0063afae63b3fa70$var$getFocusIntent(event, orientation, dir) {
        const key = $0063afae63b3fa70$var$getDirectionAwareKey(event.key, dir);
        if (orientation === "vertical" && [
          "ArrowLeft",
          "ArrowRight"
        ].includes(key))
          return void 0;
        if (orientation === "horizontal" && [
          "ArrowUp",
          "ArrowDown"
        ].includes(key))
          return void 0;
        return $0063afae63b3fa70$var$MAP_KEY_TO_FOCUS_INTENT[key];
      }
      function $0063afae63b3fa70$var$focusFirst(candidates) {
        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
        for (const candidate of candidates) {
          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
            return;
          candidate.focus();
          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
            return;
        }
      }
      function $0063afae63b3fa70$var$wrapArray(array, startIndex) {
        return array.map(
          (_, index2) => array[(startIndex + index2) % array.length]
        );
      }
      var $0063afae63b3fa70$export$be92b6f5f03c0fe9 = $0063afae63b3fa70$export$8699f7c8af148338;
      var $0063afae63b3fa70$export$6d08773d2e66f8f2 = $0063afae63b3fa70$export$ab9df7c53fe8454;
    }
  });

  // ../assets/node_modules/aria-hidden/dist/es5/index.js
  var require_es5 = __commonJS({
    "../assets/node_modules/aria-hidden/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.suppressOthers = exports.supportsInert = exports.inertOthers = exports.hideOthers = void 0;
      var getDefaultParent = function(originalTarget) {
        if (typeof document === "undefined") {
          return null;
        }
        var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
        return sampleTarget.ownerDocument.body;
      };
      var counterMap = /* @__PURE__ */ new WeakMap();
      var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      var markerMap = {};
      var lockCount = 0;
      var unwrapHost = function(node) {
        return node && (node.host || unwrapHost(node.parentNode));
      };
      var correctTargets = function(parent, targets) {
        return targets.map(function(target) {
          if (parent.contains(target)) {
            return target;
          }
          var correctedTarget = unwrapHost(target);
          if (correctedTarget && parent.contains(correctedTarget)) {
            return correctedTarget;
          }
          console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
          return null;
        }).filter(function(x2) {
          return Boolean(x2);
        });
      };
      var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
        var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
        if (!markerMap[markerName]) {
          markerMap[markerName] = /* @__PURE__ */ new WeakMap();
        }
        var markerCounter = markerMap[markerName];
        var hiddenNodes = [];
        var elementsToKeep = /* @__PURE__ */ new Set();
        var elementsToStop = new Set(targets);
        var keep = function(el) {
          if (!el || elementsToKeep.has(el)) {
            return;
          }
          elementsToKeep.add(el);
          keep(el.parentNode);
        };
        targets.forEach(keep);
        var deep = function(parent) {
          if (!parent || elementsToStop.has(parent)) {
            return;
          }
          Array.prototype.forEach.call(parent.children, function(node) {
            if (elementsToKeep.has(node)) {
              deep(node);
            } else {
              var attr = node.getAttribute(controlAttribute);
              var alreadyHidden = attr !== null && attr !== "false";
              var counterValue = (counterMap.get(node) || 0) + 1;
              var markerValue = (markerCounter.get(node) || 0) + 1;
              counterMap.set(node, counterValue);
              markerCounter.set(node, markerValue);
              hiddenNodes.push(node);
              if (counterValue === 1 && alreadyHidden) {
                uncontrolledNodes.set(node, true);
              }
              if (markerValue === 1) {
                node.setAttribute(markerName, "true");
              }
              if (!alreadyHidden) {
                node.setAttribute(controlAttribute, "true");
              }
            }
          });
        };
        deep(parentNode);
        elementsToKeep.clear();
        lockCount++;
        return function() {
          hiddenNodes.forEach(function(node) {
            var counterValue = counterMap.get(node) - 1;
            var markerValue = markerCounter.get(node) - 1;
            counterMap.set(node, counterValue);
            markerCounter.set(node, markerValue);
            if (!counterValue) {
              if (!uncontrolledNodes.has(node)) {
                node.removeAttribute(controlAttribute);
              }
              uncontrolledNodes.delete(node);
            }
            if (!markerValue) {
              node.removeAttribute(markerName);
            }
          });
          lockCount--;
          if (!lockCount) {
            counterMap = /* @__PURE__ */ new WeakMap();
            counterMap = /* @__PURE__ */ new WeakMap();
            uncontrolledNodes = /* @__PURE__ */ new WeakMap();
            markerMap = {};
          }
        };
      };
      var hideOthers = function(originalTarget, parentNode, markerName) {
        if (markerName === void 0) {
          markerName = "data-aria-hidden";
        }
        var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
        var activeParentNode = parentNode || getDefaultParent(originalTarget);
        if (!activeParentNode) {
          return function() {
            return null;
          };
        }
        targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
        return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
      };
      exports.hideOthers = hideOthers;
      var inertOthers = function(originalTarget, parentNode, markerName) {
        if (markerName === void 0) {
          markerName = "data-inert-ed";
        }
        var activeParentNode = parentNode || getDefaultParent(originalTarget);
        if (!activeParentNode) {
          return function() {
            return null;
          };
        }
        return applyAttributeToOthers(originalTarget, activeParentNode, markerName, "inert");
      };
      exports.inertOthers = inertOthers;
      var supportsInert = function() {
        return typeof HTMLElement !== "undefined" && HTMLElement.prototype.hasOwnProperty("inert");
      };
      exports.supportsInert = supportsInert;
      var suppressOthers = function(originalTarget, parentNode, markerName) {
        if (markerName === void 0) {
          markerName = "data-suppressed";
        }
        return ((0, exports.supportsInert)() ? exports.inertOthers : exports.hideOthers)(originalTarget, parentNode, markerName);
      };
      exports.suppressOthers = suppressOthers;
    }
  });

  // ../assets/node_modules/tslib/tslib.es6.js
  var tslib_es6_exports = {};
  __export(tslib_es6_exports, {
    __assign: () => __assign,
    __asyncDelegator: () => __asyncDelegator,
    __asyncGenerator: () => __asyncGenerator,
    __asyncValues: () => __asyncValues,
    __await: () => __await,
    __awaiter: () => __awaiter,
    __classPrivateFieldGet: () => __classPrivateFieldGet,
    __classPrivateFieldIn: () => __classPrivateFieldIn,
    __classPrivateFieldSet: () => __classPrivateFieldSet,
    __createBinding: () => __createBinding,
    __decorate: () => __decorate,
    __exportStar: () => __exportStar,
    __extends: () => __extends,
    __generator: () => __generator,
    __importDefault: () => __importDefault,
    __importStar: () => __importStar,
    __makeTemplateObject: () => __makeTemplateObject,
    __metadata: () => __metadata,
    __param: () => __param,
    __read: () => __read,
    __rest: () => __rest,
    __spread: () => __spread,
    __spreadArray: () => __spreadArray,
    __spreadArrays: () => __spreadArrays,
    __values: () => __values
  });
  function __extends(d2, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  }
  function __rest(s2, e2) {
    var t2 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
        t2[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
        if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
          t2[p2[i2]] = s2[p2[i2]];
      }
    return t2;
  }
  function __decorate(decorators, target, key, desc) {
    var c3 = arguments.length, r2 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r2 = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i2 = decorators.length - 1; i2 >= 0; i2--)
        if (d2 = decorators[i2])
          r2 = (c3 < 3 ? d2(r2) : c3 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
    return c3 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
  }
  function __param(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  }
  function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject2) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject2(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject2(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t2[0] & 1)
        throw t2[1];
      return t2[1];
    }, trys: [], ops: [] }, f2, y2, t2, g2;
    return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n2) {
      return function(v2) {
        return step([n2, v2]);
      };
    }
    function step(op) {
      if (f2)
        throw new TypeError("Generator is already executing.");
      while (g2 && (g2 = 0, op[0] && (_ = 0)), _)
        try {
          if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
            return t2;
          if (y2 = 0, t2)
            op = [op[0] & 2, t2.value];
          switch (op[0]) {
            case 0:
            case 1:
              t2 = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y2 = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t2[1]) {
                _.label = t2[1];
                t2 = op;
                break;
              }
              if (t2 && _.label < t2[2]) {
                _.label = t2[2];
                _.ops.push(op);
                break;
              }
              if (t2[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e2) {
          op = [6, e2];
          y2 = 0;
        } finally {
          f2 = t2 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __exportStar(m2, o2) {
    for (var p2 in m2)
      if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
        __createBinding(o2, m2, p2);
  }
  function __values(o2) {
    var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
    if (m2)
      return m2.call(o2);
    if (o2 && typeof o2.length === "number")
      return {
        next: function() {
          if (o2 && i2 >= o2.length)
            o2 = void 0;
          return { value: o2 && o2[i2++], done: !o2 };
        }
      };
    throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o2, n2) {
    var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
    if (!m2)
      return o2;
    var i2 = m2.call(o2), r2, ar = [], e2;
    try {
      while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
        ar.push(r2.value);
    } catch (error) {
      e2 = { error };
    } finally {
      try {
        if (r2 && !r2.done && (m2 = i2["return"]))
          m2.call(i2);
      } finally {
        if (e2)
          throw e2.error;
      }
    }
    return ar;
  }
  function __spread() {
    for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
      ar = ar.concat(__read(arguments[i2]));
    return ar;
  }
  function __spreadArrays() {
    for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
      s2 += arguments[i2].length;
    for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
      for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
        r2[k2] = a2[j2];
    return r2;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
        if (ar || !(i2 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i2);
          ar[i2] = from[i2];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await(v2) {
    return this instanceof __await ? (this.v = v2, this) : new __await(v2);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n2) {
      if (g2[n2])
        i2[n2] = function(v2) {
          return new Promise(function(a2, b2) {
            q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
          });
        };
    }
    function resume(n2, v2) {
      try {
        step(g2[n2](v2));
      } catch (e2) {
        settle(q2[0][3], e2);
      }
    }
    function step(r2) {
      r2.value instanceof __await ? Promise.resolve(r2.value.v).then(fulfill, reject2) : settle(q2[0][2], r2);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject2(value) {
      resume("throw", value);
    }
    function settle(f2, v2) {
      if (f2(v2), q2.shift(), q2.length)
        resume(q2[0][0], q2[0][1]);
    }
  }
  function __asyncDelegator(o2) {
    var i2, p2;
    return i2 = {}, verb("next"), verb("throw", function(e2) {
      throw e2;
    }), verb("return"), i2[Symbol.iterator] = function() {
      return this;
    }, i2;
    function verb(n2, f2) {
      i2[n2] = o2[n2] ? function(v2) {
        return (p2 = !p2) ? { value: __await(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
      } : f2;
    }
  }
  function __asyncValues(o2) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o2[Symbol.asyncIterator], i2;
    return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2);
    function verb(n2) {
      i2[n2] = o2[n2] && function(v2) {
        return new Promise(function(resolve, reject2) {
          v2 = o2[n2](v2), settle(resolve, reject2, v2.done, v2.value);
        });
      };
    }
    function settle(resolve, reject2, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve({ value: v3, done: d2 });
      }, reject2);
    }
  }
  function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", { value: raw });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  }
  function __importStar(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  }
  function __importDefault(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  }
  function __classPrivateFieldGet(receiver, state, kind, f2) {
    if (kind === "a" && !f2)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
  }
  function __classPrivateFieldSet(receiver, state, value, kind, f2) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f2)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
  }
  function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
      throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
  }
  var extendStatics, __assign, __createBinding, __setModuleDefault;
  var init_tslib_es6 = __esm({
    "../assets/node_modules/tslib/tslib.es6.js"() {
      extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      __assign = function() {
        __assign = Object.assign || function __assign2(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        return __assign.apply(this, arguments);
      };
      __createBinding = Object.create ? function(o2, m2, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        var desc = Object.getOwnPropertyDescriptor(m2, k2);
        if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m2[k2];
          } };
        }
        Object.defineProperty(o2, k22, desc);
      } : function(o2, m2, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        o2[k22] = m2[k2];
      };
      __setModuleDefault = Object.create ? function(o2, v2) {
        Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
      } : function(o2, v2) {
        o2["default"] = v2;
      };
    }
  });

  // ../assets/node_modules/react-remove-scroll-bar/dist/es5/constants.js
  var require_constants = __commonJS({
    "../assets/node_modules/react-remove-scroll-bar/dist/es5/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.removedBarSizeVariable = exports.noScrollbarsClassName = exports.fullWidthClassName = exports.zeroRightClassName = void 0;
      exports.zeroRightClassName = "right-scroll-bar-position";
      exports.fullWidthClassName = "width-before-scroll-bar";
      exports.noScrollbarsClassName = "with-scroll-bars-hidden";
      exports.removedBarSizeVariable = "--removed-body-scroll-bar-size";
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/assignRef.js
  var require_assignRef = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/assignRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assignRef = void 0;
      function assignRef(ref, value) {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
        return ref;
      }
      exports.assignRef = assignRef;
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/useRef.js
  var require_useRef = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/useRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useCallbackRef = void 0;
      var react_1 = require_react();
      function useCallbackRef(initialValue, callback) {
        var ref = (0, react_1.useState)(function() {
          return {
            // value
            value: initialValue,
            // last callback
            callback,
            // "memoized" public interface
            facade: {
              get current() {
                return ref.value;
              },
              set current(value) {
                var last = ref.value;
                if (last !== value) {
                  ref.value = value;
                  ref.callback(value, last);
                }
              }
            }
          };
        })[0];
        ref.callback = callback;
        return ref.facade;
      }
      exports.useCallbackRef = useCallbackRef;
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/createRef.js
  var require_createRef = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/createRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createCallbackRef = void 0;
      function createCallbackRef(callback) {
        var current = null;
        return {
          get current() {
            return current;
          },
          set current(value) {
            var last = current;
            if (last !== value) {
              current = value;
              callback(value, last);
            }
          }
        };
      }
      exports.createCallbackRef = createCallbackRef;
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/mergeRef.js
  var require_mergeRef = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/mergeRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mergeRefs = void 0;
      var assignRef_1 = require_assignRef();
      var createRef_1 = require_createRef();
      function mergeRefs(refs) {
        return (0, createRef_1.createCallbackRef)(function(newValue) {
          return refs.forEach(function(ref) {
            return (0, assignRef_1.assignRef)(ref, newValue);
          });
        });
      }
      exports.mergeRefs = mergeRefs;
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/useMergeRef.js
  var require_useMergeRef = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/useMergeRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useMergeRefs = void 0;
      var assignRef_1 = require_assignRef();
      var useRef_1 = require_useRef();
      function useMergeRefs(refs, defaultValue) {
        return (0, useRef_1.useCallbackRef)(defaultValue || null, function(newValue) {
          return refs.forEach(function(ref) {
            return (0, assignRef_1.assignRef)(ref, newValue);
          });
        });
      }
      exports.useMergeRefs = useMergeRefs;
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/useTransformRef.js
  var require_useTransformRef = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/useTransformRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useTransformRef = void 0;
      var assignRef_1 = require_assignRef();
      var useRef_1 = require_useRef();
      function useTransformRef(ref, transformer) {
        return (0, useRef_1.useCallbackRef)(null, function(value) {
          return (0, assignRef_1.assignRef)(ref, transformer(value));
        });
      }
      exports.useTransformRef = useTransformRef;
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/transformRef.js
  var require_transformRef = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/transformRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.transformRef = void 0;
      var assignRef_1 = require_assignRef();
      var createRef_1 = require_createRef();
      function transformRef(ref, transformer) {
        return (0, createRef_1.createCallbackRef)(function(value) {
          return (0, assignRef_1.assignRef)(ref, transformer(value));
        });
      }
      exports.transformRef = transformRef;
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/refToCallback.js
  var require_refToCallback = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/refToCallback.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useRefToCallback = exports.refToCallback = void 0;
      function refToCallback(ref) {
        return function(newValue) {
          if (typeof ref === "function") {
            ref(newValue);
          } else if (ref) {
            ref.current = newValue;
          }
        };
      }
      exports.refToCallback = refToCallback;
      var nullCallback = function() {
        return null;
      };
      var weakMem = /* @__PURE__ */ new WeakMap();
      var weakMemoize = function(ref) {
        var usedRef = ref || nullCallback;
        var storedRef = weakMem.get(usedRef);
        if (storedRef) {
          return storedRef;
        }
        var cb = refToCallback(usedRef);
        weakMem.set(usedRef, cb);
        return cb;
      };
      function useRefToCallback(ref) {
        return weakMemoize(ref);
      }
      exports.useRefToCallback = useRefToCallback;
    }
  });

  // ../assets/node_modules/use-callback-ref/dist/es5/index.js
  var require_es52 = __commonJS({
    "../assets/node_modules/use-callback-ref/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useRefToCallback = exports.refToCallback = exports.transformRef = exports.useTransformRef = exports.useMergeRefs = exports.mergeRefs = exports.createCallbackRef = exports.useCallbackRef = exports.assignRef = void 0;
      var assignRef_1 = require_assignRef();
      Object.defineProperty(exports, "assignRef", { enumerable: true, get: function() {
        return assignRef_1.assignRef;
      } });
      var useRef_1 = require_useRef();
      Object.defineProperty(exports, "useCallbackRef", { enumerable: true, get: function() {
        return useRef_1.useCallbackRef;
      } });
      var createRef_1 = require_createRef();
      Object.defineProperty(exports, "createCallbackRef", { enumerable: true, get: function() {
        return createRef_1.createCallbackRef;
      } });
      var mergeRef_1 = require_mergeRef();
      Object.defineProperty(exports, "mergeRefs", { enumerable: true, get: function() {
        return mergeRef_1.mergeRefs;
      } });
      var useMergeRef_1 = require_useMergeRef();
      Object.defineProperty(exports, "useMergeRefs", { enumerable: true, get: function() {
        return useMergeRef_1.useMergeRefs;
      } });
      var useTransformRef_1 = require_useTransformRef();
      Object.defineProperty(exports, "useTransformRef", { enumerable: true, get: function() {
        return useTransformRef_1.useTransformRef;
      } });
      var transformRef_1 = require_transformRef();
      Object.defineProperty(exports, "transformRef", { enumerable: true, get: function() {
        return transformRef_1.transformRef;
      } });
      var refToCallback_1 = require_refToCallback();
      Object.defineProperty(exports, "refToCallback", { enumerable: true, get: function() {
        return refToCallback_1.refToCallback;
      } });
      Object.defineProperty(exports, "useRefToCallback", { enumerable: true, get: function() {
        return refToCallback_1.useRefToCallback;
      } });
    }
  });

  // ../assets/node_modules/detect-node-es/es5/node.js
  var require_node = __commonJS({
    "../assets/node_modules/detect-node-es/es5/node.js"(exports, module) {
      module.exports.isNode = Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]";
    }
  });

  // ../assets/node_modules/use-sidecar/dist/es5/env.js
  var require_env = __commonJS({
    "../assets/node_modules/use-sidecar/dist/es5/env.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.env = void 0;
      var detect_node_es_1 = require_node();
      exports.env = {
        isNode: detect_node_es_1.isNode,
        forceCache: false
      };
    }
  });

  // ../assets/node_modules/use-sidecar/dist/es5/hook.js
  var require_hook = __commonJS({
    "../assets/node_modules/use-sidecar/dist/es5/hook.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useSidecar = void 0;
      var react_1 = require_react();
      var env_1 = require_env();
      var cache = /* @__PURE__ */ new WeakMap();
      var NO_OPTIONS = {};
      function useSidecar(importer, effect) {
        var options = effect && effect.options || NO_OPTIONS;
        if (env_1.env.isNode && !options.ssr) {
          return [null, null];
        }
        return useRealSidecar(importer, effect);
      }
      exports.useSidecar = useSidecar;
      function useRealSidecar(importer, effect) {
        var options = effect && effect.options || NO_OPTIONS;
        var couldUseCache = env_1.env.forceCache || env_1.env.isNode && !!options.ssr || !options.async;
        var _a2 = (0, react_1.useState)(couldUseCache ? function() {
          return cache.get(importer);
        } : void 0), Car = _a2[0], setCar = _a2[1];
        var _b = (0, react_1.useState)(null), error = _b[0], setError = _b[1];
        (0, react_1.useEffect)(function() {
          if (!Car) {
            importer().then(function(car) {
              var resolved = effect ? effect.read() : car.default || car;
              if (!resolved) {
                console.error("Sidecar error: with importer", importer);
                var error_1;
                if (effect) {
                  console.error("Sidecar error: with medium", effect);
                  error_1 = new Error("Sidecar medium was not found");
                } else {
                  error_1 = new Error("Sidecar was not found in exports");
                }
                setError(function() {
                  return error_1;
                });
                throw error_1;
              }
              cache.set(importer, resolved);
              setCar(function() {
                return resolved;
              });
            }, function(e2) {
              return setError(function() {
                return e2;
              });
            });
          }
        }, []);
        return [Car, error];
      }
    }
  });

  // ../assets/node_modules/use-sidecar/dist/es5/hoc.js
  var require_hoc = __commonJS({
    "../assets/node_modules/use-sidecar/dist/es5/hoc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sidecar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React7 = tslib_1.__importStar(require_react());
      var hook_1 = require_hook();
      function sidecar(importer, errorComponent) {
        var ErrorCase = function() {
          return errorComponent;
        };
        return function Sidecar(props) {
          var _a2 = (0, hook_1.useSidecar)(importer, props.sideCar), Car = _a2[0], error = _a2[1];
          if (error && errorComponent) {
            return ErrorCase;
          }
          return Car ? React7.createElement(Car, tslib_1.__assign({}, props)) : null;
        };
      }
      exports.sidecar = sidecar;
    }
  });

  // ../assets/node_modules/use-sidecar/dist/es5/config.js
  var require_config = __commonJS({
    "../assets/node_modules/use-sidecar/dist/es5/config.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.setConfig = exports.config = void 0;
      exports.config = {
        onError: function(e2) {
          return console.error(e2);
        }
      };
      var setConfig = function(conf) {
        Object.assign(exports.config, conf);
      };
      exports.setConfig = setConfig;
    }
  });

  // ../assets/node_modules/use-sidecar/dist/es5/medium.js
  var require_medium = __commonJS({
    "../assets/node_modules/use-sidecar/dist/es5/medium.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createSidecarMedium = exports.createMedium = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      function ItoI(a2) {
        return a2;
      }
      function innerCreateMedium(defaults, middleware) {
        if (middleware === void 0) {
          middleware = ItoI;
        }
        var buffer = [];
        var assigned = false;
        var medium = {
          read: function() {
            if (assigned) {
              throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
            }
            if (buffer.length) {
              return buffer[buffer.length - 1];
            }
            return defaults;
          },
          useMedium: function(data) {
            var item = middleware(data, assigned);
            buffer.push(item);
            return function() {
              buffer = buffer.filter(function(x2) {
                return x2 !== item;
              });
            };
          },
          assignSyncMedium: function(cb) {
            assigned = true;
            while (buffer.length) {
              var cbs = buffer;
              buffer = [];
              cbs.forEach(cb);
            }
            buffer = {
              push: function(x2) {
                return cb(x2);
              },
              filter: function() {
                return buffer;
              }
            };
          },
          assignMedium: function(cb) {
            assigned = true;
            var pendingQueue = [];
            if (buffer.length) {
              var cbs = buffer;
              buffer = [];
              cbs.forEach(cb);
              pendingQueue = buffer;
            }
            var executeQueue = function() {
              var cbs2 = pendingQueue;
              pendingQueue = [];
              cbs2.forEach(cb);
            };
            var cycle = function() {
              return Promise.resolve().then(executeQueue);
            };
            cycle();
            buffer = {
              push: function(x2) {
                pendingQueue.push(x2);
                cycle();
              },
              filter: function(filter) {
                pendingQueue = pendingQueue.filter(filter);
                return buffer;
              }
            };
          }
        };
        return medium;
      }
      function createMedium(defaults, middleware) {
        if (middleware === void 0) {
          middleware = ItoI;
        }
        return innerCreateMedium(defaults, middleware);
      }
      exports.createMedium = createMedium;
      function createSidecarMedium(options) {
        if (options === void 0) {
          options = {};
        }
        var medium = innerCreateMedium(null);
        medium.options = tslib_1.__assign({ async: true, ssr: false }, options);
        return medium;
      }
      exports.createSidecarMedium = createSidecarMedium;
    }
  });

  // ../assets/node_modules/use-sidecar/dist/es5/renderProp.js
  var require_renderProp = __commonJS({
    "../assets/node_modules/use-sidecar/dist/es5/renderProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.renderCar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React7 = tslib_1.__importStar(require_react());
      var react_1 = require_react();
      function renderCar(WrappedComponent, defaults) {
        function State(_a2) {
          var stateRef = _a2.stateRef, props = _a2.props;
          var renderTarget = (0, react_1.useCallback)(function SideTarget() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            (0, react_1.useLayoutEffect)(function() {
              stateRef.current(args);
            });
            return null;
          }, []);
          return React7.createElement(WrappedComponent, tslib_1.__assign({}, props, { children: renderTarget }));
        }
        var Children = React7.memo(function(_a2) {
          var stateRef = _a2.stateRef, defaultState = _a2.defaultState, children = _a2.children;
          var _b = (0, react_1.useState)(defaultState.current), state = _b[0], setState = _b[1];
          (0, react_1.useEffect)(function() {
            stateRef.current = setState;
          }, []);
          return children.apply(void 0, state);
        }, function() {
          return true;
        });
        return function Combiner(props) {
          var defaultState = React7.useRef(defaults(props));
          var ref = React7.useRef(function(state) {
            return defaultState.current = state;
          });
          return React7.createElement(
            React7.Fragment,
            null,
            React7.createElement(State, { stateRef: ref, props }),
            React7.createElement(Children, { stateRef: ref, defaultState, children: props.children })
          );
        };
      }
      exports.renderCar = renderCar;
    }
  });

  // ../assets/node_modules/use-sidecar/dist/es5/exports.js
  var require_exports = __commonJS({
    "../assets/node_modules/use-sidecar/dist/es5/exports.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.exportSidecar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React7 = tslib_1.__importStar(require_react());
      var SideCar = function(_a2) {
        var sideCar = _a2.sideCar, rest = tslib_1.__rest(_a2, ["sideCar"]);
        if (!sideCar) {
          throw new Error("Sidecar: please provide `sideCar` property to import the right car");
        }
        var Target = sideCar.read();
        if (!Target) {
          throw new Error("Sidecar medium not found");
        }
        return React7.createElement(Target, tslib_1.__assign({}, rest));
      };
      SideCar.isSideCarExport = true;
      function exportSidecar(medium, exported) {
        medium.useMedium(exported);
        return SideCar;
      }
      exports.exportSidecar = exportSidecar;
    }
  });

  // ../assets/node_modules/use-sidecar/dist/es5/index.js
  var require_es53 = __commonJS({
    "../assets/node_modules/use-sidecar/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.exportSidecar = exports.renderCar = exports.createSidecarMedium = exports.createMedium = exports.setConfig = exports.useSidecar = exports.sidecar = void 0;
      var hoc_1 = require_hoc();
      Object.defineProperty(exports, "sidecar", { enumerable: true, get: function() {
        return hoc_1.sidecar;
      } });
      var hook_1 = require_hook();
      Object.defineProperty(exports, "useSidecar", { enumerable: true, get: function() {
        return hook_1.useSidecar;
      } });
      var config_1 = require_config();
      Object.defineProperty(exports, "setConfig", { enumerable: true, get: function() {
        return config_1.setConfig;
      } });
      var medium_1 = require_medium();
      Object.defineProperty(exports, "createMedium", { enumerable: true, get: function() {
        return medium_1.createMedium;
      } });
      Object.defineProperty(exports, "createSidecarMedium", { enumerable: true, get: function() {
        return medium_1.createSidecarMedium;
      } });
      var renderProp_1 = require_renderProp();
      Object.defineProperty(exports, "renderCar", { enumerable: true, get: function() {
        return renderProp_1.renderCar;
      } });
      var exports_1 = require_exports();
      Object.defineProperty(exports, "exportSidecar", { enumerable: true, get: function() {
        return exports_1.exportSidecar;
      } });
    }
  });

  // ../assets/node_modules/react-remove-scroll/dist/es5/medium.js
  var require_medium2 = __commonJS({
    "../assets/node_modules/react-remove-scroll/dist/es5/medium.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.effectCar = void 0;
      var use_sidecar_1 = require_es53();
      exports.effectCar = (0, use_sidecar_1.createSidecarMedium)();
    }
  });

  // ../assets/node_modules/react-remove-scroll/dist/es5/UI.js
  var require_UI = __commonJS({
    "../assets/node_modules/react-remove-scroll/dist/es5/UI.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RemoveScroll = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React7 = tslib_1.__importStar(require_react());
      var constants_1 = require_constants();
      var use_callback_ref_1 = require_es52();
      var medium_1 = require_medium2();
      var nothing = function() {
        return;
      };
      var RemoveScroll = React7.forwardRef(function(props, parentRef) {
        var ref = React7.useRef(null);
        var _a2 = React7.useState({
          onScrollCapture: nothing,
          onWheelCapture: nothing,
          onTouchMoveCapture: nothing
        }), callbacks = _a2[0], setCallbacks = _a2[1];
        var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container3 = _b === void 0 ? "div" : _b, rest = tslib_1.__rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
        var SideCar = sideCar;
        var containerRef = (0, use_callback_ref_1.useMergeRefs)([ref, parentRef]);
        var containerProps = tslib_1.__assign(tslib_1.__assign({}, rest), callbacks);
        return React7.createElement(
          React7.Fragment,
          null,
          enabled && React7.createElement(SideCar, { sideCar: medium_1.effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }),
          forwardProps ? React7.cloneElement(React7.Children.only(children), tslib_1.__assign(tslib_1.__assign({}, containerProps), { ref: containerRef })) : React7.createElement(Container3, tslib_1.__assign({}, containerProps, { className, ref: containerRef }), children)
        );
      });
      exports.RemoveScroll = RemoveScroll;
      RemoveScroll.defaultProps = {
        enabled: true,
        removeScrollBar: true,
        inert: false
      };
      RemoveScroll.classNames = {
        fullWidth: constants_1.fullWidthClassName,
        zeroRight: constants_1.zeroRightClassName
      };
    }
  });

  // ../assets/node_modules/get-nonce/dist/es5/index.js
  var require_es54 = __commonJS({
    "../assets/node_modules/get-nonce/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var currentNonce;
      exports.setNonce = function(nonce) {
        currentNonce = nonce;
      };
      exports.getNonce = function() {
        if (currentNonce) {
          return currentNonce;
        }
        if (typeof __webpack_nonce__ !== "undefined") {
          return __webpack_nonce__;
        }
        return void 0;
      };
    }
  });

  // ../assets/node_modules/react-style-singleton/dist/es5/singleton.js
  var require_singleton = __commonJS({
    "../assets/node_modules/react-style-singleton/dist/es5/singleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.stylesheetSingleton = void 0;
      var get_nonce_1 = require_es54();
      function makeStyleTag() {
        if (!document)
          return null;
        var tag = document.createElement("style");
        tag.type = "text/css";
        var nonce = (0, get_nonce_1.getNonce)();
        if (nonce) {
          tag.setAttribute("nonce", nonce);
        }
        return tag;
      }
      function injectStyles(tag, css2) {
        if (tag.styleSheet) {
          tag.styleSheet.cssText = css2;
        } else {
          tag.appendChild(document.createTextNode(css2));
        }
      }
      function insertStyleTag(tag) {
        var head = document.head || document.getElementsByTagName("head")[0];
        head.appendChild(tag);
      }
      var stylesheetSingleton = function() {
        var counter = 0;
        var stylesheet = null;
        return {
          add: function(style) {
            if (counter == 0) {
              if (stylesheet = makeStyleTag()) {
                injectStyles(stylesheet, style);
                insertStyleTag(stylesheet);
              }
            }
            counter++;
          },
          remove: function() {
            counter--;
            if (!counter && stylesheet) {
              stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
              stylesheet = null;
            }
          }
        };
      };
      exports.stylesheetSingleton = stylesheetSingleton;
    }
  });

  // ../assets/node_modules/react-style-singleton/dist/es5/hook.js
  var require_hook2 = __commonJS({
    "../assets/node_modules/react-style-singleton/dist/es5/hook.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.styleHookSingleton = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React7 = tslib_1.__importStar(require_react());
      var singleton_1 = require_singleton();
      var styleHookSingleton = function() {
        var sheet = (0, singleton_1.stylesheetSingleton)();
        return function(styles, isDynamic) {
          React7.useEffect(function() {
            sheet.add(styles);
            return function() {
              sheet.remove();
            };
          }, [styles && isDynamic]);
        };
      };
      exports.styleHookSingleton = styleHookSingleton;
    }
  });

  // ../assets/node_modules/react-style-singleton/dist/es5/component.js
  var require_component = __commonJS({
    "../assets/node_modules/react-style-singleton/dist/es5/component.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.styleSingleton = void 0;
      var hook_1 = require_hook2();
      var styleSingleton = function() {
        var useStyle = (0, hook_1.styleHookSingleton)();
        var Sheet = function(_a2) {
          var styles = _a2.styles, dynamic = _a2.dynamic;
          useStyle(styles, dynamic);
          return null;
        };
        return Sheet;
      };
      exports.styleSingleton = styleSingleton;
    }
  });

  // ../assets/node_modules/react-style-singleton/dist/es5/index.js
  var require_es55 = __commonJS({
    "../assets/node_modules/react-style-singleton/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.styleHookSingleton = exports.stylesheetSingleton = exports.styleSingleton = void 0;
      var component_1 = require_component();
      Object.defineProperty(exports, "styleSingleton", { enumerable: true, get: function() {
        return component_1.styleSingleton;
      } });
      var singleton_1 = require_singleton();
      Object.defineProperty(exports, "stylesheetSingleton", { enumerable: true, get: function() {
        return singleton_1.stylesheetSingleton;
      } });
      var hook_1 = require_hook2();
      Object.defineProperty(exports, "styleHookSingleton", { enumerable: true, get: function() {
        return hook_1.styleHookSingleton;
      } });
    }
  });

  // ../assets/node_modules/react-remove-scroll-bar/dist/es5/utils.js
  var require_utils = __commonJS({
    "../assets/node_modules/react-remove-scroll-bar/dist/es5/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getGapWidth = exports.zeroGap = void 0;
      exports.zeroGap = {
        left: 0,
        top: 0,
        right: 0,
        gap: 0
      };
      var parse = function(x2) {
        return parseInt(x2 || "", 10) || 0;
      };
      var getOffset = function(gapMode) {
        var cs = window.getComputedStyle(document.body);
        var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
        var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
        var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
        return [parse(left), parse(top), parse(right)];
      };
      var getGapWidth = function(gapMode) {
        if (gapMode === void 0) {
          gapMode = "margin";
        }
        if (typeof window === "undefined") {
          return exports.zeroGap;
        }
        var offsets = getOffset(gapMode);
        var documentWidth = document.documentElement.clientWidth;
        var windowWidth = window.innerWidth;
        return {
          left: offsets[0],
          top: offsets[1],
          right: offsets[2],
          gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
        };
      };
      exports.getGapWidth = getGapWidth;
    }
  });

  // ../assets/node_modules/react-remove-scroll-bar/dist/es5/component.js
  var require_component2 = __commonJS({
    "../assets/node_modules/react-remove-scroll-bar/dist/es5/component.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RemoveScrollBar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React7 = tslib_1.__importStar(require_react());
      var react_style_singleton_1 = require_es55();
      var constants_1 = require_constants();
      var utils_1 = require_utils();
      var Style = (0, react_style_singleton_1.styleSingleton)();
      var getStyles = function(_a2, allowRelative, gapMode, important) {
        var left = _a2.left, top = _a2.top, right = _a2.right, gap = _a2.gap;
        if (gapMode === void 0) {
          gapMode = "margin";
        }
        return "\n  .".concat(constants_1.noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
          allowRelative && "position: relative ".concat(important, ";"),
          gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
          gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
        ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(constants_1.zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(constants_1.fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(constants_1.zeroRightClassName, " .").concat(constants_1.zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(constants_1.fullWidthClassName, " .").concat(constants_1.fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body {\n    ").concat(constants_1.removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
      };
      var RemoveScrollBar = function(props) {
        var noRelative = props.noRelative, noImportant = props.noImportant, _a2 = props.gapMode, gapMode = _a2 === void 0 ? "margin" : _a2;
        var gap = React7.useMemo(function() {
          return (0, utils_1.getGapWidth)(gapMode);
        }, [gapMode]);
        return React7.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
      };
      exports.RemoveScrollBar = RemoveScrollBar;
    }
  });

  // ../assets/node_modules/react-remove-scroll-bar/dist/es5/index.js
  var require_es56 = __commonJS({
    "../assets/node_modules/react-remove-scroll-bar/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getGapWidth = exports.removedBarSizeVariable = exports.noScrollbarsClassName = exports.fullWidthClassName = exports.zeroRightClassName = exports.RemoveScrollBar = void 0;
      var component_1 = require_component2();
      Object.defineProperty(exports, "RemoveScrollBar", { enumerable: true, get: function() {
        return component_1.RemoveScrollBar;
      } });
      var constants_1 = require_constants();
      Object.defineProperty(exports, "zeroRightClassName", { enumerable: true, get: function() {
        return constants_1.zeroRightClassName;
      } });
      Object.defineProperty(exports, "fullWidthClassName", { enumerable: true, get: function() {
        return constants_1.fullWidthClassName;
      } });
      Object.defineProperty(exports, "noScrollbarsClassName", { enumerable: true, get: function() {
        return constants_1.noScrollbarsClassName;
      } });
      Object.defineProperty(exports, "removedBarSizeVariable", { enumerable: true, get: function() {
        return constants_1.removedBarSizeVariable;
      } });
      var utils_1 = require_utils();
      Object.defineProperty(exports, "getGapWidth", { enumerable: true, get: function() {
        return utils_1.getGapWidth;
      } });
    }
  });

  // ../assets/node_modules/react-remove-scroll/dist/es5/aggresiveCapture.js
  var require_aggresiveCapture = __commonJS({
    "../assets/node_modules/react-remove-scroll/dist/es5/aggresiveCapture.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.nonPassive = void 0;
      var passiveSupported = false;
      if (typeof window !== "undefined") {
        try {
          options = Object.defineProperty({}, "passive", {
            get: function() {
              passiveSupported = true;
              return true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (err) {
          passiveSupported = false;
        }
      }
      var options;
      exports.nonPassive = passiveSupported ? { passive: false } : false;
    }
  });

  // ../assets/node_modules/react-remove-scroll/dist/es5/handleScroll.js
  var require_handleScroll = __commonJS({
    "../assets/node_modules/react-remove-scroll/dist/es5/handleScroll.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.handleScroll = exports.locationCouldBeScrolled = void 0;
      var alwaysContainsScroll = function(node) {
        return node.tagName === "TEXTAREA";
      };
      var elementCanBeScrolled = function(node, overflow) {
        var styles = window.getComputedStyle(node);
        return (
          // not-not-scrollable
          styles[overflow] !== "hidden" && // contains scroll inside self
          !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
        );
      };
      var elementCouldBeVScrolled = function(node) {
        return elementCanBeScrolled(node, "overflowY");
      };
      var elementCouldBeHScrolled = function(node) {
        return elementCanBeScrolled(node, "overflowX");
      };
      var locationCouldBeScrolled = function(axis, node) {
        var current = node;
        do {
          if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
            current = current.host;
          }
          var isScrollable = elementCouldBeScrolled(axis, current);
          if (isScrollable) {
            var _a2 = getScrollVariables(axis, current), s2 = _a2[1], d2 = _a2[2];
            if (s2 > d2) {
              return true;
            }
          }
          current = current.parentNode;
        } while (current && current !== document.body);
        return false;
      };
      exports.locationCouldBeScrolled = locationCouldBeScrolled;
      var getVScrollVariables = function(_a2) {
        var scrollTop = _a2.scrollTop, scrollHeight = _a2.scrollHeight, clientHeight = _a2.clientHeight;
        return [
          scrollTop,
          scrollHeight,
          clientHeight
        ];
      };
      var getHScrollVariables = function(_a2) {
        var scrollLeft = _a2.scrollLeft, scrollWidth = _a2.scrollWidth, clientWidth = _a2.clientWidth;
        return [
          scrollLeft,
          scrollWidth,
          clientWidth
        ];
      };
      var elementCouldBeScrolled = function(axis, node) {
        return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
      };
      var getScrollVariables = function(axis, node) {
        return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
      };
      var getDirectionFactor = function(axis, direction) {
        return axis === "h" && direction === "rtl" ? -1 : 1;
      };
      var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
        var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
        var delta = directionFactor * sourceDelta;
        var target = event.target;
        var targetInLock = endTarget.contains(target);
        var shouldCancelScroll = false;
        var isDeltaPositive = delta > 0;
        var availableScroll = 0;
        var availableScrollTop = 0;
        do {
          var _a2 = getScrollVariables(axis, target), position = _a2[0], scroll_1 = _a2[1], capacity = _a2[2];
          var elementScroll = scroll_1 - capacity - directionFactor * position;
          if (position || elementScroll) {
            if (elementCouldBeScrolled(axis, target)) {
              availableScroll += elementScroll;
              availableScrollTop += position;
            }
          }
          target = target.parentNode;
        } while (
          // portaled content
          !targetInLock && target !== document.body || // self content
          targetInLock && (endTarget.contains(target) || endTarget === target)
        );
        if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
          shouldCancelScroll = true;
        } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
          shouldCancelScroll = true;
        }
        return shouldCancelScroll;
      };
      exports.handleScroll = handleScroll;
    }
  });

  // ../assets/node_modules/react-remove-scroll/dist/es5/SideEffect.js
  var require_SideEffect = __commonJS({
    "../assets/node_modules/react-remove-scroll/dist/es5/SideEffect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RemoveScrollSideCar = exports.getDeltaXY = exports.getTouchXY = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React7 = tslib_1.__importStar(require_react());
      var react_remove_scroll_bar_1 = require_es56();
      var react_style_singleton_1 = require_es55();
      var aggresiveCapture_1 = require_aggresiveCapture();
      var handleScroll_1 = require_handleScroll();
      var getTouchXY = function(event) {
        return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
      };
      exports.getTouchXY = getTouchXY;
      var getDeltaXY = function(event) {
        return [event.deltaX, event.deltaY];
      };
      exports.getDeltaXY = getDeltaXY;
      var extractRef = function(ref) {
        return ref && "current" in ref ? ref.current : ref;
      };
      var deltaCompare = function(x2, y2) {
        return x2[0] === y2[0] && x2[1] === y2[1];
      };
      var generateStyle = function(id) {
        return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
      };
      var idCounter = 0;
      var lockStack = [];
      function RemoveScrollSideCar(props) {
        var shouldPreventQueue = React7.useRef([]);
        var touchStartRef = React7.useRef([0, 0]);
        var activeAxis = React7.useRef();
        var id = React7.useState(idCounter++)[0];
        var Style = React7.useState(function() {
          return (0, react_style_singleton_1.styleSingleton)();
        })[0];
        var lastProps = React7.useRef(props);
        React7.useEffect(function() {
          lastProps.current = props;
        }, [props]);
        React7.useEffect(function() {
          if (props.inert) {
            document.body.classList.add("block-interactivity-".concat(id));
            var allow_1 = tslib_1.__spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
            allow_1.forEach(function(el) {
              return el.classList.add("allow-interactivity-".concat(id));
            });
            return function() {
              document.body.classList.remove("block-interactivity-".concat(id));
              allow_1.forEach(function(el) {
                return el.classList.remove("allow-interactivity-".concat(id));
              });
            };
          }
          return;
        }, [props.inert, props.lockRef.current, props.shards]);
        var shouldCancelEvent = React7.useCallback(function(event, parent) {
          if ("touches" in event && event.touches.length === 2) {
            return !lastProps.current.allowPinchZoom;
          }
          var touch = (0, exports.getTouchXY)(event);
          var touchStart = touchStartRef.current;
          var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
          var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
          var currentAxis;
          var target = event.target;
          var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
          if ("touches" in event && moveDirection === "h" && target.type === "range") {
            return false;
          }
          var canBeScrolledInMainDirection = (0, handleScroll_1.locationCouldBeScrolled)(moveDirection, target);
          if (!canBeScrolledInMainDirection) {
            return true;
          }
          if (canBeScrolledInMainDirection) {
            currentAxis = moveDirection;
          } else {
            currentAxis = moveDirection === "v" ? "h" : "v";
            canBeScrolledInMainDirection = (0, handleScroll_1.locationCouldBeScrolled)(moveDirection, target);
          }
          if (!canBeScrolledInMainDirection) {
            return false;
          }
          if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
            activeAxis.current = currentAxis;
          }
          if (!currentAxis) {
            return true;
          }
          var cancelingAxis = activeAxis.current || currentAxis;
          return (0, handleScroll_1.handleScroll)(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
        }, []);
        var shouldPrevent = React7.useCallback(function(_event) {
          var event = _event;
          if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) {
            return;
          }
          var delta = "deltaY" in event ? (0, exports.getDeltaXY)(event) : (0, exports.getTouchXY)(event);
          var sourceEvent = shouldPreventQueue.current.filter(function(e2) {
            return e2.name === event.type && e2.target === event.target && deltaCompare(e2.delta, delta);
          })[0];
          if (sourceEvent && sourceEvent.should) {
            if (event.cancelable) {
              event.preventDefault();
            }
            return;
          }
          if (!sourceEvent) {
            var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
              return node.contains(event.target);
            });
            var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
            if (shouldStop) {
              if (event.cancelable) {
                event.preventDefault();
              }
            }
          }
        }, []);
        var shouldCancel = React7.useCallback(function(name, delta, target, should) {
          var event = { name, delta, target, should };
          shouldPreventQueue.current.push(event);
          setTimeout(function() {
            shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e2) {
              return e2 !== event;
            });
          }, 1);
        }, []);
        var scrollTouchStart = React7.useCallback(function(event) {
          touchStartRef.current = (0, exports.getTouchXY)(event);
          activeAxis.current = void 0;
        }, []);
        var scrollWheel = React7.useCallback(function(event) {
          shouldCancel(event.type, (0, exports.getDeltaXY)(event), event.target, shouldCancelEvent(event, props.lockRef.current));
        }, []);
        var scrollTouchMove = React7.useCallback(function(event) {
          shouldCancel(event.type, (0, exports.getTouchXY)(event), event.target, shouldCancelEvent(event, props.lockRef.current));
        }, []);
        React7.useEffect(function() {
          lockStack.push(Style);
          props.setCallbacks({
            onScrollCapture: scrollWheel,
            onWheelCapture: scrollWheel,
            onTouchMoveCapture: scrollTouchMove
          });
          document.addEventListener("wheel", shouldPrevent, aggresiveCapture_1.nonPassive);
          document.addEventListener("touchmove", shouldPrevent, aggresiveCapture_1.nonPassive);
          document.addEventListener("touchstart", scrollTouchStart, aggresiveCapture_1.nonPassive);
          return function() {
            lockStack = lockStack.filter(function(inst) {
              return inst !== Style;
            });
            document.removeEventListener("wheel", shouldPrevent, aggresiveCapture_1.nonPassive);
            document.removeEventListener("touchmove", shouldPrevent, aggresiveCapture_1.nonPassive);
            document.removeEventListener("touchstart", scrollTouchStart, aggresiveCapture_1.nonPassive);
          };
        }, []);
        var removeScrollBar = props.removeScrollBar, inert = props.inert;
        return React7.createElement(
          React7.Fragment,
          null,
          inert ? React7.createElement(Style, { styles: generateStyle(id) }) : null,
          removeScrollBar ? React7.createElement(react_remove_scroll_bar_1.RemoveScrollBar, { gapMode: "margin" }) : null
        );
      }
      exports.RemoveScrollSideCar = RemoveScrollSideCar;
    }
  });

  // ../assets/node_modules/react-remove-scroll/dist/es5/sidecar.js
  var require_sidecar = __commonJS({
    "../assets/node_modules/react-remove-scroll/dist/es5/sidecar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var use_sidecar_1 = require_es53();
      var SideEffect_1 = require_SideEffect();
      var medium_1 = require_medium2();
      exports.default = (0, use_sidecar_1.exportSidecar)(medium_1.effectCar, SideEffect_1.RemoveScrollSideCar);
    }
  });

  // ../assets/node_modules/react-remove-scroll/dist/es5/Combination.js
  var require_Combination = __commonJS({
    "../assets/node_modules/react-remove-scroll/dist/es5/Combination.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React7 = tslib_1.__importStar(require_react());
      var UI_1 = require_UI();
      var sidecar_1 = tslib_1.__importDefault(require_sidecar());
      var ReactRemoveScroll = React7.forwardRef(function(props, ref) {
        return React7.createElement(UI_1.RemoveScroll, tslib_1.__assign({}, props, { ref, sideCar: sidecar_1.default }));
      });
      ReactRemoveScroll.classNames = UI_1.RemoveScroll.classNames;
      exports.default = ReactRemoveScroll;
    }
  });

  // ../assets/node_modules/react-remove-scroll/dist/es5/index.js
  var require_es57 = __commonJS({
    "../assets/node_modules/react-remove-scroll/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RemoveScroll = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var Combination_1 = tslib_1.__importDefault(require_Combination());
      exports.RemoveScroll = Combination_1.default;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-menu/dist/index.js
  var require_dist30 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/node_modules/@radix-ui/react-menu/dist/index.js"(exports, module) {
      var $cnSS2$babelruntimehelpersextends = require_extends();
      var $cnSS2$react = require_react();
      var $cnSS2$radixuiprimitive = require_dist();
      var $cnSS2$radixuireactcollection = require_dist21();
      var $cnSS2$radixuireactcomposerefs = require_dist2();
      var $cnSS2$radixuireactcontext = require_dist3();
      var $cnSS2$radixuireactdirection = require_dist22();
      var $cnSS2$radixuireactdismissablelayer = require_dist23();
      var $cnSS2$radixuireactfocusguards = require_dist24();
      var $cnSS2$radixuireactfocusscope = require_dist25();
      var $cnSS2$radixuireactid = require_dist10();
      var $cnSS2$radixuireactpopper = require_dist27();
      var $cnSS2$radixuireactportal = require_dist28();
      var $cnSS2$radixuireactpresence = require_dist15();
      var $cnSS2$radixuireactprimitive = require_dist20();
      var $cnSS2$radixuireactrovingfocus = require_dist29();
      var $cnSS2$radixuireactslot = require_dist4();
      var $cnSS2$radixuireactusecallbackref = require_dist6();
      var $cnSS2$ariahidden = require_es5();
      var $cnSS2$reactremovescroll = require_es57();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "createMenuScope", () => $213e4d2df823067d$export$4027731b685e72eb);
      $parcel$export(module.exports, "Menu", () => $213e4d2df823067d$export$d9b273488cd8ce6f);
      $parcel$export(module.exports, "MenuAnchor", () => $213e4d2df823067d$export$9fa5ebd18bee4d43);
      $parcel$export(module.exports, "MenuPortal", () => $213e4d2df823067d$export$793392f970497feb);
      $parcel$export(module.exports, "MenuContent", () => $213e4d2df823067d$export$479f0f2f71193efe);
      $parcel$export(module.exports, "MenuGroup", () => $213e4d2df823067d$export$22a631d1f72787bb);
      $parcel$export(module.exports, "MenuLabel", () => $213e4d2df823067d$export$dd37bec0e8a99143);
      $parcel$export(module.exports, "MenuItem", () => $213e4d2df823067d$export$2ce376c2cc3355c8);
      $parcel$export(module.exports, "MenuCheckboxItem", () => $213e4d2df823067d$export$f6f243521332502d);
      $parcel$export(module.exports, "MenuRadioGroup", () => $213e4d2df823067d$export$ea2200c9eee416b3);
      $parcel$export(module.exports, "MenuRadioItem", () => $213e4d2df823067d$export$69bd225e9817f6d0);
      $parcel$export(module.exports, "MenuItemIndicator", () => $213e4d2df823067d$export$a2593e23056970a3);
      $parcel$export(module.exports, "MenuSeparator", () => $213e4d2df823067d$export$1cec7dcdd713e220);
      $parcel$export(module.exports, "MenuArrow", () => $213e4d2df823067d$export$bcdda4773debf5fa);
      $parcel$export(module.exports, "MenuSub", () => $213e4d2df823067d$export$71bdb9d1e2909932);
      $parcel$export(module.exports, "MenuSubTrigger", () => $213e4d2df823067d$export$5fbbb3ba7297405f);
      $parcel$export(module.exports, "MenuSubContent", () => $213e4d2df823067d$export$e7142ab31822bde6);
      $parcel$export(module.exports, "Root", () => $213e4d2df823067d$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Anchor", () => $213e4d2df823067d$export$b688253958b8dfe7);
      $parcel$export(module.exports, "Portal", () => $213e4d2df823067d$export$602eac185826482c);
      $parcel$export(module.exports, "Content", () => $213e4d2df823067d$export$7c6e2c02157bb7d2);
      $parcel$export(module.exports, "Group", () => $213e4d2df823067d$export$eb2fcfdbd7ba97d4);
      $parcel$export(module.exports, "Label", () => $213e4d2df823067d$export$b04be29aa201d4f5);
      $parcel$export(module.exports, "Item", () => $213e4d2df823067d$export$6d08773d2e66f8f2);
      $parcel$export(module.exports, "CheckboxItem", () => $213e4d2df823067d$export$16ce288f89fa631c);
      $parcel$export(module.exports, "RadioGroup", () => $213e4d2df823067d$export$a98f0dcb43a68a25);
      $parcel$export(module.exports, "RadioItem", () => $213e4d2df823067d$export$371ab307eab489c0);
      $parcel$export(module.exports, "ItemIndicator", () => $213e4d2df823067d$export$c3468e2714d175fa);
      $parcel$export(module.exports, "Separator", () => $213e4d2df823067d$export$1ff3c3f08ae963c0);
      $parcel$export(module.exports, "Arrow", () => $213e4d2df823067d$export$21b07c8f274aebd5);
      $parcel$export(module.exports, "Sub", () => $213e4d2df823067d$export$d7a01e11500dfb6f);
      $parcel$export(module.exports, "SubTrigger", () => $213e4d2df823067d$export$2ea8a7a591ac5eac);
      $parcel$export(module.exports, "SubContent", () => $213e4d2df823067d$export$6d4de93b380beddf);
      var $213e4d2df823067d$var$SELECTION_KEYS = [
        "Enter",
        " "
      ];
      var $213e4d2df823067d$var$FIRST_KEYS = [
        "ArrowDown",
        "PageUp",
        "Home"
      ];
      var $213e4d2df823067d$var$LAST_KEYS = [
        "ArrowUp",
        "PageDown",
        "End"
      ];
      var $213e4d2df823067d$var$FIRST_LAST_KEYS = [
        ...$213e4d2df823067d$var$FIRST_KEYS,
        ...$213e4d2df823067d$var$LAST_KEYS
      ];
      var $213e4d2df823067d$var$SUB_OPEN_KEYS = {
        ltr: [
          ...$213e4d2df823067d$var$SELECTION_KEYS,
          "ArrowRight"
        ],
        rtl: [
          ...$213e4d2df823067d$var$SELECTION_KEYS,
          "ArrowLeft"
        ]
      };
      var $213e4d2df823067d$var$SUB_CLOSE_KEYS = {
        ltr: [
          "ArrowLeft"
        ],
        rtl: [
          "ArrowRight"
        ]
      };
      var $213e4d2df823067d$var$MENU_NAME = "Menu";
      var [$213e4d2df823067d$var$Collection, $213e4d2df823067d$var$useCollection, $213e4d2df823067d$var$createCollectionScope] = $cnSS2$radixuireactcollection.createCollection($213e4d2df823067d$var$MENU_NAME);
      var [$213e4d2df823067d$var$createMenuContext, $213e4d2df823067d$export$4027731b685e72eb] = $cnSS2$radixuireactcontext.createContextScope($213e4d2df823067d$var$MENU_NAME, [
        $213e4d2df823067d$var$createCollectionScope,
        $cnSS2$radixuireactpopper.createPopperScope,
        $cnSS2$radixuireactrovingfocus.createRovingFocusGroupScope
      ]);
      var $213e4d2df823067d$var$usePopperScope = $cnSS2$radixuireactpopper.createPopperScope();
      var $213e4d2df823067d$var$useRovingFocusGroupScope = $cnSS2$radixuireactrovingfocus.createRovingFocusGroupScope();
      var [$213e4d2df823067d$var$MenuProvider, $213e4d2df823067d$var$useMenuContext] = $213e4d2df823067d$var$createMenuContext($213e4d2df823067d$var$MENU_NAME);
      var [$213e4d2df823067d$var$MenuRootProvider, $213e4d2df823067d$var$useMenuRootContext] = $213e4d2df823067d$var$createMenuContext($213e4d2df823067d$var$MENU_NAME);
      var $213e4d2df823067d$export$d9b273488cd8ce6f = (props) => {
        const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;
        const popperScope = $213e4d2df823067d$var$usePopperScope(__scopeMenu);
        const [content, setContent] = $cnSS2$react.useState(null);
        const isUsingKeyboardRef = $cnSS2$react.useRef(false);
        const handleOpenChange = $cnSS2$radixuireactusecallbackref.useCallbackRef(onOpenChange);
        const direction = $cnSS2$radixuireactdirection.useDirection(dir);
        $cnSS2$react.useEffect(() => {
          const handleKeyDown = () => {
            isUsingKeyboardRef.current = true;
            document.addEventListener("pointerdown", handlePointer, {
              capture: true,
              once: true
            });
            document.addEventListener("pointermove", handlePointer, {
              capture: true,
              once: true
            });
          };
          const handlePointer = () => isUsingKeyboardRef.current = false;
          document.addEventListener("keydown", handleKeyDown, {
            capture: true
          });
          return () => {
            document.removeEventListener("keydown", handleKeyDown, {
              capture: true
            });
            document.removeEventListener("pointerdown", handlePointer, {
              capture: true
            });
            document.removeEventListener("pointermove", handlePointer, {
              capture: true
            });
          };
        }, []);
        return /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpopper.Root, popperScope, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuProvider, {
          scope: __scopeMenu,
          open,
          onOpenChange: handleOpenChange,
          content,
          onContentChange: setContent
        }, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuRootProvider, {
          scope: __scopeMenu,
          onClose: $cnSS2$react.useCallback(
            () => handleOpenChange(false),
            [
              handleOpenChange
            ]
          ),
          isUsingKeyboardRef,
          dir: direction,
          modal
        }, children)));
      };
      var $213e4d2df823067d$export$9fa5ebd18bee4d43 = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeMenu } = _a2, anchorProps = __objRest(_a2, ["__scopeMenu"]);
        const popperScope = $213e4d2df823067d$var$usePopperScope(__scopeMenu);
        return /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpopper.Anchor, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, popperScope, anchorProps, {
          ref: forwardedRef
        }));
      });
      var $213e4d2df823067d$var$PORTAL_NAME = "MenuPortal";
      var [$213e4d2df823067d$var$PortalProvider, $213e4d2df823067d$var$usePortalContext] = $213e4d2df823067d$var$createMenuContext($213e4d2df823067d$var$PORTAL_NAME, {
        forceMount: void 0
      });
      var $213e4d2df823067d$export$793392f970497feb = (props) => {
        const { __scopeMenu, forceMount, children, container } = props;
        const context = $213e4d2df823067d$var$useMenuContext($213e4d2df823067d$var$PORTAL_NAME, __scopeMenu);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$PortalProvider, {
          scope: __scopeMenu,
          forceMount
        }, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpresence.Presence, {
          present: forceMount || context.open
        }, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactportal.Portal, {
          asChild: true,
          container
        }, children)));
      };
      var $213e4d2df823067d$var$CONTENT_NAME = "MenuContent";
      var [$213e4d2df823067d$var$MenuContentProvider, $213e4d2df823067d$var$useMenuContentContext] = $213e4d2df823067d$var$createMenuContext($213e4d2df823067d$var$CONTENT_NAME);
      var $213e4d2df823067d$export$479f0f2f71193efe = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const portalContext = $213e4d2df823067d$var$usePortalContext($213e4d2df823067d$var$CONTENT_NAME, props.__scopeMenu);
        const _a2 = props, { forceMount = portalContext.forceMount } = _a2, contentProps = __objRest(_a2, ["forceMount"]);
        const context = $213e4d2df823067d$var$useMenuContext($213e4d2df823067d$var$CONTENT_NAME, props.__scopeMenu);
        const rootContext = $213e4d2df823067d$var$useMenuRootContext($213e4d2df823067d$var$CONTENT_NAME, props.__scopeMenu);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$Collection.Provider, {
          scope: props.__scopeMenu
        }, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpresence.Presence, {
          present: forceMount || context.open
        }, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$Collection.Slot, {
          scope: props.__scopeMenu
        }, rootContext.modal ? /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuRootContentModal, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, contentProps, {
          ref: forwardedRef
        })) : /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuRootContentNonModal, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, contentProps, {
          ref: forwardedRef
        })))));
      });
      var $213e4d2df823067d$var$MenuRootContentModal = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const context = $213e4d2df823067d$var$useMenuContext($213e4d2df823067d$var$CONTENT_NAME, props.__scopeMenu);
        const ref = $cnSS2$react.useRef(null);
        const composedRefs = $cnSS2$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        $cnSS2$react.useEffect(() => {
          const content = ref.current;
          if (content)
            return $cnSS2$ariahidden.hideOthers(content);
        }, []);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuContentImpl, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, props, {
          ref: composedRefs,
          trapFocus: context.open,
          disableOutsidePointerEvents: context.open,
          disableOutsideScroll: true,
          onFocusOutside: $cnSS2$radixuiprimitive.composeEventHandlers(
            props.onFocusOutside,
            (event) => event.preventDefault(),
            {
              checkForDefaultPrevented: false
            }
          ),
          onDismiss: () => context.onOpenChange(false)
        }));
      });
      var $213e4d2df823067d$var$MenuRootContentNonModal = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const context = $213e4d2df823067d$var$useMenuContext($213e4d2df823067d$var$CONTENT_NAME, props.__scopeMenu);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuContentImpl, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, props, {
          ref: forwardedRef,
          trapFocus: false,
          disableOutsidePointerEvents: false,
          disableOutsideScroll: false,
          onDismiss: () => context.onOpenChange(false)
        }));
      });
      var $213e4d2df823067d$var$MenuContentImpl = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeMenu, loop = false, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEntryFocus, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, disableOutsideScroll } = _a2, contentProps = __objRest(_a2, ["__scopeMenu", "loop", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus", "disableOutsidePointerEvents", "onEntryFocus", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss", "disableOutsideScroll"]);
        const context = $213e4d2df823067d$var$useMenuContext($213e4d2df823067d$var$CONTENT_NAME, __scopeMenu);
        const rootContext = $213e4d2df823067d$var$useMenuRootContext($213e4d2df823067d$var$CONTENT_NAME, __scopeMenu);
        const popperScope = $213e4d2df823067d$var$usePopperScope(__scopeMenu);
        const rovingFocusGroupScope = $213e4d2df823067d$var$useRovingFocusGroupScope(__scopeMenu);
        const getItems = $213e4d2df823067d$var$useCollection(__scopeMenu);
        const [currentItemId, setCurrentItemId] = $cnSS2$react.useState(null);
        const contentRef = $cnSS2$react.useRef(null);
        const composedRefs = $cnSS2$radixuireactcomposerefs.useComposedRefs(forwardedRef, contentRef, context.onContentChange);
        const timerRef = $cnSS2$react.useRef(0);
        const searchRef = $cnSS2$react.useRef("");
        const pointerGraceTimerRef = $cnSS2$react.useRef(0);
        const pointerGraceIntentRef = $cnSS2$react.useRef(null);
        const pointerDirRef = $cnSS2$react.useRef("right");
        const lastPointerXRef = $cnSS2$react.useRef(0);
        const ScrollLockWrapper = disableOutsideScroll ? $cnSS2$reactremovescroll.RemoveScroll : $cnSS2$react.Fragment;
        const scrollLockWrapperProps = disableOutsideScroll ? {
          as: $cnSS2$radixuireactslot.Slot,
          allowPinchZoom: true
        } : void 0;
        const handleTypeaheadSearch = (key) => {
          var _items$find, _items$find2;
          const search = searchRef.current + key;
          const items = getItems().filter(
            (item) => !item.disabled
          );
          const currentItem = document.activeElement;
          const currentMatch = (_items$find = items.find(
            (item) => item.ref.current === currentItem
          )) === null || _items$find === void 0 ? void 0 : _items$find.textValue;
          const values = items.map(
            (item) => item.textValue
          );
          const nextMatch = $213e4d2df823067d$var$getNextMatch(values, search, currentMatch);
          const newItem = (_items$find2 = items.find(
            (item) => item.textValue === nextMatch
          )) === null || _items$find2 === void 0 ? void 0 : _items$find2.ref.current;
          (function updateSearch(value) {
            searchRef.current = value;
            window.clearTimeout(timerRef.current);
            if (value !== "")
              timerRef.current = window.setTimeout(
                () => updateSearch(""),
                1e3
              );
          })(search);
          if (newItem)
            setTimeout(
              () => newItem.focus()
            );
        };
        $cnSS2$react.useEffect(() => {
          return () => window.clearTimeout(timerRef.current);
        }, []);
        $cnSS2$radixuireactfocusguards.useFocusGuards();
        const isPointerMovingToSubmenu = $cnSS2$react.useCallback((event) => {
          var _pointerGraceIntentRe, _pointerGraceIntentRe2;
          const isMovingTowards = pointerDirRef.current === ((_pointerGraceIntentRe = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe === void 0 ? void 0 : _pointerGraceIntentRe.side);
          return isMovingTowards && $213e4d2df823067d$var$isPointerInGraceArea(event, (_pointerGraceIntentRe2 = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe2 === void 0 ? void 0 : _pointerGraceIntentRe2.area);
        }, []);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuContentProvider, {
          scope: __scopeMenu,
          searchRef,
          onItemEnter: $cnSS2$react.useCallback((event) => {
            if (isPointerMovingToSubmenu(event))
              event.preventDefault();
          }, [
            isPointerMovingToSubmenu
          ]),
          onItemLeave: $cnSS2$react.useCallback((event) => {
            var _contentRef$current;
            if (isPointerMovingToSubmenu(event))
              return;
            (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus();
            setCurrentItemId(null);
          }, [
            isPointerMovingToSubmenu
          ]),
          onTriggerLeave: $cnSS2$react.useCallback((event) => {
            if (isPointerMovingToSubmenu(event))
              event.preventDefault();
          }, [
            isPointerMovingToSubmenu
          ]),
          pointerGraceTimerRef,
          onPointerGraceIntentChange: $cnSS2$react.useCallback((intent) => {
            pointerGraceIntentRef.current = intent;
          }, [])
        }, /* @__PURE__ */ $cnSS2$react.createElement(ScrollLockWrapper, scrollLockWrapperProps, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactfocusscope.FocusScope, {
          asChild: true,
          trapped: trapFocus,
          onMountAutoFocus: $cnSS2$radixuiprimitive.composeEventHandlers(onOpenAutoFocus, (event) => {
            var _contentRef$current2;
            event.preventDefault();
            (_contentRef$current2 = contentRef.current) === null || _contentRef$current2 === void 0 || _contentRef$current2.focus();
          }),
          onUnmountAutoFocus: onCloseAutoFocus
        }, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactdismissablelayer.DismissableLayer, {
          asChild: true,
          disableOutsidePointerEvents,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside,
          onInteractOutside,
          onDismiss
        }, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactrovingfocus.Root, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          asChild: true
        }, rovingFocusGroupScope, {
          dir: rootContext.dir,
          orientation: "vertical",
          loop,
          currentTabStopId: currentItemId,
          onCurrentTabStopIdChange: setCurrentItemId,
          onEntryFocus: $cnSS2$radixuiprimitive.composeEventHandlers(onEntryFocus, (event) => {
            if (!rootContext.isUsingKeyboardRef.current)
              event.preventDefault();
          })
        }), /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpopper.Content, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          role: "menu",
          "aria-orientation": "vertical",
          "data-state": $213e4d2df823067d$var$getOpenState(context.open),
          "data-radix-menu-content": "",
          dir: rootContext.dir
        }, popperScope, contentProps, {
          ref: composedRefs,
          style: __spreadValues({
            outline: "none"
          }, contentProps.style),
          onKeyDown: $cnSS2$radixuiprimitive.composeEventHandlers(contentProps.onKeyDown, (event) => {
            const target = event.target;
            const isKeyDownInside = target.closest("[data-radix-menu-content]") === event.currentTarget;
            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
            const isCharacterKey = event.key.length === 1;
            if (isKeyDownInside) {
              if (event.key === "Tab")
                event.preventDefault();
              if (!isModifierKey && isCharacterKey)
                handleTypeaheadSearch(event.key);
            }
            const content = contentRef.current;
            if (event.target !== content)
              return;
            if (!$213e4d2df823067d$var$FIRST_LAST_KEYS.includes(event.key))
              return;
            event.preventDefault();
            const items = getItems().filter(
              (item) => !item.disabled
            );
            const candidateNodes = items.map(
              (item) => item.ref.current
            );
            if ($213e4d2df823067d$var$LAST_KEYS.includes(event.key))
              candidateNodes.reverse();
            $213e4d2df823067d$var$focusFirst(candidateNodes);
          }),
          onBlur: $cnSS2$radixuiprimitive.composeEventHandlers(props.onBlur, (event) => {
            if (!event.currentTarget.contains(event.target)) {
              window.clearTimeout(timerRef.current);
              searchRef.current = "";
            }
          }),
          onPointerMove: $cnSS2$radixuiprimitive.composeEventHandlers(props.onPointerMove, $213e4d2df823067d$var$whenMouse((event) => {
            const target = event.target;
            const pointerXHasChanged = lastPointerXRef.current !== event.clientX;
            if (event.currentTarget.contains(target) && pointerXHasChanged) {
              const newDir = event.clientX > lastPointerXRef.current ? "right" : "left";
              pointerDirRef.current = newDir;
              lastPointerXRef.current = event.clientX;
            }
          }))
        })))))));
      });
      var $213e4d2df823067d$export$22a631d1f72787bb = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeMenu } = _a2, groupProps = __objRest(_a2, ["__scopeMenu"]);
        return /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactprimitive.Primitive.div, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          role: "group"
        }, groupProps, {
          ref: forwardedRef
        }));
      });
      var $213e4d2df823067d$export$dd37bec0e8a99143 = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeMenu } = _a2, labelProps = __objRest(_a2, ["__scopeMenu"]);
        return /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactprimitive.Primitive.div, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, labelProps, {
          ref: forwardedRef
        }));
      });
      var $213e4d2df823067d$var$ITEM_NAME = "MenuItem";
      var $213e4d2df823067d$var$ITEM_SELECT = "menu.itemSelect";
      var $213e4d2df823067d$export$2ce376c2cc3355c8 = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { disabled = false, onSelect } = _a2, itemProps = __objRest(_a2, ["disabled", "onSelect"]);
        const ref = $cnSS2$react.useRef(null);
        const rootContext = $213e4d2df823067d$var$useMenuRootContext($213e4d2df823067d$var$ITEM_NAME, props.__scopeMenu);
        const contentContext = $213e4d2df823067d$var$useMenuContentContext($213e4d2df823067d$var$ITEM_NAME, props.__scopeMenu);
        const composedRefs = $cnSS2$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        const isPointerDownRef = $cnSS2$react.useRef(false);
        const handleSelect = () => {
          const menuItem = ref.current;
          if (!disabled && menuItem) {
            const itemSelectEvent = new CustomEvent($213e4d2df823067d$var$ITEM_SELECT, {
              bubbles: true,
              cancelable: true
            });
            menuItem.addEventListener(
              $213e4d2df823067d$var$ITEM_SELECT,
              (event) => onSelect === null || onSelect === void 0 ? void 0 : onSelect(event),
              {
                once: true
              }
            );
            $cnSS2$radixuireactprimitive.dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);
            if (itemSelectEvent.defaultPrevented)
              isPointerDownRef.current = false;
            else
              rootContext.onClose();
          }
        };
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuItemImpl, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, itemProps, {
          ref: composedRefs,
          disabled,
          onClick: $cnSS2$radixuiprimitive.composeEventHandlers(props.onClick, handleSelect),
          onPointerDown: (event) => {
            var _props$onPointerDown;
            (_props$onPointerDown = props.onPointerDown) === null || _props$onPointerDown === void 0 || _props$onPointerDown.call(props, event);
            isPointerDownRef.current = true;
          },
          onPointerUp: $cnSS2$radixuiprimitive.composeEventHandlers(props.onPointerUp, (event) => {
            var _event$currentTarget;
            if (!isPointerDownRef.current)
              (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || _event$currentTarget.click();
          }),
          onKeyDown: $cnSS2$radixuiprimitive.composeEventHandlers(props.onKeyDown, (event) => {
            const isTypingAhead = contentContext.searchRef.current !== "";
            if (disabled || isTypingAhead && event.key === " ")
              return;
            if ($213e4d2df823067d$var$SELECTION_KEYS.includes(event.key)) {
              event.currentTarget.click();
              event.preventDefault();
            }
          })
        }));
      });
      var $213e4d2df823067d$var$MenuItemImpl = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeMenu, disabled = false, textValue } = _a2, itemProps = __objRest(_a2, ["__scopeMenu", "disabled", "textValue"]);
        const contentContext = $213e4d2df823067d$var$useMenuContentContext($213e4d2df823067d$var$ITEM_NAME, __scopeMenu);
        const rovingFocusGroupScope = $213e4d2df823067d$var$useRovingFocusGroupScope(__scopeMenu);
        const ref = $cnSS2$react.useRef(null);
        const composedRefs = $cnSS2$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        const [isFocused, setIsFocused] = $cnSS2$react.useState(false);
        const [textContent, setTextContent] = $cnSS2$react.useState("");
        $cnSS2$react.useEffect(() => {
          const menuItem = ref.current;
          if (menuItem) {
            var _menuItem$textContent;
            setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : "").trim());
          }
        }, [
          itemProps.children
        ]);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$Collection.ItemSlot, {
          scope: __scopeMenu,
          disabled,
          textValue: textValue !== null && textValue !== void 0 ? textValue : textContent
        }, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactrovingfocus.Item, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          asChild: true
        }, rovingFocusGroupScope, {
          focusable: !disabled
        }), /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactprimitive.Primitive.div, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          role: "menuitem",
          "data-highlighted": isFocused ? "" : void 0,
          "aria-disabled": disabled || void 0,
          "data-disabled": disabled ? "" : void 0
        }, itemProps, {
          ref: composedRefs,
          onPointerMove: $cnSS2$radixuiprimitive.composeEventHandlers(props.onPointerMove, $213e4d2df823067d$var$whenMouse((event) => {
            if (disabled)
              contentContext.onItemLeave(event);
            else {
              contentContext.onItemEnter(event);
              if (!event.defaultPrevented) {
                const item = event.currentTarget;
                item.focus();
              }
            }
          })),
          onPointerLeave: $cnSS2$radixuiprimitive.composeEventHandlers(props.onPointerLeave, $213e4d2df823067d$var$whenMouse(
            (event) => contentContext.onItemLeave(event)
          )),
          onFocus: $cnSS2$radixuiprimitive.composeEventHandlers(
            props.onFocus,
            () => setIsFocused(true)
          ),
          onBlur: $cnSS2$radixuiprimitive.composeEventHandlers(
            props.onBlur,
            () => setIsFocused(false)
          )
        }))));
      });
      var $213e4d2df823067d$export$f6f243521332502d = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { checked = false, onCheckedChange } = _a2, checkboxItemProps = __objRest(_a2, ["checked", "onCheckedChange"]);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$ItemIndicatorProvider, {
          scope: props.__scopeMenu,
          checked
        }, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$export$2ce376c2cc3355c8, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          role: "menuitemcheckbox",
          "aria-checked": $213e4d2df823067d$var$isIndeterminate(checked) ? "mixed" : checked
        }, checkboxItemProps, {
          ref: forwardedRef,
          "data-state": $213e4d2df823067d$var$getCheckedState(checked),
          onSelect: $cnSS2$radixuiprimitive.composeEventHandlers(
            checkboxItemProps.onSelect,
            () => onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange($213e4d2df823067d$var$isIndeterminate(checked) ? true : !checked),
            {
              checkForDefaultPrevented: false
            }
          )
        })));
      });
      var $213e4d2df823067d$var$RADIO_GROUP_NAME = "MenuRadioGroup";
      var [$213e4d2df823067d$var$RadioGroupProvider, $213e4d2df823067d$var$useRadioGroupContext] = $213e4d2df823067d$var$createMenuContext($213e4d2df823067d$var$RADIO_GROUP_NAME, {
        value: void 0,
        onValueChange: () => {
        }
      });
      var $213e4d2df823067d$export$ea2200c9eee416b3 = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { value, onValueChange } = _a2, groupProps = __objRest(_a2, ["value", "onValueChange"]);
        const handleValueChange = $cnSS2$radixuireactusecallbackref.useCallbackRef(onValueChange);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$RadioGroupProvider, {
          scope: props.__scopeMenu,
          value,
          onValueChange: handleValueChange
        }, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$export$22a631d1f72787bb, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, groupProps, {
          ref: forwardedRef
        })));
      });
      var $213e4d2df823067d$var$RADIO_ITEM_NAME = "MenuRadioItem";
      var $213e4d2df823067d$export$69bd225e9817f6d0 = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { value } = _a2, radioItemProps = __objRest(_a2, ["value"]);
        const context = $213e4d2df823067d$var$useRadioGroupContext($213e4d2df823067d$var$RADIO_ITEM_NAME, props.__scopeMenu);
        const checked = value === context.value;
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$ItemIndicatorProvider, {
          scope: props.__scopeMenu,
          checked
        }, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$export$2ce376c2cc3355c8, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          role: "menuitemradio",
          "aria-checked": checked
        }, radioItemProps, {
          ref: forwardedRef,
          "data-state": $213e4d2df823067d$var$getCheckedState(checked),
          onSelect: $cnSS2$radixuiprimitive.composeEventHandlers(radioItemProps.onSelect, () => {
            var _context$onValueChang;
            return (_context$onValueChang = context.onValueChange) === null || _context$onValueChang === void 0 ? void 0 : _context$onValueChang.call(context, value);
          }, {
            checkForDefaultPrevented: false
          })
        })));
      });
      var $213e4d2df823067d$var$ITEM_INDICATOR_NAME = "MenuItemIndicator";
      var [$213e4d2df823067d$var$ItemIndicatorProvider, $213e4d2df823067d$var$useItemIndicatorContext] = $213e4d2df823067d$var$createMenuContext($213e4d2df823067d$var$ITEM_INDICATOR_NAME, {
        checked: false
      });
      var $213e4d2df823067d$export$a2593e23056970a3 = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeMenu, forceMount } = _a2, itemIndicatorProps = __objRest(_a2, ["__scopeMenu", "forceMount"]);
        const indicatorContext = $213e4d2df823067d$var$useItemIndicatorContext($213e4d2df823067d$var$ITEM_INDICATOR_NAME, __scopeMenu);
        return /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpresence.Presence, {
          present: forceMount || $213e4d2df823067d$var$isIndeterminate(indicatorContext.checked) || indicatorContext.checked === true
        }, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactprimitive.Primitive.span, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, itemIndicatorProps, {
          ref: forwardedRef,
          "data-state": $213e4d2df823067d$var$getCheckedState(indicatorContext.checked)
        })));
      });
      var $213e4d2df823067d$export$1cec7dcdd713e220 = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeMenu } = _a2, separatorProps = __objRest(_a2, ["__scopeMenu"]);
        return /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactprimitive.Primitive.div, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          role: "separator",
          "aria-orientation": "horizontal"
        }, separatorProps, {
          ref: forwardedRef
        }));
      });
      var $213e4d2df823067d$export$bcdda4773debf5fa = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeMenu } = _a2, arrowProps = __objRest(_a2, ["__scopeMenu"]);
        const popperScope = $213e4d2df823067d$var$usePopperScope(__scopeMenu);
        return /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpopper.Arrow, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({}, popperScope, arrowProps, {
          ref: forwardedRef
        }));
      });
      var $213e4d2df823067d$var$SUB_NAME = "MenuSub";
      var [$213e4d2df823067d$var$MenuSubProvider, $213e4d2df823067d$var$useMenuSubContext] = $213e4d2df823067d$var$createMenuContext($213e4d2df823067d$var$SUB_NAME);
      var $213e4d2df823067d$export$71bdb9d1e2909932 = (props) => {
        const { __scopeMenu, children, open = false, onOpenChange } = props;
        const parentMenuContext = $213e4d2df823067d$var$useMenuContext($213e4d2df823067d$var$SUB_NAME, __scopeMenu);
        const popperScope = $213e4d2df823067d$var$usePopperScope(__scopeMenu);
        const [trigger, setTrigger] = $cnSS2$react.useState(null);
        const [content, setContent] = $cnSS2$react.useState(null);
        const handleOpenChange = $cnSS2$radixuireactusecallbackref.useCallbackRef(onOpenChange);
        $cnSS2$react.useEffect(() => {
          if (parentMenuContext.open === false)
            handleOpenChange(false);
          return () => handleOpenChange(false);
        }, [
          parentMenuContext.open,
          handleOpenChange
        ]);
        return /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpopper.Root, popperScope, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuProvider, {
          scope: __scopeMenu,
          open,
          onOpenChange: handleOpenChange,
          content,
          onContentChange: setContent
        }, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuSubProvider, {
          scope: __scopeMenu,
          contentId: $cnSS2$radixuireactid.useId(),
          triggerId: $cnSS2$radixuireactid.useId(),
          trigger,
          onTriggerChange: setTrigger
        }, children)));
      };
      var $213e4d2df823067d$var$SUB_TRIGGER_NAME = "MenuSubTrigger";
      var $213e4d2df823067d$export$5fbbb3ba7297405f = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const context = $213e4d2df823067d$var$useMenuContext($213e4d2df823067d$var$SUB_TRIGGER_NAME, props.__scopeMenu);
        const rootContext = $213e4d2df823067d$var$useMenuRootContext($213e4d2df823067d$var$SUB_TRIGGER_NAME, props.__scopeMenu);
        const subContext = $213e4d2df823067d$var$useMenuSubContext($213e4d2df823067d$var$SUB_TRIGGER_NAME, props.__scopeMenu);
        const contentContext = $213e4d2df823067d$var$useMenuContentContext($213e4d2df823067d$var$SUB_TRIGGER_NAME, props.__scopeMenu);
        const openTimerRef = $cnSS2$react.useRef(null);
        const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
        const scope = {
          __scopeMenu: props.__scopeMenu
        };
        const clearOpenTimer = $cnSS2$react.useCallback(() => {
          if (openTimerRef.current)
            window.clearTimeout(openTimerRef.current);
          openTimerRef.current = null;
        }, []);
        $cnSS2$react.useEffect(
          () => clearOpenTimer,
          [
            clearOpenTimer
          ]
        );
        $cnSS2$react.useEffect(() => {
          const pointerGraceTimer = pointerGraceTimerRef.current;
          return () => {
            window.clearTimeout(pointerGraceTimer);
            onPointerGraceIntentChange(null);
          };
        }, [
          pointerGraceTimerRef,
          onPointerGraceIntentChange
        ]);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$export$9fa5ebd18bee4d43, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          asChild: true
        }, scope), /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuItemImpl, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          id: subContext.triggerId,
          "aria-haspopup": "menu",
          "aria-expanded": context.open,
          "aria-controls": subContext.contentId,
          "data-state": $213e4d2df823067d$var$getOpenState(context.open)
        }, props, {
          ref: $cnSS2$radixuireactcomposerefs.composeRefs(forwardedRef, subContext.onTriggerChange),
          onClick: (event) => {
            var _props$onClick;
            (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);
            if (props.disabled || event.defaultPrevented)
              return;
            event.currentTarget.focus();
            if (!context.open)
              context.onOpenChange(true);
          },
          onPointerMove: $cnSS2$radixuiprimitive.composeEventHandlers(props.onPointerMove, $213e4d2df823067d$var$whenMouse((event) => {
            contentContext.onItemEnter(event);
            if (event.defaultPrevented)
              return;
            if (!props.disabled && !context.open && !openTimerRef.current) {
              contentContext.onPointerGraceIntentChange(null);
              openTimerRef.current = window.setTimeout(() => {
                context.onOpenChange(true);
                clearOpenTimer();
              }, 100);
            }
          })),
          onPointerLeave: $cnSS2$radixuiprimitive.composeEventHandlers(props.onPointerLeave, $213e4d2df823067d$var$whenMouse((event) => {
            var _context$content;
            clearOpenTimer();
            const contentRect = (_context$content = context.content) === null || _context$content === void 0 ? void 0 : _context$content.getBoundingClientRect();
            if (contentRect) {
              var _context$content2;
              const side = (_context$content2 = context.content) === null || _context$content2 === void 0 ? void 0 : _context$content2.dataset.side;
              const rightSide = side === "right";
              const bleed = rightSide ? -5 : 5;
              const contentNearEdge = contentRect[rightSide ? "left" : "right"];
              const contentFarEdge = contentRect[rightSide ? "right" : "left"];
              contentContext.onPointerGraceIntentChange({
                area: [
                  // consistently within polygon bounds
                  {
                    x: event.clientX + bleed,
                    y: event.clientY
                  },
                  {
                    x: contentNearEdge,
                    y: contentRect.top
                  },
                  {
                    x: contentFarEdge,
                    y: contentRect.top
                  },
                  {
                    x: contentFarEdge,
                    y: contentRect.bottom
                  },
                  {
                    x: contentNearEdge,
                    y: contentRect.bottom
                  }
                ],
                side
              });
              window.clearTimeout(pointerGraceTimerRef.current);
              pointerGraceTimerRef.current = window.setTimeout(
                () => contentContext.onPointerGraceIntentChange(null),
                300
              );
            } else {
              contentContext.onTriggerLeave(event);
              if (event.defaultPrevented)
                return;
              contentContext.onPointerGraceIntentChange(null);
            }
          })),
          onKeyDown: $cnSS2$radixuiprimitive.composeEventHandlers(props.onKeyDown, (event) => {
            const isTypingAhead = contentContext.searchRef.current !== "";
            if (props.disabled || isTypingAhead && event.key === " ")
              return;
            if ($213e4d2df823067d$var$SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
              var _context$content3;
              context.onOpenChange(true);
              (_context$content3 = context.content) === null || _context$content3 === void 0 || _context$content3.focus();
              event.preventDefault();
            }
          })
        })));
      });
      var $213e4d2df823067d$var$SUB_CONTENT_NAME = "MenuSubContent";
      var $213e4d2df823067d$export$e7142ab31822bde6 = /* @__PURE__ */ $cnSS2$react.forwardRef((props, forwardedRef) => {
        const portalContext = $213e4d2df823067d$var$usePortalContext($213e4d2df823067d$var$CONTENT_NAME, props.__scopeMenu);
        const _a2 = props, { forceMount = portalContext.forceMount } = _a2, subContentProps = __objRest(_a2, ["forceMount"]);
        const context = $213e4d2df823067d$var$useMenuContext($213e4d2df823067d$var$CONTENT_NAME, props.__scopeMenu);
        const rootContext = $213e4d2df823067d$var$useMenuRootContext($213e4d2df823067d$var$CONTENT_NAME, props.__scopeMenu);
        const subContext = $213e4d2df823067d$var$useMenuSubContext($213e4d2df823067d$var$SUB_CONTENT_NAME, props.__scopeMenu);
        const ref = $cnSS2$react.useRef(null);
        const composedRefs = $cnSS2$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
        return /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$Collection.Provider, {
          scope: props.__scopeMenu
        }, /* @__PURE__ */ $cnSS2$react.createElement($cnSS2$radixuireactpresence.Presence, {
          present: forceMount || context.open
        }, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$Collection.Slot, {
          scope: props.__scopeMenu
        }, /* @__PURE__ */ $cnSS2$react.createElement($213e4d2df823067d$var$MenuContentImpl, $parcel$interopDefault($cnSS2$babelruntimehelpersextends)({
          id: subContext.contentId,
          "aria-labelledby": subContext.triggerId
        }, subContentProps, {
          ref: composedRefs,
          align: "start",
          side: rootContext.dir === "rtl" ? "left" : "right",
          disableOutsidePointerEvents: false,
          disableOutsideScroll: false,
          trapFocus: false,
          onOpenAutoFocus: (event) => {
            var _ref$current;
            if (rootContext.isUsingKeyboardRef.current)
              (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
            event.preventDefault();
          },
          onCloseAutoFocus: (event) => event.preventDefault(),
          onFocusOutside: $cnSS2$radixuiprimitive.composeEventHandlers(props.onFocusOutside, (event) => {
            if (event.target !== subContext.trigger)
              context.onOpenChange(false);
          }),
          onEscapeKeyDown: $cnSS2$radixuiprimitive.composeEventHandlers(props.onEscapeKeyDown, (event) => {
            rootContext.onClose();
            event.preventDefault();
          }),
          onKeyDown: $cnSS2$radixuiprimitive.composeEventHandlers(props.onKeyDown, (event) => {
            const isKeyDownInside = event.currentTarget.contains(event.target);
            const isCloseKey = $213e4d2df823067d$var$SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);
            if (isKeyDownInside && isCloseKey) {
              var _subContext$trigger;
              context.onOpenChange(false);
              (_subContext$trigger = subContext.trigger) === null || _subContext$trigger === void 0 || _subContext$trigger.focus();
              event.preventDefault();
            }
          })
        })))));
      });
      function $213e4d2df823067d$var$getOpenState(open) {
        return open ? "open" : "closed";
      }
      function $213e4d2df823067d$var$isIndeterminate(checked) {
        return checked === "indeterminate";
      }
      function $213e4d2df823067d$var$getCheckedState(checked) {
        return $213e4d2df823067d$var$isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
      }
      function $213e4d2df823067d$var$focusFirst(candidates) {
        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
        for (const candidate of candidates) {
          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
            return;
          candidate.focus();
          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
            return;
        }
      }
      function $213e4d2df823067d$var$wrapArray(array, startIndex) {
        return array.map(
          (_, index2) => array[(startIndex + index2) % array.length]
        );
      }
      function $213e4d2df823067d$var$getNextMatch(values, search, currentMatch) {
        const isRepeated = search.length > 1 && Array.from(search).every(
          (char) => char === search[0]
        );
        const normalizedSearch = isRepeated ? search[0] : search;
        const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
        let wrappedValues = $213e4d2df823067d$var$wrapArray(values, Math.max(currentMatchIndex, 0));
        const excludeCurrentMatch = normalizedSearch.length === 1;
        if (excludeCurrentMatch)
          wrappedValues = wrappedValues.filter(
            (v2) => v2 !== currentMatch
          );
        const nextMatch = wrappedValues.find(
          (value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
        );
        return nextMatch !== currentMatch ? nextMatch : void 0;
      }
      function $213e4d2df823067d$var$isPointInPolygon(point, polygon) {
        const { x: x2, y: y2 } = point;
        let inside = false;
        for (let i2 = 0, j2 = polygon.length - 1; i2 < polygon.length; j2 = i2++) {
          const xi = polygon[i2].x;
          const yi = polygon[i2].y;
          const xj = polygon[j2].x;
          const yj = polygon[j2].y;
          const intersect = yi > y2 !== yj > y2 && x2 < (xj - xi) * (y2 - yi) / (yj - yi) + xi;
          if (intersect)
            inside = !inside;
        }
        return inside;
      }
      function $213e4d2df823067d$var$isPointerInGraceArea(event, area) {
        if (!area)
          return false;
        const cursorPos = {
          x: event.clientX,
          y: event.clientY
        };
        return $213e4d2df823067d$var$isPointInPolygon(cursorPos, area);
      }
      function $213e4d2df823067d$var$whenMouse(handler) {
        return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
      }
      var $213e4d2df823067d$export$be92b6f5f03c0fe9 = $213e4d2df823067d$export$d9b273488cd8ce6f;
      var $213e4d2df823067d$export$b688253958b8dfe7 = $213e4d2df823067d$export$9fa5ebd18bee4d43;
      var $213e4d2df823067d$export$602eac185826482c = $213e4d2df823067d$export$793392f970497feb;
      var $213e4d2df823067d$export$7c6e2c02157bb7d2 = $213e4d2df823067d$export$479f0f2f71193efe;
      var $213e4d2df823067d$export$eb2fcfdbd7ba97d4 = $213e4d2df823067d$export$22a631d1f72787bb;
      var $213e4d2df823067d$export$b04be29aa201d4f5 = $213e4d2df823067d$export$dd37bec0e8a99143;
      var $213e4d2df823067d$export$6d08773d2e66f8f2 = $213e4d2df823067d$export$2ce376c2cc3355c8;
      var $213e4d2df823067d$export$16ce288f89fa631c = $213e4d2df823067d$export$f6f243521332502d;
      var $213e4d2df823067d$export$a98f0dcb43a68a25 = $213e4d2df823067d$export$ea2200c9eee416b3;
      var $213e4d2df823067d$export$371ab307eab489c0 = $213e4d2df823067d$export$69bd225e9817f6d0;
      var $213e4d2df823067d$export$c3468e2714d175fa = $213e4d2df823067d$export$a2593e23056970a3;
      var $213e4d2df823067d$export$1ff3c3f08ae963c0 = $213e4d2df823067d$export$1cec7dcdd713e220;
      var $213e4d2df823067d$export$21b07c8f274aebd5 = $213e4d2df823067d$export$bcdda4773debf5fa;
      var $213e4d2df823067d$export$d7a01e11500dfb6f = $213e4d2df823067d$export$71bdb9d1e2909932;
      var $213e4d2df823067d$export$2ea8a7a591ac5eac = $213e4d2df823067d$export$5fbbb3ba7297405f;
      var $213e4d2df823067d$export$6d4de93b380beddf = $213e4d2df823067d$export$e7142ab31822bde6;
    }
  });

  // ../assets/node_modules/@radix-ui/react-context-menu/dist/index.js
  var require_dist31 = __commonJS({
    "../assets/node_modules/@radix-ui/react-context-menu/dist/index.js"(exports, module) {
      var $l8XVT$babelruntimehelpersextends = require_extends();
      var $l8XVT$react = require_react();
      var $l8XVT$radixuiprimitive = require_dist();
      var $l8XVT$radixuireactcontext = require_dist3();
      var $l8XVT$radixuireactprimitive = require_dist20();
      var $l8XVT$radixuireactmenu = require_dist30();
      var $l8XVT$radixuireactusecallbackref = require_dist6();
      var $l8XVT$radixuireactusecontrollablestate = require_dist16();
      function $parcel$export(e2, n2, v2, s2) {
        Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a2) {
        return a2 && a2.__esModule ? a2.default : a2;
      }
      $parcel$export(module.exports, "createContextMenuScope", () => $5de197f6cd80e8e9$export$1059331f43ddcc82);
      $parcel$export(module.exports, "ContextMenu", () => $5de197f6cd80e8e9$export$8dc6765e8be191c7);
      $parcel$export(module.exports, "ContextMenuTrigger", () => $5de197f6cd80e8e9$export$be6fc7b1d5b0beb9);
      $parcel$export(module.exports, "ContextMenuPortal", () => $5de197f6cd80e8e9$export$14afd0be83e45060);
      $parcel$export(module.exports, "ContextMenuContent", () => $5de197f6cd80e8e9$export$572205900c9369e);
      $parcel$export(module.exports, "ContextMenuGroup", () => $5de197f6cd80e8e9$export$9860523b0fcdd664);
      $parcel$export(module.exports, "ContextMenuLabel", () => $5de197f6cd80e8e9$export$d4b9d3b609a10742);
      $parcel$export(module.exports, "ContextMenuItem", () => $5de197f6cd80e8e9$export$16a26dc176a49100);
      $parcel$export(module.exports, "ContextMenuCheckboxItem", () => $5de197f6cd80e8e9$export$b6adbe51d5d8b7ec);
      $parcel$export(module.exports, "ContextMenuRadioGroup", () => $5de197f6cd80e8e9$export$db5c89af5ed9aa07);
      $parcel$export(module.exports, "ContextMenuRadioItem", () => $5de197f6cd80e8e9$export$8a727d09a7d9bfc2);
      $parcel$export(module.exports, "ContextMenuItemIndicator", () => $5de197f6cd80e8e9$export$9ed8194dee42d94b);
      $parcel$export(module.exports, "ContextMenuSeparator", () => $5de197f6cd80e8e9$export$8d6b009fadfe1207);
      $parcel$export(module.exports, "ContextMenuArrow", () => $5de197f6cd80e8e9$export$f47d0a58228a61e2);
      $parcel$export(module.exports, "ContextMenuSub", () => $5de197f6cd80e8e9$export$5bc21d1c00c4b201);
      $parcel$export(module.exports, "ContextMenuSubTrigger", () => $5de197f6cd80e8e9$export$30b2b5c64556d316);
      $parcel$export(module.exports, "ContextMenuSubContent", () => $5de197f6cd80e8e9$export$2c967063bd2dc512);
      $parcel$export(module.exports, "Root", () => $5de197f6cd80e8e9$export$be92b6f5f03c0fe9);
      $parcel$export(module.exports, "Trigger", () => $5de197f6cd80e8e9$export$41fb9f06171c75f4);
      $parcel$export(module.exports, "Portal", () => $5de197f6cd80e8e9$export$602eac185826482c);
      $parcel$export(module.exports, "Content", () => $5de197f6cd80e8e9$export$7c6e2c02157bb7d2);
      $parcel$export(module.exports, "Group", () => $5de197f6cd80e8e9$export$eb2fcfdbd7ba97d4);
      $parcel$export(module.exports, "Label", () => $5de197f6cd80e8e9$export$b04be29aa201d4f5);
      $parcel$export(module.exports, "Item", () => $5de197f6cd80e8e9$export$6d08773d2e66f8f2);
      $parcel$export(module.exports, "CheckboxItem", () => $5de197f6cd80e8e9$export$16ce288f89fa631c);
      $parcel$export(module.exports, "RadioGroup", () => $5de197f6cd80e8e9$export$a98f0dcb43a68a25);
      $parcel$export(module.exports, "RadioItem", () => $5de197f6cd80e8e9$export$371ab307eab489c0);
      $parcel$export(module.exports, "ItemIndicator", () => $5de197f6cd80e8e9$export$c3468e2714d175fa);
      $parcel$export(module.exports, "Separator", () => $5de197f6cd80e8e9$export$1ff3c3f08ae963c0);
      $parcel$export(module.exports, "Arrow", () => $5de197f6cd80e8e9$export$21b07c8f274aebd5);
      $parcel$export(module.exports, "Sub", () => $5de197f6cd80e8e9$export$d7a01e11500dfb6f);
      $parcel$export(module.exports, "SubTrigger", () => $5de197f6cd80e8e9$export$2ea8a7a591ac5eac);
      $parcel$export(module.exports, "SubContent", () => $5de197f6cd80e8e9$export$6d4de93b380beddf);
      var $5de197f6cd80e8e9$var$CONTEXT_MENU_NAME = "ContextMenu";
      var [$5de197f6cd80e8e9$var$createContextMenuContext, $5de197f6cd80e8e9$export$1059331f43ddcc82] = $l8XVT$radixuireactcontext.createContextScope($5de197f6cd80e8e9$var$CONTEXT_MENU_NAME, [
        $l8XVT$radixuireactmenu.createMenuScope
      ]);
      var $5de197f6cd80e8e9$var$useMenuScope = $l8XVT$radixuireactmenu.createMenuScope();
      var [$5de197f6cd80e8e9$var$ContextMenuProvider, $5de197f6cd80e8e9$var$useContextMenuContext] = $5de197f6cd80e8e9$var$createContextMenuContext($5de197f6cd80e8e9$var$CONTEXT_MENU_NAME);
      var $5de197f6cd80e8e9$export$8dc6765e8be191c7 = (props) => {
        const { __scopeContextMenu, children, onOpenChange, dir, modal = true } = props;
        const [open1, setOpen] = $l8XVT$react.useState(false);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        const handleOpenChangeProp = $l8XVT$radixuireactusecallbackref.useCallbackRef(onOpenChange);
        const handleOpenChange = $l8XVT$react.useCallback((open) => {
          setOpen(open);
          handleOpenChangeProp(open);
        }, [
          handleOpenChangeProp
        ]);
        return /* @__PURE__ */ $l8XVT$react.createElement($5de197f6cd80e8e9$var$ContextMenuProvider, {
          scope: __scopeContextMenu,
          open: open1,
          onOpenChange: handleOpenChange,
          modal
        }, /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Root, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, {
          dir,
          open: open1,
          onOpenChange: handleOpenChange,
          modal
        }), children));
      };
      var $5de197f6cd80e8e9$var$TRIGGER_NAME = "ContextMenuTrigger";
      var $5de197f6cd80e8e9$export$be6fc7b1d5b0beb9 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu, disabled = false } = _a2, triggerProps = __objRest(_a2, ["__scopeContextMenu", "disabled"]);
        const context = $5de197f6cd80e8e9$var$useContextMenuContext($5de197f6cd80e8e9$var$TRIGGER_NAME, __scopeContextMenu);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        const pointRef = $l8XVT$react.useRef({
          x: 0,
          y: 0
        });
        const virtualRef = $l8XVT$react.useRef({
          getBoundingClientRect: () => DOMRect.fromRect(__spreadValues({
            width: 0,
            height: 0
          }, pointRef.current))
        });
        const longPressTimerRef = $l8XVT$react.useRef(0);
        const clearLongPress = $l8XVT$react.useCallback(
          () => window.clearTimeout(longPressTimerRef.current),
          []
        );
        const handleOpen = (event) => {
          pointRef.current = {
            x: event.clientX,
            y: event.clientY
          };
          context.onOpenChange(true);
        };
        $l8XVT$react.useEffect(
          () => clearLongPress,
          [
            clearLongPress
          ]
        );
        $l8XVT$react.useEffect(
          () => void (disabled && clearLongPress()),
          [
            disabled,
            clearLongPress
          ]
        );
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$react.Fragment, null, /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Anchor, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, {
          virtualRef
        })), /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactprimitive.Primitive.span, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({
          "data-state": context.open ? "open" : "closed",
          "data-disabled": disabled ? "" : void 0
        }, triggerProps, {
          ref: forwardedRef,
          style: __spreadValues({
            WebkitTouchCallout: "none"
          }, props.style),
          onContextMenu: disabled ? props.onContextMenu : $l8XVT$radixuiprimitive.composeEventHandlers(props.onContextMenu, (event) => {
            clearLongPress();
            handleOpen(event);
            event.preventDefault();
          }),
          onPointerDown: disabled ? props.onPointerDown : $l8XVT$radixuiprimitive.composeEventHandlers(props.onPointerDown, $5de197f6cd80e8e9$var$whenTouchOrPen((event) => {
            clearLongPress();
            longPressTimerRef.current = window.setTimeout(
              () => handleOpen(event),
              700
            );
          })),
          onPointerMove: disabled ? props.onPointerMove : $l8XVT$radixuiprimitive.composeEventHandlers(props.onPointerMove, $5de197f6cd80e8e9$var$whenTouchOrPen(clearLongPress)),
          onPointerCancel: disabled ? props.onPointerCancel : $l8XVT$radixuiprimitive.composeEventHandlers(props.onPointerCancel, $5de197f6cd80e8e9$var$whenTouchOrPen(clearLongPress)),
          onPointerUp: disabled ? props.onPointerUp : $l8XVT$radixuiprimitive.composeEventHandlers(props.onPointerUp, $5de197f6cd80e8e9$var$whenTouchOrPen(clearLongPress))
        })));
      });
      var $5de197f6cd80e8e9$export$14afd0be83e45060 = (props) => {
        const _a2 = props, { __scopeContextMenu } = _a2, portalProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Portal, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, portalProps));
      };
      var $5de197f6cd80e8e9$var$CONTENT_NAME = "ContextMenuContent";
      var $5de197f6cd80e8e9$export$572205900c9369e = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, contentProps = __objRest(_a2, ["__scopeContextMenu"]);
        const context = $5de197f6cd80e8e9$var$useContextMenuContext($5de197f6cd80e8e9$var$CONTENT_NAME, __scopeContextMenu);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        const hasInteractedOutsideRef = $l8XVT$react.useRef(false);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Content, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, contentProps, {
          ref: forwardedRef,
          side: "right",
          sideOffset: 2,
          align: "start",
          onCloseAutoFocus: (event) => {
            var _props$onCloseAutoFoc;
            (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
            if (!event.defaultPrevented && hasInteractedOutsideRef.current)
              event.preventDefault();
            hasInteractedOutsideRef.current = false;
          },
          onInteractOutside: (event) => {
            var _props$onInteractOuts;
            (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
            if (!event.defaultPrevented && !context.modal)
              hasInteractedOutsideRef.current = true;
          },
          style: __spreadProps(__spreadValues({}, props.style), {
            "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
          })
        }));
      });
      var $5de197f6cd80e8e9$export$9860523b0fcdd664 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, groupProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Group, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, groupProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$d4b9d3b609a10742 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, labelProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Label, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, labelProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$16a26dc176a49100 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, itemProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Item, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, itemProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$b6adbe51d5d8b7ec = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, checkboxItemProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.CheckboxItem, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, checkboxItemProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$db5c89af5ed9aa07 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, radioGroupProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.RadioGroup, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, radioGroupProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$8a727d09a7d9bfc2 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, radioItemProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.RadioItem, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, radioItemProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$9ed8194dee42d94b = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, itemIndicatorProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.ItemIndicator, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, itemIndicatorProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$8d6b009fadfe1207 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, separatorProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Separator, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, separatorProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$f47d0a58228a61e2 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, arrowProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Arrow, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, arrowProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$5bc21d1c00c4b201 = (props) => {
        const { __scopeContextMenu, children, onOpenChange, open: openProp, defaultOpen } = props;
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        const [open, setOpen] = $l8XVT$radixuireactusecontrollablestate.useControllableState({
          prop: openProp,
          defaultProp: defaultOpen,
          onChange: onOpenChange
        });
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.Sub, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, {
          open,
          onOpenChange: setOpen
        }), children);
      };
      var $5de197f6cd80e8e9$export$30b2b5c64556d316 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, triggerItemProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.SubTrigger, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, triggerItemProps, {
          ref: forwardedRef
        }));
      });
      var $5de197f6cd80e8e9$export$2c967063bd2dc512 = /* @__PURE__ */ $l8XVT$react.forwardRef((props, forwardedRef) => {
        const _a2 = props, { __scopeContextMenu } = _a2, subContentProps = __objRest(_a2, ["__scopeContextMenu"]);
        const menuScope = $5de197f6cd80e8e9$var$useMenuScope(__scopeContextMenu);
        return /* @__PURE__ */ $l8XVT$react.createElement($l8XVT$radixuireactmenu.SubContent, $parcel$interopDefault($l8XVT$babelruntimehelpersextends)({}, menuScope, subContentProps, {
          ref: forwardedRef,
          style: __spreadProps(__spreadValues({}, props.style), {
            "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
          })
        }));
      });
      function $5de197f6cd80e8e9$var$whenTouchOrPen(handler) {
        return (event) => event.pointerType !== "mouse" ? handler(event) : void 0;
      }
      var $5de197f6cd80e8e9$export$be92b6f5f03c0fe9 = $5de197f6cd80e8e9$export$8dc6765e8be191c7;
      var $5de197f6cd80e8e9$export$41fb9f06171c75f4 = $5de197f6cd80e8e9$export$be6fc7b1d5b0beb9;
      var $5de197f6cd80e8e9$export$602eac185826482c = $5de197f6cd80e8e9$export$14afd0be83e45060;
      var $5de197f6cd80e8e9$export$7c6e2c02157bb7d2 = $5de197f6cd80e8e9$export$572205900c9369e;
      var $5de197f6cd80e8e9$export$eb2fcfdbd7ba97d4 = $5de197f6cd80e8e9$export$9860523b0fcdd664;
      var $5de197f6cd80e8e9$export$b04be29aa201d4f5 = $5de197f6cd80e8e9$export$d4b9d3b609a10742;
      var $5de197f6cd80e8e9$export$6d08773d2e66f8f2 = $5de197f6cd80e8e9$export$16a26dc176a49100;
      var $5de197f6cd80e8e9$export$16ce288f89fa631c = $5de197f6cd80e8e9$export$b6adbe51d5d8b7ec;
      var $5de197f6cd80e8e9$export$a98f0dcb43a68a25 = $5de197f6cd80e8e9$export$db5c89af5ed9aa07;
      var $5de197f6cd80e8e9$export$371ab307eab489c0 = $5de197f6cd80e8e9$export$8a727d09a7d9bfc2;
      var $5de197f6cd80e8e9$export$c3468e2714d175fa = $5de197f6cd80e8e9$export$9ed8194dee42d94b;
      var $5de197f6cd80e8e9$export$1ff3c3f08ae963c0 = $5de197f6cd80e8e9$export$8d6b009fadfe1207;
      var $5de197f6cd80e8e9$export$21b07c8f274aebd5 = $5de197f6cd80e8e9$export$f47d0a58228a61e2;
      var $5de197f6cd80e8e9$export$d7a01e11500dfb6f = $5de197f6cd80e8e9$export$5bc21d1c00c4b201;
      var $5de197f6cd80e8e9$export$2ea8a7a591ac5eac = $5de197f6cd80e8e9$export$30b2b5c64556d316;
      var $5de197f6cd80e8e9$export$6d4de93b380beddf = $5de197f6cd80e8e9$export$2c967063bd2dc512;
    }
  });

  // ../assets/node_modules/@daily-co/daily-js/dist/daily-iframe.js
  var require_daily_iframe = __commonJS({
    "../assets/node_modules/@daily-co/daily-js/dist/daily-iframe.js"(exports, module) {
      !function(e2, t2) {
        "object" == typeof exports && "object" == typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define([], t2) : "object" == typeof exports ? exports.DailyIframe = t2() : e2.DailyIframe = t2();
      }(exports, function() {
        return function(e2) {
          var t2 = {};
          function n2(r2) {
            if (t2[r2])
              return t2[r2].exports;
            var i2 = t2[r2] = { i: r2, l: false, exports: {} };
            return e2[r2].call(i2.exports, i2, i2.exports, n2), i2.l = true, i2.exports;
          }
          return n2.m = e2, n2.c = t2, n2.d = function(e3, t3, r2) {
            n2.o(e3, t3) || Object.defineProperty(e3, t3, { enumerable: true, get: r2 });
          }, n2.r = function(e3) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
          }, n2.t = function(e3, t3) {
            if (1 & t3 && (e3 = n2(e3)), 8 & t3)
              return e3;
            if (4 & t3 && "object" == typeof e3 && e3 && e3.__esModule)
              return e3;
            var r2 = /* @__PURE__ */ Object.create(null);
            if (n2.r(r2), Object.defineProperty(r2, "default", { enumerable: true, value: e3 }), 2 & t3 && "string" != typeof e3)
              for (var i2 in e3)
                n2.d(r2, i2, function(t4) {
                  return e3[t4];
                }.bind(null, i2));
            return r2;
          }, n2.n = function(e3) {
            var t3 = e3 && e3.__esModule ? function() {
              return e3.default;
            } : function() {
              return e3;
            };
            return n2.d(t3, "a", t3), t3;
          }, n2.o = function(e3, t3) {
            return Object.prototype.hasOwnProperty.call(e3, t3);
          }, n2.p = "", n2(n2.s = 59);
        }([function(e2, t2) {
          function n2(e3, t3, n3, r2, i2, a2, o2) {
            try {
              var s2 = e3[a2](o2), c3 = s2.value;
            } catch (e4) {
              return void n3(e4);
            }
            s2.done ? t3(c3) : Promise.resolve(c3).then(r2, i2);
          }
          e2.exports = function(e3) {
            return function() {
              var t3 = this, r2 = arguments;
              return new Promise(function(i2, a2) {
                var o2 = e3.apply(t3, r2);
                function s2(e4) {
                  n2(o2, i2, a2, s2, c3, "next", e4);
                }
                function c3(e4) {
                  n2(o2, i2, a2, s2, c3, "throw", e4);
                }
                s2(void 0);
              });
            };
          };
        }, function(e2, t2) {
          function n2(t3) {
            return "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? e2.exports = n2 = function(e3) {
              return typeof e3;
            } : e2.exports = n2 = function(e3) {
              return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
            }, n2(t3);
          }
          e2.exports = n2;
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            if (!(e3 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          };
        }, function(e2, t2) {
          function n2(e3, t3) {
            for (var n3 = 0; n3 < t3.length; n3++) {
              var r2 = t3[n3];
              r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e3, r2.key, r2);
            }
          }
          e2.exports = function(e3, t3, r2) {
            return t3 && n2(e3.prototype, t3), r2 && n2(e3, r2), e3;
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3, n2) {
            return t3 in e3 ? Object.defineProperty(e3, t3, { value: n2, enumerable: true, configurable: true, writable: true }) : e3[t3] = n2, e3;
          };
        }, function(e2, t2) {
          function n2(t3) {
            return e2.exports = n2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(e3) {
              return e3.__proto__ || Object.getPrototypeOf(e3);
            }, n2(t3);
          }
          e2.exports = n2;
        }, function(e2, t2) {
          var n2 = Array.isArray;
          e2.exports = n2;
        }, function(e2, t2) {
          e2.exports = function(e3) {
            if (void 0 === e3)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(37), i2 = "object" == typeof self && self && self.Object === Object && self, a2 = r2 || i2 || Function("return this")();
          e2.exports = a2;
        }, function(e2, t2, n2) {
          var r2 = n2(25);
          e2.exports = function(e3, t3) {
            if ("function" != typeof t3 && null !== t3)
              throw new TypeError("Super expression must either be null or a function");
            e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, writable: true, configurable: true } }), t3 && r2(e3, t3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(1), i2 = n2(7);
          e2.exports = function(e3, t3) {
            return !t3 || "object" !== r2(t3) && "function" != typeof t3 ? i2(e3) : t3;
          };
        }, function(e2, t2, n2) {
          "use strict";
          var r2, i2 = "object" == typeof Reflect ? Reflect : null, a2 = i2 && "function" == typeof i2.apply ? i2.apply : function(e3, t3, n3) {
            return Function.prototype.apply.call(e3, t3, n3);
          };
          r2 = i2 && "function" == typeof i2.ownKeys ? i2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
            return Object.getOwnPropertyNames(e3).concat(Object.getOwnPropertySymbols(e3));
          } : function(e3) {
            return Object.getOwnPropertyNames(e3);
          };
          var o2 = Number.isNaN || function(e3) {
            return e3 != e3;
          };
          function s2() {
            s2.init.call(this);
          }
          e2.exports = s2, s2.EventEmitter = s2, s2.prototype._events = void 0, s2.prototype._eventsCount = 0, s2.prototype._maxListeners = void 0;
          var c3 = 10;
          function u2(e3) {
            if ("function" != typeof e3)
              throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e3);
          }
          function l2(e3) {
            return void 0 === e3._maxListeners ? s2.defaultMaxListeners : e3._maxListeners;
          }
          function d2(e3, t3, n3, r3) {
            var i3, a3, o3, s3;
            if (u2(n3), void 0 === (a3 = e3._events) ? (a3 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (void 0 !== a3.newListener && (e3.emit("newListener", t3, n3.listener ? n3.listener : n3), a3 = e3._events), o3 = a3[t3]), void 0 === o3)
              o3 = a3[t3] = n3, ++e3._eventsCount;
            else if ("function" == typeof o3 ? o3 = a3[t3] = r3 ? [n3, o3] : [o3, n3] : r3 ? o3.unshift(n3) : o3.push(n3), (i3 = l2(e3)) > 0 && o3.length > i3 && !o3.warned) {
              o3.warned = true;
              var c4 = new Error("Possible EventEmitter memory leak detected. " + o3.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              c4.name = "MaxListenersExceededWarning", c4.emitter = e3, c4.type = t3, c4.count = o3.length, s3 = c4, console && console.warn && console.warn(s3);
            }
            return e3;
          }
          function f2() {
            if (!this.fired)
              return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
          }
          function p2(e3, t3, n3) {
            var r3 = { fired: false, wrapFn: void 0, target: e3, type: t3, listener: n3 }, i3 = f2.bind(r3);
            return i3.listener = n3, r3.wrapFn = i3, i3;
          }
          function h2(e3, t3, n3) {
            var r3 = e3._events;
            if (void 0 === r3)
              return [];
            var i3 = r3[t3];
            return void 0 === i3 ? [] : "function" == typeof i3 ? n3 ? [i3.listener || i3] : [i3] : n3 ? function(e4) {
              for (var t4 = new Array(e4.length), n4 = 0; n4 < t4.length; ++n4)
                t4[n4] = e4[n4].listener || e4[n4];
              return t4;
            }(i3) : m2(i3, i3.length);
          }
          function v2(e3) {
            var t3 = this._events;
            if (void 0 !== t3) {
              var n3 = t3[e3];
              if ("function" == typeof n3)
                return 1;
              if (void 0 !== n3)
                return n3.length;
            }
            return 0;
          }
          function m2(e3, t3) {
            for (var n3 = new Array(t3), r3 = 0; r3 < t3; ++r3)
              n3[r3] = e3[r3];
            return n3;
          }
          Object.defineProperty(s2, "defaultMaxListeners", { enumerable: true, get: function() {
            return c3;
          }, set: function(e3) {
            if ("number" != typeof e3 || e3 < 0 || o2(e3))
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + ".");
            c3 = e3;
          } }), s2.init = function() {
            void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
          }, s2.prototype.setMaxListeners = function(e3) {
            if ("number" != typeof e3 || e3 < 0 || o2(e3))
              throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + ".");
            return this._maxListeners = e3, this;
          }, s2.prototype.getMaxListeners = function() {
            return l2(this);
          }, s2.prototype.emit = function(e3) {
            for (var t3 = [], n3 = 1; n3 < arguments.length; n3++)
              t3.push(arguments[n3]);
            var r3 = "error" === e3, i3 = this._events;
            if (void 0 !== i3)
              r3 = r3 && void 0 === i3.error;
            else if (!r3)
              return false;
            if (r3) {
              var o3;
              if (t3.length > 0 && (o3 = t3[0]), o3 instanceof Error)
                throw o3;
              var s3 = new Error("Unhandled error." + (o3 ? " (" + o3.message + ")" : ""));
              throw s3.context = o3, s3;
            }
            var c4 = i3[e3];
            if (void 0 === c4)
              return false;
            if ("function" == typeof c4)
              a2(c4, this, t3);
            else {
              var u3 = c4.length, l3 = m2(c4, u3);
              for (n3 = 0; n3 < u3; ++n3)
                a2(l3[n3], this, t3);
            }
            return true;
          }, s2.prototype.addListener = function(e3, t3) {
            return d2(this, e3, t3, false);
          }, s2.prototype.on = s2.prototype.addListener, s2.prototype.prependListener = function(e3, t3) {
            return d2(this, e3, t3, true);
          }, s2.prototype.once = function(e3, t3) {
            return u2(t3), this.on(e3, p2(this, e3, t3)), this;
          }, s2.prototype.prependOnceListener = function(e3, t3) {
            return u2(t3), this.prependListener(e3, p2(this, e3, t3)), this;
          }, s2.prototype.removeListener = function(e3, t3) {
            var n3, r3, i3, a3, o3;
            if (u2(t3), void 0 === (r3 = this._events))
              return this;
            if (void 0 === (n3 = r3[e3]))
              return this;
            if (n3 === t3 || n3.listener === t3)
              0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete r3[e3], r3.removeListener && this.emit("removeListener", e3, n3.listener || t3));
            else if ("function" != typeof n3) {
              for (i3 = -1, a3 = n3.length - 1; a3 >= 0; a3--)
                if (n3[a3] === t3 || n3[a3].listener === t3) {
                  o3 = n3[a3].listener, i3 = a3;
                  break;
                }
              if (i3 < 0)
                return this;
              0 === i3 ? n3.shift() : function(e4, t4) {
                for (; t4 + 1 < e4.length; t4++)
                  e4[t4] = e4[t4 + 1];
                e4.pop();
              }(n3, i3), 1 === n3.length && (r3[e3] = n3[0]), void 0 !== r3.removeListener && this.emit("removeListener", e3, o3 || t3);
            }
            return this;
          }, s2.prototype.off = s2.prototype.removeListener, s2.prototype.removeAllListeners = function(e3) {
            var t3, n3, r3;
            if (void 0 === (n3 = this._events))
              return this;
            if (void 0 === n3.removeListener)
              return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== n3[e3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete n3[e3]), this;
            if (0 === arguments.length) {
              var i3, a3 = Object.keys(n3);
              for (r3 = 0; r3 < a3.length; ++r3)
                "removeListener" !== (i3 = a3[r3]) && this.removeAllListeners(i3);
              return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
            }
            if ("function" == typeof (t3 = n3[e3]))
              this.removeListener(e3, t3);
            else if (void 0 !== t3)
              for (r3 = t3.length - 1; r3 >= 0; r3--)
                this.removeListener(e3, t3[r3]);
            return this;
          }, s2.prototype.listeners = function(e3) {
            return h2(this, e3, true);
          }, s2.prototype.rawListeners = function(e3) {
            return h2(this, e3, false);
          }, s2.listenerCount = function(e3, t3) {
            return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : v2.call(e3, t3);
          }, s2.prototype.listenerCount = v2, s2.prototype.eventNames = function() {
            return this._eventsCount > 0 ? r2(this._events) : [];
          };
        }, function(e2, t2, n2) {
          !function(e3) {
            "use strict";
            var t3 = "function" == typeof Map, n3 = "function" == typeof Set, r2 = "function" == typeof WeakSet, i2 = Object.keys, a2 = function(e4, t4) {
              return e4 && "object" == typeof e4 && t4.add(e4);
            }, o2 = function(e4, t4, n4, r3) {
              for (var i3, a3 = 0; a3 < e4.length; a3++)
                if (n4((i3 = e4[a3])[0], t4[0], r3) && n4(i3[1], t4[1], r3))
                  return true;
              return false;
            }, s2 = function(e4, t4, n4, r3) {
              for (var i3 = 0; i3 < e4.length; i3++)
                if (n4(e4[i3], t4, r3))
                  return true;
              return false;
            }, c3 = function(e4, t4) {
              return e4 === t4 || e4 != e4 && t4 != t4;
            }, u2 = function(e4) {
              return e4.constructor === Object;
            }, l2 = function(e4) {
              return "function" == typeof e4.then;
            }, d2 = function(e4) {
              return !(!e4.$$typeof || !e4._store);
            }, f2 = function(e4) {
              return function(t4) {
                var n4 = e4 || t4;
                return function(e5, t5, i3) {
                  void 0 === i3 && (i3 = r2 ? /* @__PURE__ */ new WeakSet() : /* @__PURE__ */ Object.create({ _values: [], add: function(e6) {
                    this._values.push(e6);
                  }, has: function(e6) {
                    return !!~this._values.indexOf(e6);
                  } }));
                  var o3 = i3.has(e5), s3 = i3.has(t5);
                  return o3 || s3 ? o3 && s3 : (a2(e5, i3), a2(t5, i3), n4(e5, t5, i3));
                };
              };
            }, p2 = function(e4) {
              var t4 = [];
              return e4.forEach(function(e5, n4) {
                return t4.push([n4, e5]);
              }), t4;
            }, h2 = function(e4) {
              var t4 = [];
              return e4.forEach(function(e5) {
                return t4.push(e5);
              }), t4;
            }, v2 = function(e4, t4, n4, r3) {
              var a3, o3 = i2(e4), u3 = i2(t4);
              if (o3.length !== u3.length)
                return false;
              for (var l3 = 0; l3 < o3.length; l3++) {
                if (a3 = o3[l3], !s2(u3, a3, c3))
                  return false;
                if (!("_owner" === a3 && d2(e4) && d2(t4) || n4(e4[a3], t4[a3], r3)))
                  return false;
              }
              return true;
            }, m2 = Array.isArray, g2 = function(e4) {
              var r3 = "function" == typeof e4 ? e4(i3) : i3;
              function i3(e5, i4, a3) {
                if (c3(e5, i4))
                  return true;
                var d3 = typeof e5;
                if (d3 !== typeof i4 || "object" !== d3 || !e5 || !i4)
                  return false;
                if (u2(e5) && u2(i4))
                  return v2(e5, i4, r3, a3);
                var f3 = m2(e5), g3 = m2(i4);
                if (f3 || g3)
                  return f3 === g3 && function(e6, t4, n4, r4) {
                    if (e6.length !== t4.length)
                      return false;
                    for (var i5 = 0; i5 < e6.length; i5++)
                      if (!n4(e6[i5], t4[i5], r4))
                        return false;
                    return true;
                  }(e5, i4, r3, a3);
                var y3 = e5 instanceof Date, _2 = i4 instanceof Date;
                if (y3 || _2)
                  return y3 === _2 && c3(e5.getTime(), i4.getTime());
                var b3, w3, k3 = e5 instanceof RegExp, M2 = i4 instanceof RegExp;
                if (k3 || M2)
                  return k3 === M2 && (w3 = i4, (b3 = e5).source === w3.source && b3.global === w3.global && b3.ignoreCase === w3.ignoreCase && b3.multiline === w3.multiline && b3.unicode === w3.unicode && b3.sticky === w3.sticky && b3.lastIndex === w3.lastIndex);
                if (l2(e5) || l2(i4))
                  return e5 === i4;
                if (t3) {
                  var S2 = e5 instanceof Map, E2 = i4 instanceof Map;
                  if (S2 || E2)
                    return S2 === E2 && function(e6, t4, n4, r4) {
                      if (e6.size !== t4.size)
                        return false;
                      for (var i5 = p2(e6), a4 = p2(t4), s3 = 0; s3 < i5.length; s3++)
                        if (!o2(a4, i5[s3], n4, r4) || !o2(i5, a4[s3], n4, r4))
                          return false;
                      return true;
                    }(e5, i4, r3, a3);
                }
                if (n3) {
                  var A2 = e5 instanceof Set, T2 = i4 instanceof Set;
                  if (A2 || T2)
                    return A2 === T2 && function(e6, t4, n4, r4) {
                      if (e6.size !== t4.size)
                        return false;
                      for (var i5 = h2(e6), a4 = h2(t4), o3 = 0; o3 < i5.length; o3++)
                        if (!s2(a4, i5[o3], n4, r4) || !s2(i5, a4[o3], n4, r4))
                          return false;
                      return true;
                    }(e5, i4, r3, a3);
                }
                return v2(e5, i4, r3, a3);
              }
              return i3;
            }, y2 = g2(f2()), _ = g2(f2(c3)), b2 = g2(), w2 = g2(function() {
              return c3;
            }), k2 = { circularDeep: y2, circularShallow: _, createCustom: g2, deep: b2, sameValueZero: c3, shallow: w2 };
            e3.circularDeepEqual = y2, e3.circularShallowEqual = _, e3.createCustomEqual = g2, e3.deepEqual = b2, e3.default = k2, e3.sameValueZeroEqual = c3, e3.shallowEqual = w2, Object.defineProperty(e3, "__esModule", { value: true });
          }(t2);
        }, function(e2, t2, n2) {
          var r2 = n2(98), i2 = n2(101);
          e2.exports = function(e3, t3) {
            var n3 = i2(e3, t3);
            return r2(n3) ? n3 : void 0;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(17), i2 = n2(76), a2 = n2(77), o2 = r2 ? r2.toStringTag : void 0;
          e2.exports = function(e3) {
            return null == e3 ? void 0 === e3 ? "[object Undefined]" : "[object Null]" : o2 && o2 in Object(e3) ? i2(e3) : a2(e3);
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return null != e3 && "object" == typeof e3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(61), i2 = n2(62), a2 = n2(63), o2 = n2(65);
          e2.exports = function(e3, t3) {
            return r2(e3) || i2(e3, t3) || a2(e3, t3) || o2();
          };
        }, function(e2, t2, n2) {
          var r2 = n2(8).Symbol;
          e2.exports = r2;
        }, function(e2, t2, n2) {
          var r2 = n2(88), i2 = n2(89), a2 = n2(90), o2 = n2(91), s2 = n2(92);
          function c3(e3) {
            var t3 = -1, n3 = null == e3 ? 0 : e3.length;
            for (this.clear(); ++t3 < n3; ) {
              var r3 = e3[t3];
              this.set(r3[0], r3[1]);
            }
          }
          c3.prototype.clear = r2, c3.prototype.delete = i2, c3.prototype.get = a2, c3.prototype.has = o2, c3.prototype.set = s2, e2.exports = c3;
        }, function(e2, t2, n2) {
          var r2 = n2(46);
          e2.exports = function(e3, t3) {
            for (var n3 = e3.length; n3--; )
              if (r2(e3[n3][0], t3))
                return n3;
            return -1;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(13)(Object, "create");
          e2.exports = r2;
        }, function(e2, t2, n2) {
          var r2 = n2(110);
          e2.exports = function(e3, t3) {
            var n3 = e3.__data__;
            return r2(t3) ? n3["string" == typeof t3 ? "string" : "hash"] : n3.map;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(14), i2 = n2(15);
          e2.exports = function(e3) {
            return "symbol" == typeof e3 || i2(e3) && "[object Symbol]" == r2(e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(22);
          e2.exports = function(e3) {
            if ("string" == typeof e3 || r2(e3))
              return e3;
            var t3 = e3 + "";
            return "0" == t3 && 1 / e3 == -1 / 0 ? "-0" : t3;
          };
        }, function(e2, t2, n2) {
          e2.exports = function(e3) {
            var t3 = {};
            function n3(r2) {
              if (t3[r2])
                return t3[r2].exports;
              var i2 = t3[r2] = { i: r2, l: false, exports: {} };
              return e3[r2].call(i2.exports, i2, i2.exports, n3), i2.l = true, i2.exports;
            }
            return n3.m = e3, n3.c = t3, n3.d = function(e4, t4, r2) {
              n3.o(e4, t4) || Object.defineProperty(e4, t4, { enumerable: true, get: r2 });
            }, n3.r = function(e4) {
              "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e4, "__esModule", { value: true });
            }, n3.t = function(e4, t4) {
              if (1 & t4 && (e4 = n3(e4)), 8 & t4)
                return e4;
              if (4 & t4 && "object" == typeof e4 && e4 && e4.__esModule)
                return e4;
              var r2 = /* @__PURE__ */ Object.create(null);
              if (n3.r(r2), Object.defineProperty(r2, "default", { enumerable: true, value: e4 }), 2 & t4 && "string" != typeof e4)
                for (var i2 in e4)
                  n3.d(r2, i2, function(t5) {
                    return e4[t5];
                  }.bind(null, i2));
              return r2;
            }, n3.n = function(e4) {
              var t4 = e4 && e4.__esModule ? function() {
                return e4.default;
              } : function() {
                return e4;
              };
              return n3.d(t4, "a", t4), t4;
            }, n3.o = function(e4, t4) {
              return Object.prototype.hasOwnProperty.call(e4, t4);
            }, n3.p = "", n3(n3.s = 90);
          }({ 17: function(e3, t3, n3) {
            "use strict";
            t3.__esModule = true, t3.default = void 0;
            var r2 = n3(18), i2 = function() {
              function e4() {
              }
              return e4.getFirstMatch = function(e5, t4) {
                var n4 = t4.match(e5);
                return n4 && n4.length > 0 && n4[1] || "";
              }, e4.getSecondMatch = function(e5, t4) {
                var n4 = t4.match(e5);
                return n4 && n4.length > 1 && n4[2] || "";
              }, e4.matchAndReturnConst = function(e5, t4, n4) {
                if (e5.test(t4))
                  return n4;
              }, e4.getWindowsVersionName = function(e5) {
                switch (e5) {
                  case "NT":
                    return "NT";
                  case "XP":
                    return "XP";
                  case "NT 5.0":
                    return "2000";
                  case "NT 5.1":
                    return "XP";
                  case "NT 5.2":
                    return "2003";
                  case "NT 6.0":
                    return "Vista";
                  case "NT 6.1":
                    return "7";
                  case "NT 6.2":
                    return "8";
                  case "NT 6.3":
                    return "8.1";
                  case "NT 10.0":
                    return "10";
                  default:
                    return;
                }
              }, e4.getMacOSVersionName = function(e5) {
                var t4 = e5.split(".").splice(0, 2).map(function(e6) {
                  return parseInt(e6, 10) || 0;
                });
                if (t4.push(0), 10 === t4[0])
                  switch (t4[1]) {
                    case 5:
                      return "Leopard";
                    case 6:
                      return "Snow Leopard";
                    case 7:
                      return "Lion";
                    case 8:
                      return "Mountain Lion";
                    case 9:
                      return "Mavericks";
                    case 10:
                      return "Yosemite";
                    case 11:
                      return "El Capitan";
                    case 12:
                      return "Sierra";
                    case 13:
                      return "High Sierra";
                    case 14:
                      return "Mojave";
                    case 15:
                      return "Catalina";
                    default:
                      return;
                  }
              }, e4.getAndroidVersionName = function(e5) {
                var t4 = e5.split(".").splice(0, 2).map(function(e6) {
                  return parseInt(e6, 10) || 0;
                });
                if (t4.push(0), !(1 === t4[0] && t4[1] < 5))
                  return 1 === t4[0] && t4[1] < 6 ? "Cupcake" : 1 === t4[0] && t4[1] >= 6 ? "Donut" : 2 === t4[0] && t4[1] < 2 ? "Eclair" : 2 === t4[0] && 2 === t4[1] ? "Froyo" : 2 === t4[0] && t4[1] > 2 ? "Gingerbread" : 3 === t4[0] ? "Honeycomb" : 4 === t4[0] && t4[1] < 1 ? "Ice Cream Sandwich" : 4 === t4[0] && t4[1] < 4 ? "Jelly Bean" : 4 === t4[0] && t4[1] >= 4 ? "KitKat" : 5 === t4[0] ? "Lollipop" : 6 === t4[0] ? "Marshmallow" : 7 === t4[0] ? "Nougat" : 8 === t4[0] ? "Oreo" : 9 === t4[0] ? "Pie" : void 0;
              }, e4.getVersionPrecision = function(e5) {
                return e5.split(".").length;
              }, e4.compareVersions = function(t4, n4, r3) {
                void 0 === r3 && (r3 = false);
                var i3 = e4.getVersionPrecision(t4), a2 = e4.getVersionPrecision(n4), o2 = Math.max(i3, a2), s2 = 0, c3 = e4.map([t4, n4], function(t5) {
                  var n5 = o2 - e4.getVersionPrecision(t5), r4 = t5 + new Array(n5 + 1).join(".0");
                  return e4.map(r4.split("."), function(e5) {
                    return new Array(20 - e5.length).join("0") + e5;
                  }).reverse();
                });
                for (r3 && (s2 = o2 - Math.min(i3, a2)), o2 -= 1; o2 >= s2; ) {
                  if (c3[0][o2] > c3[1][o2])
                    return 1;
                  if (c3[0][o2] === c3[1][o2]) {
                    if (o2 === s2)
                      return 0;
                    o2 -= 1;
                  } else if (c3[0][o2] < c3[1][o2])
                    return -1;
                }
              }, e4.map = function(e5, t4) {
                var n4, r3 = [];
                if (Array.prototype.map)
                  return Array.prototype.map.call(e5, t4);
                for (n4 = 0; n4 < e5.length; n4 += 1)
                  r3.push(t4(e5[n4]));
                return r3;
              }, e4.find = function(e5, t4) {
                var n4, r3;
                if (Array.prototype.find)
                  return Array.prototype.find.call(e5, t4);
                for (n4 = 0, r3 = e5.length; n4 < r3; n4 += 1) {
                  var i3 = e5[n4];
                  if (t4(i3, n4))
                    return i3;
                }
              }, e4.assign = function(e5) {
                for (var t4, n4, r3 = e5, i3 = arguments.length, a2 = new Array(i3 > 1 ? i3 - 1 : 0), o2 = 1; o2 < i3; o2++)
                  a2[o2 - 1] = arguments[o2];
                if (Object.assign)
                  return Object.assign.apply(Object, [e5].concat(a2));
                var s2 = function() {
                  var e6 = a2[t4];
                  "object" == typeof e6 && null !== e6 && Object.keys(e6).forEach(function(t5) {
                    r3[t5] = e6[t5];
                  });
                };
                for (t4 = 0, n4 = a2.length; t4 < n4; t4 += 1)
                  s2();
                return e5;
              }, e4.getBrowserAlias = function(e5) {
                return r2.BROWSER_ALIASES_MAP[e5];
              }, e4.getBrowserTypeByAlias = function(e5) {
                return r2.BROWSER_MAP[e5] || "";
              }, e4;
            }();
            t3.default = i2, e3.exports = t3.default;
          }, 18: function(e3, t3, n3) {
            "use strict";
            t3.__esModule = true, t3.ENGINE_MAP = t3.OS_MAP = t3.PLATFORMS_MAP = t3.BROWSER_MAP = t3.BROWSER_ALIASES_MAP = void 0, t3.BROWSER_ALIASES_MAP = { "Amazon Silk": "amazon_silk", "Android Browser": "android", Bada: "bada", BlackBerry: "blackberry", Chrome: "chrome", Chromium: "chromium", Electron: "electron", Epiphany: "epiphany", Firefox: "firefox", Focus: "focus", Generic: "generic", "Google Search": "google_search", Googlebot: "googlebot", "Internet Explorer": "ie", "K-Meleon": "k_meleon", Maxthon: "maxthon", "Microsoft Edge": "edge", "MZ Browser": "mz", "NAVER Whale Browser": "naver", Opera: "opera", "Opera Coast": "opera_coast", PhantomJS: "phantomjs", Puffin: "puffin", QupZilla: "qupzilla", QQ: "qq", QQLite: "qqlite", Safari: "safari", Sailfish: "sailfish", "Samsung Internet for Android": "samsung_internet", SeaMonkey: "seamonkey", Sleipnir: "sleipnir", Swing: "swing", Tizen: "tizen", "UC Browser": "uc", Vivaldi: "vivaldi", "WebOS Browser": "webos", WeChat: "wechat", "Yandex Browser": "yandex", Roku: "roku" }, t3.BROWSER_MAP = { amazon_silk: "Amazon Silk", android: "Android Browser", bada: "Bada", blackberry: "BlackBerry", chrome: "Chrome", chromium: "Chromium", electron: "Electron", epiphany: "Epiphany", firefox: "Firefox", focus: "Focus", generic: "Generic", googlebot: "Googlebot", google_search: "Google Search", ie: "Internet Explorer", k_meleon: "K-Meleon", maxthon: "Maxthon", edge: "Microsoft Edge", mz: "MZ Browser", naver: "NAVER Whale Browser", opera: "Opera", opera_coast: "Opera Coast", phantomjs: "PhantomJS", puffin: "Puffin", qupzilla: "QupZilla", qq: "QQ Browser", qqlite: "QQ Browser Lite", safari: "Safari", sailfish: "Sailfish", samsung_internet: "Samsung Internet for Android", seamonkey: "SeaMonkey", sleipnir: "Sleipnir", swing: "Swing", tizen: "Tizen", uc: "UC Browser", vivaldi: "Vivaldi", webos: "WebOS Browser", wechat: "WeChat", yandex: "Yandex Browser" }, t3.PLATFORMS_MAP = { tablet: "tablet", mobile: "mobile", desktop: "desktop", tv: "tv" }, t3.OS_MAP = { WindowsPhone: "Windows Phone", Windows: "Windows", MacOS: "macOS", iOS: "iOS", Android: "Android", WebOS: "WebOS", BlackBerry: "BlackBerry", Bada: "Bada", Tizen: "Tizen", Linux: "Linux", ChromeOS: "Chrome OS", PlayStation4: "PlayStation 4", Roku: "Roku" }, t3.ENGINE_MAP = { EdgeHTML: "EdgeHTML", Blink: "Blink", Trident: "Trident", Presto: "Presto", Gecko: "Gecko", WebKit: "WebKit" };
          }, 90: function(e3, t3, n3) {
            "use strict";
            t3.__esModule = true, t3.default = void 0;
            var r2, i2 = (r2 = n3(91)) && r2.__esModule ? r2 : { default: r2 }, a2 = n3(18);
            function o2(e4, t4) {
              for (var n4 = 0; n4 < t4.length; n4++) {
                var r3 = t4[n4];
                r3.enumerable = r3.enumerable || false, r3.configurable = true, "value" in r3 && (r3.writable = true), Object.defineProperty(e4, r3.key, r3);
              }
            }
            var s2 = function() {
              function e4() {
              }
              var t4, n4;
              return e4.getParser = function(e5, t5) {
                if (void 0 === t5 && (t5 = false), "string" != typeof e5)
                  throw new Error("UserAgent should be a string");
                return new i2.default(e5, t5);
              }, e4.parse = function(e5) {
                return new i2.default(e5).getResult();
              }, t4 = e4, (n4 = [{ key: "BROWSER_MAP", get: function() {
                return a2.BROWSER_MAP;
              } }, { key: "ENGINE_MAP", get: function() {
                return a2.ENGINE_MAP;
              } }, { key: "OS_MAP", get: function() {
                return a2.OS_MAP;
              } }, { key: "PLATFORMS_MAP", get: function() {
                return a2.PLATFORMS_MAP;
              } }]) && o2(t4, n4), e4;
            }();
            t3.default = s2, e3.exports = t3.default;
          }, 91: function(e3, t3, n3) {
            "use strict";
            t3.__esModule = true, t3.default = void 0;
            var r2 = c3(n3(92)), i2 = c3(n3(93)), a2 = c3(n3(94)), o2 = c3(n3(95)), s2 = c3(n3(17));
            function c3(e4) {
              return e4 && e4.__esModule ? e4 : { default: e4 };
            }
            var u2 = function() {
              function e4(e5, t5) {
                if (void 0 === t5 && (t5 = false), null == e5 || "" === e5)
                  throw new Error("UserAgent parameter can't be empty");
                this._ua = e5, this.parsedResult = {}, true !== t5 && this.parse();
              }
              var t4 = e4.prototype;
              return t4.getUA = function() {
                return this._ua;
              }, t4.test = function(e5) {
                return e5.test(this._ua);
              }, t4.parseBrowser = function() {
                var e5 = this;
                this.parsedResult.browser = {};
                var t5 = s2.default.find(r2.default, function(t6) {
                  if ("function" == typeof t6.test)
                    return t6.test(e5);
                  if (t6.test instanceof Array)
                    return t6.test.some(function(t7) {
                      return e5.test(t7);
                    });
                  throw new Error("Browser's test function is not valid");
                });
                return t5 && (this.parsedResult.browser = t5.describe(this.getUA())), this.parsedResult.browser;
              }, t4.getBrowser = function() {
                return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
              }, t4.getBrowserName = function(e5) {
                return e5 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
              }, t4.getBrowserVersion = function() {
                return this.getBrowser().version;
              }, t4.getOS = function() {
                return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
              }, t4.parseOS = function() {
                var e5 = this;
                this.parsedResult.os = {};
                var t5 = s2.default.find(i2.default, function(t6) {
                  if ("function" == typeof t6.test)
                    return t6.test(e5);
                  if (t6.test instanceof Array)
                    return t6.test.some(function(t7) {
                      return e5.test(t7);
                    });
                  throw new Error("Browser's test function is not valid");
                });
                return t5 && (this.parsedResult.os = t5.describe(this.getUA())), this.parsedResult.os;
              }, t4.getOSName = function(e5) {
                var t5 = this.getOS().name;
                return e5 ? String(t5).toLowerCase() || "" : t5 || "";
              }, t4.getOSVersion = function() {
                return this.getOS().version;
              }, t4.getPlatform = function() {
                return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
              }, t4.getPlatformType = function(e5) {
                void 0 === e5 && (e5 = false);
                var t5 = this.getPlatform().type;
                return e5 ? String(t5).toLowerCase() || "" : t5 || "";
              }, t4.parsePlatform = function() {
                var e5 = this;
                this.parsedResult.platform = {};
                var t5 = s2.default.find(a2.default, function(t6) {
                  if ("function" == typeof t6.test)
                    return t6.test(e5);
                  if (t6.test instanceof Array)
                    return t6.test.some(function(t7) {
                      return e5.test(t7);
                    });
                  throw new Error("Browser's test function is not valid");
                });
                return t5 && (this.parsedResult.platform = t5.describe(this.getUA())), this.parsedResult.platform;
              }, t4.getEngine = function() {
                return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
              }, t4.getEngineName = function(e5) {
                return e5 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
              }, t4.parseEngine = function() {
                var e5 = this;
                this.parsedResult.engine = {};
                var t5 = s2.default.find(o2.default, function(t6) {
                  if ("function" == typeof t6.test)
                    return t6.test(e5);
                  if (t6.test instanceof Array)
                    return t6.test.some(function(t7) {
                      return e5.test(t7);
                    });
                  throw new Error("Browser's test function is not valid");
                });
                return t5 && (this.parsedResult.engine = t5.describe(this.getUA())), this.parsedResult.engine;
              }, t4.parse = function() {
                return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
              }, t4.getResult = function() {
                return s2.default.assign({}, this.parsedResult);
              }, t4.satisfies = function(e5) {
                var t5 = this, n4 = {}, r3 = 0, i3 = {}, a3 = 0;
                if (Object.keys(e5).forEach(function(t6) {
                  var o4 = e5[t6];
                  "string" == typeof o4 ? (i3[t6] = o4, a3 += 1) : "object" == typeof o4 && (n4[t6] = o4, r3 += 1);
                }), r3 > 0) {
                  var o3 = Object.keys(n4), c4 = s2.default.find(o3, function(e6) {
                    return t5.isOS(e6);
                  });
                  if (c4) {
                    var u3 = this.satisfies(n4[c4]);
                    if (void 0 !== u3)
                      return u3;
                  }
                  var l2 = s2.default.find(o3, function(e6) {
                    return t5.isPlatform(e6);
                  });
                  if (l2) {
                    var d2 = this.satisfies(n4[l2]);
                    if (void 0 !== d2)
                      return d2;
                  }
                }
                if (a3 > 0) {
                  var f2 = Object.keys(i3), p2 = s2.default.find(f2, function(e6) {
                    return t5.isBrowser(e6, true);
                  });
                  if (void 0 !== p2)
                    return this.compareVersion(i3[p2]);
                }
              }, t4.isBrowser = function(e5, t5) {
                void 0 === t5 && (t5 = false);
                var n4 = this.getBrowserName().toLowerCase(), r3 = e5.toLowerCase(), i3 = s2.default.getBrowserTypeByAlias(r3);
                return t5 && i3 && (r3 = i3.toLowerCase()), r3 === n4;
              }, t4.compareVersion = function(e5) {
                var t5 = [0], n4 = e5, r3 = false, i3 = this.getBrowserVersion();
                if ("string" == typeof i3)
                  return ">" === e5[0] || "<" === e5[0] ? (n4 = e5.substr(1), "=" === e5[1] ? (r3 = true, n4 = e5.substr(2)) : t5 = [], ">" === e5[0] ? t5.push(1) : t5.push(-1)) : "=" === e5[0] ? n4 = e5.substr(1) : "~" === e5[0] && (r3 = true, n4 = e5.substr(1)), t5.indexOf(s2.default.compareVersions(i3, n4, r3)) > -1;
              }, t4.isOS = function(e5) {
                return this.getOSName(true) === String(e5).toLowerCase();
              }, t4.isPlatform = function(e5) {
                return this.getPlatformType(true) === String(e5).toLowerCase();
              }, t4.isEngine = function(e5) {
                return this.getEngineName(true) === String(e5).toLowerCase();
              }, t4.is = function(e5) {
                return this.isBrowser(e5) || this.isOS(e5) || this.isPlatform(e5);
              }, t4.some = function(e5) {
                var t5 = this;
                return void 0 === e5 && (e5 = []), e5.some(function(e6) {
                  return t5.is(e6);
                });
              }, e4;
            }();
            t3.default = u2, e3.exports = t3.default;
          }, 92: function(e3, t3, n3) {
            "use strict";
            t3.__esModule = true, t3.default = void 0;
            var r2, i2 = (r2 = n3(17)) && r2.__esModule ? r2 : { default: r2 }, a2 = /version\/(\d+(\.?_?\d+)+)/i, o2 = [{ test: [/googlebot/i], describe: function(e4) {
              var t4 = { name: "Googlebot" }, n4 = i2.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/opera/i], describe: function(e4) {
              var t4 = { name: "Opera" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/opr\/|opios/i], describe: function(e4) {
              var t4 = { name: "Opera" }, n4 = i2.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/SamsungBrowser/i], describe: function(e4) {
              var t4 = { name: "Samsung Internet for Android" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/Whale/i], describe: function(e4) {
              var t4 = { name: "NAVER Whale Browser" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/MZBrowser/i], describe: function(e4) {
              var t4 = { name: "MZ Browser" }, n4 = i2.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/focus/i], describe: function(e4) {
              var t4 = { name: "Focus" }, n4 = i2.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/swing/i], describe: function(e4) {
              var t4 = { name: "Swing" }, n4 = i2.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/coast/i], describe: function(e4) {
              var t4 = { name: "Opera Coast" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/yabrowser/i], describe: function(e4) {
              var t4 = { name: "Yandex Browser" }, n4 = i2.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/ucbrowser/i], describe: function(e4) {
              var t4 = { name: "UC Browser" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/Maxthon|mxios/i], describe: function(e4) {
              var t4 = { name: "Maxthon" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/epiphany/i], describe: function(e4) {
              var t4 = { name: "Epiphany" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/puffin/i], describe: function(e4) {
              var t4 = { name: "Puffin" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/sleipnir/i], describe: function(e4) {
              var t4 = { name: "Sleipnir" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/k-meleon/i], describe: function(e4) {
              var t4 = { name: "K-Meleon" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/micromessenger/i], describe: function(e4) {
              var t4 = { name: "WeChat" }, n4 = i2.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/qqbrowser/i], describe: function(e4) {
              var t4 = { name: /qqbrowserlite/i.test(e4) ? "QQ Browser Lite" : "QQ Browser" }, n4 = i2.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/msie|trident/i], describe: function(e4) {
              var t4 = { name: "Internet Explorer" }, n4 = i2.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/\sedg\//i], describe: function(e4) {
              var t4 = { name: "Microsoft Edge" }, n4 = i2.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/edg([ea]|ios)/i], describe: function(e4) {
              var t4 = { name: "Microsoft Edge" }, n4 = i2.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/vivaldi/i], describe: function(e4) {
              var t4 = { name: "Vivaldi" }, n4 = i2.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/seamonkey/i], describe: function(e4) {
              var t4 = { name: "SeaMonkey" }, n4 = i2.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/sailfish/i], describe: function(e4) {
              var t4 = { name: "Sailfish" }, n4 = i2.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/silk/i], describe: function(e4) {
              var t4 = { name: "Amazon Silk" }, n4 = i2.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/phantom/i], describe: function(e4) {
              var t4 = { name: "PhantomJS" }, n4 = i2.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/slimerjs/i], describe: function(e4) {
              var t4 = { name: "SlimerJS" }, n4 = i2.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: function(e4) {
              var t4 = { name: "BlackBerry" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/(web|hpw)[o0]s/i], describe: function(e4) {
              var t4 = { name: "WebOS Browser" }, n4 = i2.default.getFirstMatch(a2, e4) || i2.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/bada/i], describe: function(e4) {
              var t4 = { name: "Bada" }, n4 = i2.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/tizen/i], describe: function(e4) {
              var t4 = { name: "Tizen" }, n4 = i2.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/qupzilla/i], describe: function(e4) {
              var t4 = { name: "QupZilla" }, n4 = i2.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/firefox|iceweasel|fxios/i], describe: function(e4) {
              var t4 = { name: "Firefox" }, n4 = i2.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/electron/i], describe: function(e4) {
              var t4 = { name: "Electron" }, n4 = i2.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/chromium/i], describe: function(e4) {
              var t4 = { name: "Chromium" }, n4 = i2.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e4) || i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/chrome|crios|crmo/i], describe: function(e4) {
              var t4 = { name: "Chrome" }, n4 = i2.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/GSA/i], describe: function(e4) {
              var t4 = { name: "Google Search" }, n4 = i2.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: function(e4) {
              var t4 = !e4.test(/like android/i), n4 = e4.test(/android/i);
              return t4 && n4;
            }, describe: function(e4) {
              var t4 = { name: "Android Browser" }, n4 = i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/playstation 4/i], describe: function(e4) {
              var t4 = { name: "PlayStation 4" }, n4 = i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/safari|applewebkit/i], describe: function(e4) {
              var t4 = { name: "Safari" }, n4 = i2.default.getFirstMatch(a2, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/.*/i], describe: function(e4) {
              var t4 = -1 !== e4.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
              return { name: i2.default.getFirstMatch(t4, e4), version: i2.default.getSecondMatch(t4, e4) };
            } }];
            t3.default = o2, e3.exports = t3.default;
          }, 93: function(e3, t3, n3) {
            "use strict";
            t3.__esModule = true, t3.default = void 0;
            var r2, i2 = (r2 = n3(17)) && r2.__esModule ? r2 : { default: r2 }, a2 = n3(18), o2 = [{ test: [/Roku\/DVP/], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e4);
              return { name: a2.OS_MAP.Roku, version: t4 };
            } }, { test: [/windows phone/i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e4);
              return { name: a2.OS_MAP.WindowsPhone, version: t4 };
            } }, { test: [/windows /i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e4), n4 = i2.default.getWindowsVersionName(t4);
              return { name: a2.OS_MAP.Windows, version: t4, versionName: n4 };
            } }, { test: [/Macintosh(.*?) FxiOS(.*?) Version\//], describe: function(e4) {
              var t4 = i2.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e4);
              return { name: a2.OS_MAP.iOS, version: t4 };
            } }, { test: [/macintosh/i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e4).replace(/[_\s]/g, "."), n4 = i2.default.getMacOSVersionName(t4), r3 = { name: a2.OS_MAP.MacOS, version: t4 };
              return n4 && (r3.versionName = n4), r3;
            } }, { test: [/(ipod|iphone|ipad)/i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e4).replace(/[_\s]/g, ".");
              return { name: a2.OS_MAP.iOS, version: t4 };
            } }, { test: function(e4) {
              var t4 = !e4.test(/like android/i), n4 = e4.test(/android/i);
              return t4 && n4;
            }, describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e4), n4 = i2.default.getAndroidVersionName(t4), r3 = { name: a2.OS_MAP.Android, version: t4 };
              return n4 && (r3.versionName = n4), r3;
            } }, { test: [/(web|hpw)[o0]s/i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e4), n4 = { name: a2.OS_MAP.WebOS };
              return t4 && t4.length && (n4.version = t4), n4;
            } }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e4) || i2.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e4) || i2.default.getFirstMatch(/\bbb(\d+)/i, e4);
              return { name: a2.OS_MAP.BlackBerry, version: t4 };
            } }, { test: [/bada/i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e4);
              return { name: a2.OS_MAP.Bada, version: t4 };
            } }, { test: [/tizen/i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e4);
              return { name: a2.OS_MAP.Tizen, version: t4 };
            } }, { test: [/linux/i], describe: function() {
              return { name: a2.OS_MAP.Linux };
            } }, { test: [/CrOS/], describe: function() {
              return { name: a2.OS_MAP.ChromeOS };
            } }, { test: [/PlayStation 4/], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e4);
              return { name: a2.OS_MAP.PlayStation4, version: t4 };
            } }];
            t3.default = o2, e3.exports = t3.default;
          }, 94: function(e3, t3, n3) {
            "use strict";
            t3.__esModule = true, t3.default = void 0;
            var r2, i2 = (r2 = n3(17)) && r2.__esModule ? r2 : { default: r2 }, a2 = n3(18), o2 = [{ test: [/googlebot/i], describe: function() {
              return { type: "bot", vendor: "Google" };
            } }, { test: [/huawei/i], describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/(can-l01)/i, e4) && "Nova", n4 = { type: a2.PLATFORMS_MAP.mobile, vendor: "Huawei" };
              return t4 && (n4.model = t4), n4;
            } }, { test: [/nexus\s*(?:7|8|9|10).*/i], describe: function() {
              return { type: a2.PLATFORMS_MAP.tablet, vendor: "Nexus" };
            } }, { test: [/ipad/i], describe: function() {
              return { type: a2.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
            } }, { test: [/Macintosh(.*?) FxiOS(.*?) Version\//], describe: function() {
              return { type: a2.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
            } }, { test: [/kftt build/i], describe: function() {
              return { type: a2.PLATFORMS_MAP.tablet, vendor: "Amazon", model: "Kindle Fire HD 7" };
            } }, { test: [/silk/i], describe: function() {
              return { type: a2.PLATFORMS_MAP.tablet, vendor: "Amazon" };
            } }, { test: [/tablet(?! pc)/i], describe: function() {
              return { type: a2.PLATFORMS_MAP.tablet };
            } }, { test: function(e4) {
              var t4 = e4.test(/ipod|iphone/i), n4 = e4.test(/like (ipod|iphone)/i);
              return t4 && !n4;
            }, describe: function(e4) {
              var t4 = i2.default.getFirstMatch(/(ipod|iphone)/i, e4);
              return { type: a2.PLATFORMS_MAP.mobile, vendor: "Apple", model: t4 };
            } }, { test: [/nexus\s*[0-6].*/i, /galaxy nexus/i], describe: function() {
              return { type: a2.PLATFORMS_MAP.mobile, vendor: "Nexus" };
            } }, { test: [/[^-]mobi/i], describe: function() {
              return { type: a2.PLATFORMS_MAP.mobile };
            } }, { test: function(e4) {
              return "blackberry" === e4.getBrowserName(true);
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.mobile, vendor: "BlackBerry" };
            } }, { test: function(e4) {
              return "bada" === e4.getBrowserName(true);
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.mobile };
            } }, { test: function(e4) {
              return "windows phone" === e4.getBrowserName();
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.mobile, vendor: "Microsoft" };
            } }, { test: function(e4) {
              var t4 = Number(String(e4.getOSVersion()).split(".")[0]);
              return "android" === e4.getOSName(true) && t4 >= 3;
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.tablet };
            } }, { test: function(e4) {
              return "android" === e4.getOSName(true);
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.mobile };
            } }, { test: function(e4) {
              return "macos" === e4.getOSName(true);
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.desktop, vendor: "Apple" };
            } }, { test: function(e4) {
              return "windows" === e4.getOSName(true);
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.desktop };
            } }, { test: function(e4) {
              return "linux" === e4.getOSName(true);
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.desktop };
            } }, { test: function(e4) {
              return "playstation 4" === e4.getOSName(true);
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.tv };
            } }, { test: function(e4) {
              return "roku" === e4.getOSName(true);
            }, describe: function() {
              return { type: a2.PLATFORMS_MAP.tv };
            } }];
            t3.default = o2, e3.exports = t3.default;
          }, 95: function(e3, t3, n3) {
            "use strict";
            t3.__esModule = true, t3.default = void 0;
            var r2, i2 = (r2 = n3(17)) && r2.__esModule ? r2 : { default: r2 }, a2 = n3(18), o2 = [{ test: function(e4) {
              return "microsoft edge" === e4.getBrowserName(true);
            }, describe: function(e4) {
              if (/\sedg\//i.test(e4))
                return { name: a2.ENGINE_MAP.Blink };
              var t4 = i2.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e4);
              return { name: a2.ENGINE_MAP.EdgeHTML, version: t4 };
            } }, { test: [/trident/i], describe: function(e4) {
              var t4 = { name: a2.ENGINE_MAP.Trident }, n4 = i2.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: function(e4) {
              return e4.test(/presto/i);
            }, describe: function(e4) {
              var t4 = { name: a2.ENGINE_MAP.Presto }, n4 = i2.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: function(e4) {
              var t4 = e4.test(/gecko/i), n4 = e4.test(/like gecko/i);
              return t4 && !n4;
            }, describe: function(e4) {
              var t4 = { name: a2.ENGINE_MAP.Gecko }, n4 = i2.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }, { test: [/(apple)?webkit\/537\.36/i], describe: function() {
              return { name: a2.ENGINE_MAP.Blink };
            } }, { test: [/(apple)?webkit/i], describe: function(e4) {
              var t4 = { name: a2.ENGINE_MAP.WebKit }, n4 = i2.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e4);
              return n4 && (t4.version = n4), t4;
            } }];
            t3.default = o2, e3.exports = t3.default;
          } });
        }, function(e2, t2) {
          function n2(t3, r2) {
            return e2.exports = n2 = Object.setPrototypeOf || function(e3, t4) {
              return e3.__proto__ = t4, e3;
            }, n2(t3, r2);
          }
          e2.exports = n2;
        }, function(e2, t2, n2) {
          var r2 = n2(73), i2 = n2(81), a2 = n2(28);
          e2.exports = function(e3) {
            return a2(e3) ? r2(e3) : i2(e3);
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return "number" == typeof e3 && e3 > -1 && e3 % 1 == 0 && e3 <= 9007199254740991;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(43), i2 = n2(27);
          e2.exports = function(e3) {
            return null != e3 && i2(e3.length) && !r2(e3);
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            var t3 = typeof e3;
            return null != e3 && ("object" == t3 || "function" == t3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(13)(n2(8), "Map");
          e2.exports = r2;
        }, function(e2, t2, n2) {
          var r2 = n2(102), i2 = n2(109), a2 = n2(111), o2 = n2(112), s2 = n2(113);
          function c3(e3) {
            var t3 = -1, n3 = null == e3 ? 0 : e3.length;
            for (this.clear(); ++t3 < n3; ) {
              var r3 = e3[t3];
              this.set(r3[0], r3[1]);
            }
          }
          c3.prototype.clear = r2, c3.prototype.delete = i2, c3.prototype.get = a2, c3.prototype.has = o2, c3.prototype.set = s2, e2.exports = c3;
        }, function(e2, t2, n2) {
          var r2 = n2(52), i2 = n2(23);
          e2.exports = function(e3, t3) {
            for (var n3 = 0, a2 = (t3 = r2(t3, e3)).length; null != e3 && n3 < a2; )
              e3 = e3[i2(t3[n3++])];
            return n3 && n3 == a2 ? e3 : void 0;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(6), i2 = n2(22), a2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, o2 = /^\w*$/;
          e2.exports = function(e3, t3) {
            if (r2(e3))
              return false;
            var n3 = typeof e3;
            return !("number" != n3 && "symbol" != n3 && "boolean" != n3 && null != e3 && !i2(e3)) || (o2.test(e3) || !a2.test(e3) || null != t3 && e3 in Object(t3));
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            for (var n2 = -1, r2 = null == e3 ? 0 : e3.length, i2 = 0, a2 = []; ++n2 < r2; ) {
              var o2 = e3[n2];
              t3(o2, n2, e3) && (a2[i2++] = o2);
            }
            return a2;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(70), i2 = n2(85)(r2);
          e2.exports = i2;
        }, function(e2, t2, n2) {
          var r2 = n2(75), i2 = n2(15), a2 = Object.prototype, o2 = a2.hasOwnProperty, s2 = a2.propertyIsEnumerable, c3 = r2(function() {
            return arguments;
          }()) ? r2 : function(e3) {
            return i2(e3) && o2.call(e3, "callee") && !s2.call(e3, "callee");
          };
          e2.exports = c3;
        }, function(e2, t2) {
          var n2 = "object" == typeof window && window && window.Object === Object && window;
          e2.exports = n2;
        }, function(e2, t2, n2) {
          (function(e3) {
            var r2 = n2(8), i2 = n2(78), a2 = t2 && !t2.nodeType && t2, o2 = a2 && "object" == typeof e3 && e3 && !e3.nodeType && e3, s2 = o2 && o2.exports === a2 ? r2.Buffer : void 0, c3 = (s2 ? s2.isBuffer : void 0) || i2;
            e3.exports = c3;
          }).call(this, n2(39)(e2));
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return e3.webpackPolyfill || (e3.deprecate = function() {
            }, e3.paths = [], e3.children || (e3.children = []), Object.defineProperty(e3, "loaded", { enumerable: true, get: function() {
              return e3.l;
            } }), Object.defineProperty(e3, "id", { enumerable: true, get: function() {
              return e3.i;
            } }), e3.webpackPolyfill = 1), e3;
          };
        }, function(e2, t2) {
          var n2 = /^(?:0|[1-9]\d*)$/;
          e2.exports = function(e3, t3) {
            var r2 = typeof e3;
            return !!(t3 = null == t3 ? 9007199254740991 : t3) && ("number" == r2 || "symbol" != r2 && n2.test(e3)) && e3 > -1 && e3 % 1 == 0 && e3 < t3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(79), i2 = n2(42), a2 = n2(80), o2 = a2 && a2.isTypedArray, s2 = o2 ? i2(o2) : r2;
          e2.exports = s2;
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return function(t3) {
              return e3(t3);
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(14), i2 = n2(29);
          e2.exports = function(e3) {
            if (!i2(e3))
              return false;
            var t3 = r2(e3);
            return "[object Function]" == t3 || "[object GeneratorFunction]" == t3 || "[object AsyncFunction]" == t3 || "[object Proxy]" == t3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(86), i2 = n2(136), a2 = n2(54), o2 = n2(6), s2 = n2(146);
          e2.exports = function(e3) {
            return "function" == typeof e3 ? e3 : null == e3 ? a2 : "object" == typeof e3 ? o2(e3) ? i2(e3[0], e3[1]) : r2(e3) : s2(e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(18), i2 = n2(93), a2 = n2(94), o2 = n2(95), s2 = n2(96), c3 = n2(97);
          function u2(e3) {
            var t3 = this.__data__ = new r2(e3);
            this.size = t3.size;
          }
          u2.prototype.clear = i2, u2.prototype.delete = a2, u2.prototype.get = o2, u2.prototype.has = s2, u2.prototype.set = c3, e2.exports = u2;
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            return e3 === t3 || e3 != e3 && t3 != t3;
          };
        }, function(e2, t2) {
          var n2 = Function.prototype.toString;
          e2.exports = function(e3) {
            if (null != e3) {
              try {
                return n2.call(e3);
              } catch (e4) {
              }
              try {
                return e3 + "";
              } catch (e4) {
              }
            }
            return "";
          };
        }, function(e2, t2, n2) {
          var r2 = n2(114), i2 = n2(15);
          e2.exports = function e3(t3, n3, a2, o2, s2) {
            return t3 === n3 || (null == t3 || null == n3 || !i2(t3) && !i2(n3) ? t3 != t3 && n3 != n3 : r2(t3, n3, a2, o2, e3, s2));
          };
        }, function(e2, t2, n2) {
          var r2 = n2(115), i2 = n2(118), a2 = n2(119);
          e2.exports = function(e3, t3, n3, o2, s2, c3) {
            var u2 = 1 & n3, l2 = e3.length, d2 = t3.length;
            if (l2 != d2 && !(u2 && d2 > l2))
              return false;
            var f2 = c3.get(e3), p2 = c3.get(t3);
            if (f2 && p2)
              return f2 == t3 && p2 == e3;
            var h2 = -1, v2 = true, m2 = 2 & n3 ? new r2() : void 0;
            for (c3.set(e3, t3), c3.set(t3, e3); ++h2 < l2; ) {
              var g2 = e3[h2], y2 = t3[h2];
              if (o2)
                var _ = u2 ? o2(y2, g2, h2, t3, e3, c3) : o2(g2, y2, h2, e3, t3, c3);
              if (void 0 !== _) {
                if (_)
                  continue;
                v2 = false;
                break;
              }
              if (m2) {
                if (!i2(t3, function(e4, t4) {
                  if (!a2(m2, t4) && (g2 === e4 || s2(g2, e4, n3, o2, c3)))
                    return m2.push(t4);
                })) {
                  v2 = false;
                  break;
                }
              } else if (g2 !== y2 && !s2(g2, y2, n3, o2, c3)) {
                v2 = false;
                break;
              }
            }
            return c3.delete(e3), c3.delete(t3), v2;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(29);
          e2.exports = function(e3) {
            return e3 == e3 && !r2(e3);
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            return function(n2) {
              return null != n2 && (n2[e3] === t3 && (void 0 !== t3 || e3 in Object(n2)));
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(6), i2 = n2(33), a2 = n2(138), o2 = n2(141);
          e2.exports = function(e3, t3) {
            return r2(e3) ? e3 : i2(e3, t3) ? [e3] : a2(o2(e3));
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            for (var n2 = -1, r2 = null == e3 ? 0 : e3.length, i2 = Array(r2); ++n2 < r2; )
              i2[n2] = t3(e3[n2], n2, e3);
            return i2;
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return e3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(60);
          e2.exports = function(e3, t3) {
            if (null == e3)
              return {};
            var n3, i2, a2 = r2(e3, t3);
            if (Object.getOwnPropertySymbols) {
              var o2 = Object.getOwnPropertySymbols(e3);
              for (i2 = 0; i2 < o2.length; i2++)
                n3 = o2[i2], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (a2[n3] = e3[n3]);
            }
            return a2;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(5), i2 = n2(25), a2 = n2(66), o2 = n2(67);
          function s2(t3) {
            var n3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
            return e2.exports = s2 = function(e3) {
              if (null === e3 || !a2(e3))
                return e3;
              if ("function" != typeof e3)
                throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== n3) {
                if (n3.has(e3))
                  return n3.get(e3);
                n3.set(e3, t4);
              }
              function t4() {
                return o2(e3, arguments, r2(this).constructor);
              }
              return t4.prototype = Object.create(e3.prototype, { constructor: { value: t4, enumerable: false, writable: true, configurable: true } }), i2(t4, e3);
            }, s2(t3);
          }
          e2.exports = s2;
        }, function(e2, t2, n2) {
          var r2 = n2(34), i2 = n2(69), a2 = n2(44), o2 = n2(6);
          e2.exports = function(e3, t3) {
            return (o2(e3) ? r2 : i2)(e3, a2(t3, 3));
          };
        }, function(e2, t2, n2) {
          var r2 = n2(149), i2 = n2(6);
          e2.exports = function(e3, t3, n3, a2) {
            return null == e3 ? [] : (i2(t3) || (t3 = null == t3 ? [] : [t3]), i2(n3 = a2 ? void 0 : n3) || (n3 = null == n3 ? [] : [n3]), r2(e3, t3, n3));
          };
        }, function(e2, t2, n2) {
          var r2 = n2(154);
          e2.exports = r2.default;
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            if (null == e3)
              return {};
            var n2, r2, i2 = {}, a2 = Object.keys(e3);
            for (r2 = 0; r2 < a2.length; r2++)
              n2 = a2[r2], t3.indexOf(n2) >= 0 || (i2[n2] = e3[n2]);
            return i2;
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            if (Array.isArray(e3))
              return e3;
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            if ("undefined" != typeof Symbol && Symbol.iterator in Object(e3)) {
              var n2 = [], r2 = true, i2 = false, a2 = void 0;
              try {
                for (var o2, s2 = e3[Symbol.iterator](); !(r2 = (o2 = s2.next()).done) && (n2.push(o2.value), !t3 || n2.length !== t3); r2 = true)
                  ;
              } catch (e4) {
                i2 = true, a2 = e4;
              } finally {
                try {
                  r2 || null == s2.return || s2.return();
                } finally {
                  if (i2)
                    throw a2;
                }
              }
              return n2;
            }
          };
        }, function(e2, t2, n2) {
          var r2 = n2(64);
          e2.exports = function(e3, t3) {
            if (e3) {
              if ("string" == typeof e3)
                return r2(e3, t3);
              var n3 = Object.prototype.toString.call(e3).slice(8, -1);
              return "Object" === n3 && e3.constructor && (n3 = e3.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(e3) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? r2(e3, t3) : void 0;
            }
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            (null == t3 || t3 > e3.length) && (t3 = e3.length);
            for (var n2 = 0, r2 = new Array(t3); n2 < t3; n2++)
              r2[n2] = e3[n2];
            return r2;
          };
        }, function(e2, t2) {
          e2.exports = function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return -1 !== Function.toString.call(e3).indexOf("[native code]");
          };
        }, function(e2, t2, n2) {
          var r2 = n2(25), i2 = n2(68);
          function a2(t3, n3, o2) {
            return i2() ? e2.exports = a2 = Reflect.construct : e2.exports = a2 = function(e3, t4, n4) {
              var i3 = [null];
              i3.push.apply(i3, t4);
              var a3 = new (Function.bind.apply(e3, i3))();
              return n4 && r2(a3, n4.prototype), a3;
            }, a2.apply(null, arguments);
          }
          e2.exports = a2;
        }, function(e2, t2) {
          e2.exports = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
              })), true;
            } catch (e3) {
              return false;
            }
          };
        }, function(e2, t2, n2) {
          var r2 = n2(35);
          e2.exports = function(e3, t3) {
            var n3 = [];
            return r2(e3, function(e4, r3, i2) {
              t3(e4, r3, i2) && n3.push(e4);
            }), n3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(71), i2 = n2(26);
          e2.exports = function(e3, t3) {
            return e3 && r2(e3, t3, i2);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(72)();
          e2.exports = r2;
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return function(t3, n2, r2) {
              for (var i2 = -1, a2 = Object(t3), o2 = r2(t3), s2 = o2.length; s2--; ) {
                var c3 = o2[e3 ? s2 : ++i2];
                if (false === n2(a2[c3], c3, a2))
                  break;
              }
              return t3;
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(74), i2 = n2(36), a2 = n2(6), o2 = n2(38), s2 = n2(40), c3 = n2(41), u2 = Object.prototype.hasOwnProperty;
          e2.exports = function(e3, t3) {
            var n3 = a2(e3), l2 = !n3 && i2(e3), d2 = !n3 && !l2 && o2(e3), f2 = !n3 && !l2 && !d2 && c3(e3), p2 = n3 || l2 || d2 || f2, h2 = p2 ? r2(e3.length, String) : [], v2 = h2.length;
            for (var m2 in e3)
              !t3 && !u2.call(e3, m2) || p2 && ("length" == m2 || d2 && ("offset" == m2 || "parent" == m2) || f2 && ("buffer" == m2 || "byteLength" == m2 || "byteOffset" == m2) || s2(m2, v2)) || h2.push(m2);
            return h2;
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            for (var n2 = -1, r2 = Array(e3); ++n2 < e3; )
              r2[n2] = t3(n2);
            return r2;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(14), i2 = n2(15);
          e2.exports = function(e3) {
            return i2(e3) && "[object Arguments]" == r2(e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(17), i2 = Object.prototype, a2 = i2.hasOwnProperty, o2 = i2.toString, s2 = r2 ? r2.toStringTag : void 0;
          e2.exports = function(e3) {
            var t3 = a2.call(e3, s2), n3 = e3[s2];
            try {
              e3[s2] = void 0;
              var r3 = true;
            } catch (e4) {
            }
            var i3 = o2.call(e3);
            return r3 && (t3 ? e3[s2] = n3 : delete e3[s2]), i3;
          };
        }, function(e2, t2) {
          var n2 = Object.prototype.toString;
          e2.exports = function(e3) {
            return n2.call(e3);
          };
        }, function(e2, t2) {
          e2.exports = function() {
            return false;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(14), i2 = n2(27), a2 = n2(15), o2 = {};
          o2["[object Float32Array]"] = o2["[object Float64Array]"] = o2["[object Int8Array]"] = o2["[object Int16Array]"] = o2["[object Int32Array]"] = o2["[object Uint8Array]"] = o2["[object Uint8ClampedArray]"] = o2["[object Uint16Array]"] = o2["[object Uint32Array]"] = true, o2["[object Arguments]"] = o2["[object Array]"] = o2["[object ArrayBuffer]"] = o2["[object Boolean]"] = o2["[object DataView]"] = o2["[object Date]"] = o2["[object Error]"] = o2["[object Function]"] = o2["[object Map]"] = o2["[object Number]"] = o2["[object Object]"] = o2["[object RegExp]"] = o2["[object Set]"] = o2["[object String]"] = o2["[object WeakMap]"] = false, e2.exports = function(e3) {
            return a2(e3) && i2(e3.length) && !!o2[r2(e3)];
          };
        }, function(e2, t2, n2) {
          (function(e3) {
            var r2 = n2(37), i2 = t2 && !t2.nodeType && t2, a2 = i2 && "object" == typeof e3 && e3 && !e3.nodeType && e3, o2 = a2 && a2.exports === i2 && r2.process, s2 = function() {
              try {
                var e4 = a2 && a2.require && a2.require("util").types;
                return e4 || o2 && o2.binding && o2.binding("util");
              } catch (e5) {
              }
            }();
            e3.exports = s2;
          }).call(this, n2(39)(e2));
        }, function(e2, t2, n2) {
          var r2 = n2(82), i2 = n2(83), a2 = Object.prototype.hasOwnProperty;
          e2.exports = function(e3) {
            if (!r2(e3))
              return i2(e3);
            var t3 = [];
            for (var n3 in Object(e3))
              a2.call(e3, n3) && "constructor" != n3 && t3.push(n3);
            return t3;
          };
        }, function(e2, t2) {
          var n2 = Object.prototype;
          e2.exports = function(e3) {
            var t3 = e3 && e3.constructor;
            return e3 === ("function" == typeof t3 && t3.prototype || n2);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(84)(Object.keys, Object);
          e2.exports = r2;
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            return function(n2) {
              return e3(t3(n2));
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(28);
          e2.exports = function(e3, t3) {
            return function(n3, i2) {
              if (null == n3)
                return n3;
              if (!r2(n3))
                return e3(n3, i2);
              for (var a2 = n3.length, o2 = t3 ? a2 : -1, s2 = Object(n3); (t3 ? o2-- : ++o2 < a2) && false !== i2(s2[o2], o2, s2); )
                ;
              return n3;
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(87), i2 = n2(135), a2 = n2(51);
          e2.exports = function(e3) {
            var t3 = i2(e3);
            return 1 == t3.length && t3[0][2] ? a2(t3[0][0], t3[0][1]) : function(n3) {
              return n3 === e3 || r2(n3, e3, t3);
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(45), i2 = n2(48);
          e2.exports = function(e3, t3, n3, a2) {
            var o2 = n3.length, s2 = o2, c3 = !a2;
            if (null == e3)
              return !s2;
            for (e3 = Object(e3); o2--; ) {
              var u2 = n3[o2];
              if (c3 && u2[2] ? u2[1] !== e3[u2[0]] : !(u2[0] in e3))
                return false;
            }
            for (; ++o2 < s2; ) {
              var l2 = (u2 = n3[o2])[0], d2 = e3[l2], f2 = u2[1];
              if (c3 && u2[2]) {
                if (void 0 === d2 && !(l2 in e3))
                  return false;
              } else {
                var p2 = new r2();
                if (a2)
                  var h2 = a2(d2, f2, l2, e3, t3, p2);
                if (!(void 0 === h2 ? i2(f2, d2, 3, a2, p2) : h2))
                  return false;
              }
            }
            return true;
          };
        }, function(e2, t2) {
          e2.exports = function() {
            this.__data__ = [], this.size = 0;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(19), i2 = Array.prototype.splice;
          e2.exports = function(e3) {
            var t3 = this.__data__, n3 = r2(t3, e3);
            return !(n3 < 0) && (n3 == t3.length - 1 ? t3.pop() : i2.call(t3, n3, 1), --this.size, true);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(19);
          e2.exports = function(e3) {
            var t3 = this.__data__, n3 = r2(t3, e3);
            return n3 < 0 ? void 0 : t3[n3][1];
          };
        }, function(e2, t2, n2) {
          var r2 = n2(19);
          e2.exports = function(e3) {
            return r2(this.__data__, e3) > -1;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(19);
          e2.exports = function(e3, t3) {
            var n3 = this.__data__, i2 = r2(n3, e3);
            return i2 < 0 ? (++this.size, n3.push([e3, t3])) : n3[i2][1] = t3, this;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(18);
          e2.exports = function() {
            this.__data__ = new r2(), this.size = 0;
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            var t3 = this.__data__, n2 = t3.delete(e3);
            return this.size = t3.size, n2;
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return this.__data__.get(e3);
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return this.__data__.has(e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(18), i2 = n2(30), a2 = n2(31);
          e2.exports = function(e3, t3) {
            var n3 = this.__data__;
            if (n3 instanceof r2) {
              var o2 = n3.__data__;
              if (!i2 || o2.length < 199)
                return o2.push([e3, t3]), this.size = ++n3.size, this;
              n3 = this.__data__ = new a2(o2);
            }
            return n3.set(e3, t3), this.size = n3.size, this;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(43), i2 = n2(99), a2 = n2(29), o2 = n2(47), s2 = /^\[object .+?Constructor\]$/, c3 = Function.prototype, u2 = Object.prototype, l2 = c3.toString, d2 = u2.hasOwnProperty, f2 = RegExp("^" + l2.call(d2).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
          e2.exports = function(e3) {
            return !(!a2(e3) || i2(e3)) && (r2(e3) ? f2 : s2).test(o2(e3));
          };
        }, function(e2, t2, n2) {
          var r2, i2 = n2(100), a2 = (r2 = /[^.]+$/.exec(i2 && i2.keys && i2.keys.IE_PROTO || "")) ? "Symbol(src)_1." + r2 : "";
          e2.exports = function(e3) {
            return !!a2 && a2 in e3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(8)["__core-js_shared__"];
          e2.exports = r2;
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            return null == e3 ? void 0 : e3[t3];
          };
        }, function(e2, t2, n2) {
          var r2 = n2(103), i2 = n2(18), a2 = n2(30);
          e2.exports = function() {
            this.size = 0, this.__data__ = { hash: new r2(), map: new (a2 || i2)(), string: new r2() };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(104), i2 = n2(105), a2 = n2(106), o2 = n2(107), s2 = n2(108);
          function c3(e3) {
            var t3 = -1, n3 = null == e3 ? 0 : e3.length;
            for (this.clear(); ++t3 < n3; ) {
              var r3 = e3[t3];
              this.set(r3[0], r3[1]);
            }
          }
          c3.prototype.clear = r2, c3.prototype.delete = i2, c3.prototype.get = a2, c3.prototype.has = o2, c3.prototype.set = s2, e2.exports = c3;
        }, function(e2, t2, n2) {
          var r2 = n2(20);
          e2.exports = function() {
            this.__data__ = r2 ? r2(null) : {}, this.size = 0;
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            var t3 = this.has(e3) && delete this.__data__[e3];
            return this.size -= t3 ? 1 : 0, t3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(20), i2 = Object.prototype.hasOwnProperty;
          e2.exports = function(e3) {
            var t3 = this.__data__;
            if (r2) {
              var n3 = t3[e3];
              return "__lodash_hash_undefined__" === n3 ? void 0 : n3;
            }
            return i2.call(t3, e3) ? t3[e3] : void 0;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(20), i2 = Object.prototype.hasOwnProperty;
          e2.exports = function(e3) {
            var t3 = this.__data__;
            return r2 ? void 0 !== t3[e3] : i2.call(t3, e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(20);
          e2.exports = function(e3, t3) {
            var n3 = this.__data__;
            return this.size += this.has(e3) ? 0 : 1, n3[e3] = r2 && void 0 === t3 ? "__lodash_hash_undefined__" : t3, this;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(21);
          e2.exports = function(e3) {
            var t3 = r2(this, e3).delete(e3);
            return this.size -= t3 ? 1 : 0, t3;
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            var t3 = typeof e3;
            return "string" == t3 || "number" == t3 || "symbol" == t3 || "boolean" == t3 ? "__proto__" !== e3 : null === e3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(21);
          e2.exports = function(e3) {
            return r2(this, e3).get(e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(21);
          e2.exports = function(e3) {
            return r2(this, e3).has(e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(21);
          e2.exports = function(e3, t3) {
            var n3 = r2(this, e3), i2 = n3.size;
            return n3.set(e3, t3), this.size += n3.size == i2 ? 0 : 1, this;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(45), i2 = n2(49), a2 = n2(120), o2 = n2(124), s2 = n2(130), c3 = n2(6), u2 = n2(38), l2 = n2(41), d2 = "[object Object]", f2 = Object.prototype.hasOwnProperty;
          e2.exports = function(e3, t3, n3, p2, h2, v2) {
            var m2 = c3(e3), g2 = c3(t3), y2 = m2 ? "[object Array]" : s2(e3), _ = g2 ? "[object Array]" : s2(t3), b2 = (y2 = "[object Arguments]" == y2 ? d2 : y2) == d2, w2 = (_ = "[object Arguments]" == _ ? d2 : _) == d2, k2 = y2 == _;
            if (k2 && u2(e3)) {
              if (!u2(t3))
                return false;
              m2 = true, b2 = false;
            }
            if (k2 && !b2)
              return v2 || (v2 = new r2()), m2 || l2(e3) ? i2(e3, t3, n3, p2, h2, v2) : a2(e3, t3, y2, n3, p2, h2, v2);
            if (!(1 & n3)) {
              var M2 = b2 && f2.call(e3, "__wrapped__"), S2 = w2 && f2.call(t3, "__wrapped__");
              if (M2 || S2) {
                var E2 = M2 ? e3.value() : e3, A2 = S2 ? t3.value() : t3;
                return v2 || (v2 = new r2()), h2(E2, A2, n3, p2, v2);
              }
            }
            return !!k2 && (v2 || (v2 = new r2()), o2(e3, t3, n3, p2, h2, v2));
          };
        }, function(e2, t2, n2) {
          var r2 = n2(31), i2 = n2(116), a2 = n2(117);
          function o2(e3) {
            var t3 = -1, n3 = null == e3 ? 0 : e3.length;
            for (this.__data__ = new r2(); ++t3 < n3; )
              this.add(e3[t3]);
          }
          o2.prototype.add = o2.prototype.push = i2, o2.prototype.has = a2, e2.exports = o2;
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return this.__data__.set(e3, "__lodash_hash_undefined__"), this;
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return this.__data__.has(e3);
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            for (var n2 = -1, r2 = null == e3 ? 0 : e3.length; ++n2 < r2; )
              if (t3(e3[n2], n2, e3))
                return true;
            return false;
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            return e3.has(t3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(17), i2 = n2(121), a2 = n2(46), o2 = n2(49), s2 = n2(122), c3 = n2(123), u2 = r2 ? r2.prototype : void 0, l2 = u2 ? u2.valueOf : void 0;
          e2.exports = function(e3, t3, n3, r3, u3, d2, f2) {
            switch (n3) {
              case "[object DataView]":
                if (e3.byteLength != t3.byteLength || e3.byteOffset != t3.byteOffset)
                  return false;
                e3 = e3.buffer, t3 = t3.buffer;
              case "[object ArrayBuffer]":
                return !(e3.byteLength != t3.byteLength || !d2(new i2(e3), new i2(t3)));
              case "[object Boolean]":
              case "[object Date]":
              case "[object Number]":
                return a2(+e3, +t3);
              case "[object Error]":
                return e3.name == t3.name && e3.message == t3.message;
              case "[object RegExp]":
              case "[object String]":
                return e3 == t3 + "";
              case "[object Map]":
                var p2 = s2;
              case "[object Set]":
                var h2 = 1 & r3;
                if (p2 || (p2 = c3), e3.size != t3.size && !h2)
                  return false;
                var v2 = f2.get(e3);
                if (v2)
                  return v2 == t3;
                r3 |= 2, f2.set(e3, t3);
                var m2 = o2(p2(e3), p2(t3), r3, u3, d2, f2);
                return f2.delete(e3), m2;
              case "[object Symbol]":
                if (l2)
                  return l2.call(e3) == l2.call(t3);
            }
            return false;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(8).Uint8Array;
          e2.exports = r2;
        }, function(e2, t2) {
          e2.exports = function(e3) {
            var t3 = -1, n2 = Array(e3.size);
            return e3.forEach(function(e4, r2) {
              n2[++t3] = [r2, e4];
            }), n2;
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            var t3 = -1, n2 = Array(e3.size);
            return e3.forEach(function(e4) {
              n2[++t3] = e4;
            }), n2;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(125), i2 = Object.prototype.hasOwnProperty;
          e2.exports = function(e3, t3, n3, a2, o2, s2) {
            var c3 = 1 & n3, u2 = r2(e3), l2 = u2.length;
            if (l2 != r2(t3).length && !c3)
              return false;
            for (var d2 = l2; d2--; ) {
              var f2 = u2[d2];
              if (!(c3 ? f2 in t3 : i2.call(t3, f2)))
                return false;
            }
            var p2 = s2.get(e3), h2 = s2.get(t3);
            if (p2 && h2)
              return p2 == t3 && h2 == e3;
            var v2 = true;
            s2.set(e3, t3), s2.set(t3, e3);
            for (var m2 = c3; ++d2 < l2; ) {
              var g2 = e3[f2 = u2[d2]], y2 = t3[f2];
              if (a2)
                var _ = c3 ? a2(y2, g2, f2, t3, e3, s2) : a2(g2, y2, f2, e3, t3, s2);
              if (!(void 0 === _ ? g2 === y2 || o2(g2, y2, n3, a2, s2) : _)) {
                v2 = false;
                break;
              }
              m2 || (m2 = "constructor" == f2);
            }
            if (v2 && !m2) {
              var b2 = e3.constructor, w2 = t3.constructor;
              b2 != w2 && "constructor" in e3 && "constructor" in t3 && !("function" == typeof b2 && b2 instanceof b2 && "function" == typeof w2 && w2 instanceof w2) && (v2 = false);
            }
            return s2.delete(e3), s2.delete(t3), v2;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(126), i2 = n2(128), a2 = n2(26);
          e2.exports = function(e3) {
            return r2(e3, a2, i2);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(127), i2 = n2(6);
          e2.exports = function(e3, t3, n3) {
            var a2 = t3(e3);
            return i2(e3) ? a2 : r2(a2, n3(e3));
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            for (var n2 = -1, r2 = t3.length, i2 = e3.length; ++n2 < r2; )
              e3[i2 + n2] = t3[n2];
            return e3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(34), i2 = n2(129), a2 = Object.prototype.propertyIsEnumerable, o2 = Object.getOwnPropertySymbols, s2 = o2 ? function(e3) {
            return null == e3 ? [] : (e3 = Object(e3), r2(o2(e3), function(t3) {
              return a2.call(e3, t3);
            }));
          } : i2;
          e2.exports = s2;
        }, function(e2, t2) {
          e2.exports = function() {
            return [];
          };
        }, function(e2, t2, n2) {
          var r2 = n2(131), i2 = n2(30), a2 = n2(132), o2 = n2(133), s2 = n2(134), c3 = n2(14), u2 = n2(47), l2 = u2(r2), d2 = u2(i2), f2 = u2(a2), p2 = u2(o2), h2 = u2(s2), v2 = c3;
          (r2 && "[object DataView]" != v2(new r2(new ArrayBuffer(1))) || i2 && "[object Map]" != v2(new i2()) || a2 && "[object Promise]" != v2(a2.resolve()) || o2 && "[object Set]" != v2(new o2()) || s2 && "[object WeakMap]" != v2(new s2())) && (v2 = function(e3) {
            var t3 = c3(e3), n3 = "[object Object]" == t3 ? e3.constructor : void 0, r3 = n3 ? u2(n3) : "";
            if (r3)
              switch (r3) {
                case l2:
                  return "[object DataView]";
                case d2:
                  return "[object Map]";
                case f2:
                  return "[object Promise]";
                case p2:
                  return "[object Set]";
                case h2:
                  return "[object WeakMap]";
              }
            return t3;
          }), e2.exports = v2;
        }, function(e2, t2, n2) {
          var r2 = n2(13)(n2(8), "DataView");
          e2.exports = r2;
        }, function(e2, t2, n2) {
          var r2 = n2(13)(n2(8), "Promise");
          e2.exports = r2;
        }, function(e2, t2, n2) {
          var r2 = n2(13)(n2(8), "Set");
          e2.exports = r2;
        }, function(e2, t2, n2) {
          var r2 = n2(13)(n2(8), "WeakMap");
          e2.exports = r2;
        }, function(e2, t2, n2) {
          var r2 = n2(50), i2 = n2(26);
          e2.exports = function(e3) {
            for (var t3 = i2(e3), n3 = t3.length; n3--; ) {
              var a2 = t3[n3], o2 = e3[a2];
              t3[n3] = [a2, o2, r2(o2)];
            }
            return t3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(48), i2 = n2(137), a2 = n2(143), o2 = n2(33), s2 = n2(50), c3 = n2(51), u2 = n2(23);
          e2.exports = function(e3, t3) {
            return o2(e3) && s2(t3) ? c3(u2(e3), t3) : function(n3) {
              var o3 = i2(n3, e3);
              return void 0 === o3 && o3 === t3 ? a2(n3, e3) : r2(t3, o3, 3);
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(32);
          e2.exports = function(e3, t3, n3) {
            var i2 = null == e3 ? void 0 : r2(e3, t3);
            return void 0 === i2 ? n3 : i2;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(139), i2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, a2 = /\\(\\)?/g, o2 = r2(function(e3) {
            var t3 = [];
            return 46 === e3.charCodeAt(0) && t3.push(""), e3.replace(i2, function(e4, n3, r3, i3) {
              t3.push(r3 ? i3.replace(a2, "$1") : n3 || e4);
            }), t3;
          });
          e2.exports = o2;
        }, function(e2, t2, n2) {
          var r2 = n2(140);
          e2.exports = function(e3) {
            var t3 = r2(e3, function(e4) {
              return 500 === n3.size && n3.clear(), e4;
            }), n3 = t3.cache;
            return t3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(31);
          function i2(e3, t3) {
            if ("function" != typeof e3 || null != t3 && "function" != typeof t3)
              throw new TypeError("Expected a function");
            var n3 = function() {
              var r3 = arguments, i3 = t3 ? t3.apply(this, r3) : r3[0], a2 = n3.cache;
              if (a2.has(i3))
                return a2.get(i3);
              var o2 = e3.apply(this, r3);
              return n3.cache = a2.set(i3, o2) || a2, o2;
            };
            return n3.cache = new (i2.Cache || r2)(), n3;
          }
          i2.Cache = r2, e2.exports = i2;
        }, function(e2, t2, n2) {
          var r2 = n2(142);
          e2.exports = function(e3) {
            return null == e3 ? "" : r2(e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(17), i2 = n2(53), a2 = n2(6), o2 = n2(22), s2 = r2 ? r2.prototype : void 0, c3 = s2 ? s2.toString : void 0;
          e2.exports = function e3(t3) {
            if ("string" == typeof t3)
              return t3;
            if (a2(t3))
              return i2(t3, e3) + "";
            if (o2(t3))
              return c3 ? c3.call(t3) : "";
            var n3 = t3 + "";
            return "0" == n3 && 1 / t3 == -1 / 0 ? "-0" : n3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(144), i2 = n2(145);
          e2.exports = function(e3, t3) {
            return null != e3 && i2(e3, t3, r2);
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            return null != e3 && t3 in Object(e3);
          };
        }, function(e2, t2, n2) {
          var r2 = n2(52), i2 = n2(36), a2 = n2(6), o2 = n2(40), s2 = n2(27), c3 = n2(23);
          e2.exports = function(e3, t3, n3) {
            for (var u2 = -1, l2 = (t3 = r2(t3, e3)).length, d2 = false; ++u2 < l2; ) {
              var f2 = c3(t3[u2]);
              if (!(d2 = null != e3 && n3(e3, f2)))
                break;
              e3 = e3[f2];
            }
            return d2 || ++u2 != l2 ? d2 : !!(l2 = null == e3 ? 0 : e3.length) && s2(l2) && o2(f2, l2) && (a2(e3) || i2(e3));
          };
        }, function(e2, t2, n2) {
          var r2 = n2(147), i2 = n2(148), a2 = n2(33), o2 = n2(23);
          e2.exports = function(e3) {
            return a2(e3) ? r2(o2(e3)) : i2(e3);
          };
        }, function(e2, t2) {
          e2.exports = function(e3) {
            return function(t3) {
              return null == t3 ? void 0 : t3[e3];
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(32);
          e2.exports = function(e3) {
            return function(t3) {
              return r2(t3, e3);
            };
          };
        }, function(e2, t2, n2) {
          var r2 = n2(53), i2 = n2(32), a2 = n2(44), o2 = n2(150), s2 = n2(151), c3 = n2(42), u2 = n2(152), l2 = n2(54), d2 = n2(6);
          e2.exports = function(e3, t3, n3) {
            t3 = t3.length ? r2(t3, function(e4) {
              return d2(e4) ? function(t4) {
                return i2(t4, 1 === e4.length ? e4[0] : e4);
              } : e4;
            }) : [l2];
            var f2 = -1;
            t3 = r2(t3, c3(a2));
            var p2 = o2(e3, function(e4, n4, i3) {
              return { criteria: r2(t3, function(t4) {
                return t4(e4);
              }), index: ++f2, value: e4 };
            });
            return s2(p2, function(e4, t4) {
              return u2(e4, t4, n3);
            });
          };
        }, function(e2, t2, n2) {
          var r2 = n2(35), i2 = n2(28);
          e2.exports = function(e3, t3) {
            var n3 = -1, a2 = i2(e3) ? Array(e3.length) : [];
            return r2(e3, function(e4, r3, i3) {
              a2[++n3] = t3(e4, r3, i3);
            }), a2;
          };
        }, function(e2, t2) {
          e2.exports = function(e3, t3) {
            var n2 = e3.length;
            for (e3.sort(t3); n2--; )
              e3[n2] = e3[n2].value;
            return e3;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(153);
          e2.exports = function(e3, t3, n3) {
            for (var i2 = -1, a2 = e3.criteria, o2 = t3.criteria, s2 = a2.length, c3 = n3.length; ++i2 < s2; ) {
              var u2 = r2(a2[i2], o2[i2]);
              if (u2)
                return i2 >= c3 ? u2 : u2 * ("desc" == n3[i2] ? -1 : 1);
            }
            return e3.index - t3.index;
          };
        }, function(e2, t2, n2) {
          var r2 = n2(22);
          e2.exports = function(e3, t3) {
            if (e3 !== t3) {
              var n3 = void 0 !== e3, i2 = null === e3, a2 = e3 == e3, o2 = r2(e3), s2 = void 0 !== t3, c3 = null === t3, u2 = t3 == t3, l2 = r2(t3);
              if (!c3 && !l2 && !o2 && e3 > t3 || o2 && s2 && u2 && !c3 && !l2 || i2 && s2 && u2 || !n3 && u2 || !a2)
                return 1;
              if (!i2 && !o2 && !l2 && e3 < t3 || l2 && n3 && a2 && !i2 && !o2 || c3 && n3 && a2 || !s2 && a2 || !u2)
                return -1;
            }
            return 0;
          };
        }, function(e2, t2, n2) {
          "use strict";
          n2.r(t2);
          var r2 = n2(55), i2 = n2.n(r2), a2 = n2(0), o2 = n2.n(a2), s2 = n2(2), c3 = n2.n(s2), u2 = n2(7), l2 = n2.n(u2), d2 = n2(3), f2 = n2.n(d2), p2 = n2(9), h2 = n2.n(p2), v2 = n2(10), m2 = n2.n(v2), g2 = n2(5), y2 = n2.n(g2), _ = n2(4), b2 = n2.n(_), w2 = n2(16), k2 = n2.n(w2), M2 = n2(1), S2 = n2.n(M2), E2 = n2(11), A2 = n2.n(E2), T2 = n2(12), O2 = n2(24), C2 = n2.n(O2), P2 = "new", j2 = "loading", L2 = "joining-meeting", I2 = "joined-meeting", x2 = "left-meeting", D2 = "error", N2 = { NONE: "none", BGBLUR: "background-blur", BGIMAGE: "background-image" }, R2 = { PLAY: "play", PAUSE: "pause" }, F2 = ["jpg", "png", "jpeg"], B2 = "add-endpoints", V2 = "remove-endpoints";
          function U2() {
            return !Y2() && "undefined" != typeof window && window.navigator && window.navigator.userAgent ? window.navigator.userAgent : "";
          }
          function Y2() {
            return "undefined" != typeof navigator && navigator.product && "ReactNative" === navigator.product;
          }
          function J2() {
            return navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
          }
          function W2() {
            return !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) && function(e3, t3) {
              if (!e3 || !t3)
                return true;
              switch (e3) {
                case "Chrome":
                  return t3.major >= 75;
                case "Safari":
                  return RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection") && !(13 === t3.major && 0 === t3.minor && 0 === t3.point);
                case "Firefox":
                  return t3.major >= 67;
              }
              return true;
            }(H2(), function() {
              switch (H2()) {
                case "Chrome":
                  return Q();
                case "Safari":
                  return Z2();
                case "Firefox":
                  return X();
                case "Edge":
                  return function() {
                    var e3 = 0, t3 = 0;
                    if ("undefined" != typeof window) {
                      var n3 = U2().match(/Edge\/(\d+).(\d+)/);
                      if (n3)
                        try {
                          e3 = parseInt(n3[1]), t3 = parseInt(n3[2]);
                        } catch (e4) {
                        }
                    }
                    return { major: e3, minor: t3 };
                  }();
              }
            }());
          }
          function z2() {
            if (Y2())
              return false;
            if (!document)
              return false;
            var e3 = document.createElement("iframe");
            return !!e3.requestFullscreen || !!e3.webkitRequestFullscreen;
          }
          var G2 = ["Chrome", "Firefox"];
          function q2() {
            return !Y2() && (!function() {
              var e3 = U2();
              if (e3.match(/Mobi/) || e3.match(/Android/))
                return true;
              if (U2().match(/DailyAnd\//))
                return true;
            }() && G2.includes(H2()));
          }
          function K() {
            return J2() && !function() {
              var e3, t3 = H2();
              if (!U2())
                return true;
              switch (t3) {
                case "Chrome":
                  return (e3 = Q()).major && e3.major > 0 && e3.major < 61;
                case "Firefox":
                  return (e3 = X()).major < 78;
                case "Safari":
                  return (e3 = Z2()).major < 12;
                default:
                  return true;
              }
            }();
          }
          function H2() {
            if ("undefined" != typeof window) {
              var e3 = U2();
              return $2() ? "Safari" : e3.indexOf("Edge") > -1 ? "Edge" : e3.match(/Chrome\//) ? "Chrome" : e3.indexOf("Safari") > -1 ? "Safari" : e3.indexOf("Firefox") > -1 ? "Firefox" : e3.indexOf("MSIE") > -1 || e3.indexOf(".NET") > -1 ? "IE" : "Unknown Browser";
            }
          }
          function Q() {
            var e3 = 0, t3 = 0, n3 = 0, r3 = 0, i3 = false;
            if ("undefined" != typeof window) {
              var a3 = U2(), o3 = a3.match(/Chrome\/(\d+).(\d+).(\d+).(\d+)/);
              if (o3)
                try {
                  e3 = parseInt(o3[1]), t3 = parseInt(o3[2]), n3 = parseInt(o3[3]), r3 = parseInt(o3[4]), i3 = a3.indexOf("OPR/") > -1;
                } catch (e4) {
                }
            }
            return { major: e3, minor: t3, build: n3, patch: r3, opera: i3 };
          }
          function $2() {
            return !!U2().match(/iPad|iPhone|iPod/i) && J2();
          }
          function Z2() {
            var e3 = 0, t3 = 0, n3 = 0;
            if ("undefined" != typeof window) {
              var r3 = U2().match(/Version\/(\d+).(\d+)(.(\d+))?/);
              if (r3)
                try {
                  e3 = parseInt(r3[1]), t3 = parseInt(r3[2]), n3 = parseInt(r3[4]);
                } catch (e4) {
                }
              else
                $2() && (e3 = 14, t3 = 0, n3 = 3);
            }
            return { major: e3, minor: t3, point: n3 };
          }
          function X() {
            var e3 = 0, t3 = 0;
            if ("undefined" != typeof window) {
              var n3 = U2().match(/Firefox\/(\d+).(\d+)/);
              if (n3)
                try {
                  e3 = parseInt(n3[1]), t3 = parseInt(n3[2]);
                } catch (e4) {
                }
            }
            return { major: e3, minor: t3 };
          }
          function ee() {
            return Date.now() + Math.random().toString();
          }
          function te() {
            throw new Error("Method must be implemented in subclass");
          }
          function ne() {
            return window._dailyConfig && window._dailyConfig.callObjectBundleUrlOverride ? window._dailyConfig.callObjectBundleUrlOverride : "https://c.daily.co/call-machine/versioned/".concat("0.34.0", "/static/call-machine-object-bundle.js");
          }
          function re(e3) {
            try {
              new URL(e3);
            } catch (e4) {
              return false;
            }
            return true;
          }
          var ie = function() {
            function e3() {
              c3()(this, e3);
            }
            return f2()(e3, [{ key: "addListenerForMessagesFromCallMachine", value: function(e4, t3, n3) {
              te();
            } }, { key: "addListenerForMessagesFromDailyJs", value: function(e4, t3, n3) {
              te();
            } }, { key: "sendMessageToCallMachine", value: function(e4, t3, n3, r3) {
              te();
            } }, { key: "sendMessageToDailyJs", value: function(e4, t3, n3) {
              te();
            } }, { key: "removeListener", value: function(e4) {
              te();
            } }]), e3;
          }();
          function ae(e3, t3) {
            var n3 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var r3 = Object.getOwnPropertySymbols(e3);
              t3 && (r3 = r3.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), n3.push.apply(n3, r3);
            }
            return n3;
          }
          function oe(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? ae(Object(n3), true).forEach(function(t4) {
                b2()(e3, t4, n3[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : ae(Object(n3)).forEach(function(t4) {
                Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
              });
            }
            return e3;
          }
          function se(e3) {
            var t3 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }();
            return function() {
              var n3, r3 = y2()(e3);
              if (t3) {
                var i3 = y2()(this).constructor;
                n3 = Reflect.construct(r3, arguments, i3);
              } else
                n3 = r3.apply(this, arguments);
              return m2()(this, n3);
            };
          }
          var ce = function(e3) {
            h2()(n3, e3);
            var t3 = se(n3);
            function n3() {
              var e4;
              return c3()(this, n3), (e4 = t3.call(this))._wrappedListeners = {}, e4._messageCallbacks = {}, e4;
            }
            return f2()(n3, [{ key: "addListenerForMessagesFromCallMachine", value: function(e4, t4, n4) {
              var r3 = this, i3 = function(i4) {
                if (i4.data && "iframe-call-message" === i4.data.what && (!i4.data.callFrameId || i4.data.callFrameId === t4) && (!i4.data.from || "module" !== i4.data.from)) {
                  var a3 = oe({}, i4.data);
                  if (delete a3.from, a3.callbackStamp && r3._messageCallbacks[a3.callbackStamp]) {
                    var o3 = a3.callbackStamp;
                    r3._messageCallbacks[o3].call(n4, a3), delete r3._messageCallbacks[o3];
                  }
                  delete a3.what, delete a3.callbackStamp, e4.call(n4, a3);
                }
              };
              this._wrappedListeners[e4] = i3, window.addEventListener("message", i3);
            } }, { key: "addListenerForMessagesFromDailyJs", value: function(e4, t4, n4) {
              var r3 = function(r4) {
                if (!(!r4.data || "iframe-call-message" !== r4.data.what || !r4.data.action || r4.data.from && "module" !== r4.data.from || r4.data.callFrameId && t4 && r4.data.callFrameId !== t4)) {
                  var i3 = r4.data;
                  e4.call(n4, i3);
                }
              };
              this._wrappedListeners[e4] = r3, window.addEventListener("message", r3);
            } }, { key: "sendMessageToCallMachine", value: function(e4, t4, n4, r3) {
              var i3 = oe({}, e4);
              if (i3.what = "iframe-call-message", i3.from = "module", i3.callFrameId = r3, t4) {
                var a3 = ee();
                this._messageCallbacks[a3] = t4, i3.callbackStamp = a3;
              }
              (n4 ? n4.contentWindow : window).postMessage(i3, "*");
            } }, { key: "sendMessageToDailyJs", value: function(e4, t4, n4) {
              e4.what = "iframe-call-message", e4.callFrameId = n4, e4.from = "embedded", (t4 ? window : window.parent).postMessage(e4, "*");
            } }, { key: "removeListener", value: function(e4) {
              var t4 = this._wrappedListeners[e4];
              t4 && (window.removeEventListener("message", t4), delete this._wrappedListeners[e4]);
            } }, { key: "forwardPackagedMessageToCallMachine", value: function(e4, t4, n4) {
              var r3 = oe({}, e4);
              r3.callFrameId = n4, (t4 ? t4.contentWindow : window).postMessage(r3, "*");
            } }, { key: "addListenerForPackagedMessagesFromCallMachine", value: function(e4, t4) {
              var n4 = function(n5) {
                if (n5.data && "iframe-call-message" === n5.data.what && (!n5.data.callFrameId || n5.data.callFrameId === t4) && (!n5.data.from || "module" !== n5.data.from)) {
                  var r3 = n5.data;
                  e4(r3);
                }
              };
              return this._wrappedListeners[e4] = n4, window.addEventListener("message", n4), e4;
            } }, { key: "removeListenerForPackagedMessagesFromCallMachine", value: function(e4) {
              var t4 = this._wrappedListeners[e4];
              t4 && (window.removeEventListener("message", t4), delete this._wrappedListeners[e4]);
            } }]), n3;
          }(ie);
          function ue(e3) {
            var t3 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }();
            return function() {
              var n3, r3 = y2()(e3);
              if (t3) {
                var i3 = y2()(this).constructor;
                n3 = Reflect.construct(r3, arguments, i3);
              } else
                n3 = r3.apply(this, arguments);
              return m2()(this, n3);
            };
          }
          var le = function(e3) {
            h2()(n3, e3);
            var t3 = ue(n3);
            function n3() {
              var e4;
              return c3()(this, n3), e4 = t3.call(this), window.callMachineToDailyJsEmitter = window.callMachineToDailyJsEmitter || new E2.EventEmitter(), window.dailyJsToCallMachineEmitter = window.dailyJsToCallMachineEmitter || new E2.EventEmitter(), e4._wrappedListeners = {}, e4._messageCallbacks = {}, e4;
            }
            return f2()(n3, [{ key: "addListenerForMessagesFromCallMachine", value: function(e4, t4, n4) {
              this._addListener(e4, window.callMachineToDailyJsEmitter, n4, "received call machine message");
            } }, { key: "addListenerForMessagesFromDailyJs", value: function(e4, t4, n4) {
              this._addListener(e4, window.dailyJsToCallMachineEmitter, n4, "received daily-js message");
            } }, { key: "sendMessageToCallMachine", value: function(e4, t4) {
              this._sendMessage(e4, window.dailyJsToCallMachineEmitter, "sending message to call machine", t4);
            } }, { key: "sendMessageToDailyJs", value: function(e4) {
              this._sendMessage(e4, window.callMachineToDailyJsEmitter, "sending message to daily-js");
            } }, { key: "removeListener", value: function(e4) {
              var t4 = this._wrappedListeners[e4];
              t4 && (window.callMachineToDailyJsEmitter.removeListener("message", t4), window.dailyJsToCallMachineEmitter.removeListener("message", t4), delete this._wrappedListeners[e4]);
            } }, { key: "_addListener", value: function(e4, t4, n4, r3) {
              var i3 = this, a3 = function(t5) {
                if (t5.callbackStamp && i3._messageCallbacks[t5.callbackStamp]) {
                  var r4 = t5.callbackStamp;
                  i3._messageCallbacks[r4].call(n4, t5), delete i3._messageCallbacks[r4];
                }
                e4.call(n4, t5);
              };
              this._wrappedListeners[e4] = a3, t4.addListener("message", a3);
            } }, { key: "_sendMessage", value: function(e4, t4, n4, r3) {
              if (r3) {
                var i3 = ee();
                this._messageCallbacks[i3] = r3, e4.callbackStamp = i3;
              }
              t4.emit("message", e4);
            } }]), n3;
          }(ie), de = Object.prototype.hasOwnProperty;
          function fe(e3, t3, n3) {
            for (n3 of e3.keys())
              if (pe(n3, t3))
                return n3;
          }
          function pe(e3, t3) {
            var n3, r3, i3;
            if (e3 === t3)
              return true;
            if (e3 && t3 && (n3 = e3.constructor) === t3.constructor) {
              if (n3 === Date)
                return e3.getTime() === t3.getTime();
              if (n3 === RegExp)
                return e3.toString() === t3.toString();
              if (n3 === Array) {
                if ((r3 = e3.length) === t3.length)
                  for (; r3-- && pe(e3[r3], t3[r3]); )
                    ;
                return -1 === r3;
              }
              if (n3 === Set) {
                if (e3.size !== t3.size)
                  return false;
                for (r3 of e3) {
                  if ((i3 = r3) && "object" == typeof i3 && !(i3 = fe(t3, i3)))
                    return false;
                  if (!t3.has(i3))
                    return false;
                }
                return true;
              }
              if (n3 === Map) {
                if (e3.size !== t3.size)
                  return false;
                for (r3 of e3) {
                  if ((i3 = r3[0]) && "object" == typeof i3 && !(i3 = fe(t3, i3)))
                    return false;
                  if (!pe(r3[1], t3.get(i3)))
                    return false;
                }
                return true;
              }
              if (n3 === ArrayBuffer)
                e3 = new Uint8Array(e3), t3 = new Uint8Array(t3);
              else if (n3 === DataView) {
                if ((r3 = e3.byteLength) === t3.byteLength)
                  for (; r3-- && e3.getInt8(r3) === t3.getInt8(r3); )
                    ;
                return -1 === r3;
              }
              if (ArrayBuffer.isView(e3)) {
                if ((r3 = e3.byteLength) === t3.byteLength)
                  for (; r3-- && e3[r3] === t3[r3]; )
                    ;
                return -1 === r3;
              }
              if (!n3 || "object" == typeof e3) {
                for (n3 in r3 = 0, e3) {
                  if (de.call(e3, n3) && ++r3 && !de.call(t3, n3))
                    return false;
                  if (!(n3 in t3 && pe(e3[n3], t3[n3])))
                    return false;
                }
                return Object.keys(t3).length === r3;
              }
            }
            return e3 != e3 && t3 != t3;
          }
          var he = ["replace", "shallow-merge"];
          function ve(e3) {
            if (null == e3 || "object" !== S2()(e3))
              return false;
            var t3 = Object.getPrototypeOf(e3);
            return null == t3 || t3 === Object.prototype;
          }
          var me = function() {
            function e3() {
              var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n3 = t3.data, r3 = t3.mergeStrategy, i3 = void 0 === r3 ? "replace" : r3;
              c3()(this, e3), e3._validateMergeStrategy(i3), e3._validateData(n3, i3), this.mergeStrategy = i3, this.data = n3;
            }
            return f2()(e3, [{ key: "isNoOp", value: function() {
              return e3.isNoOpUpdate(this.data, this.mergeStrategy);
            } }], [{ key: "isNoOpUpdate", value: function(e4, t3) {
              return 0 === Object.keys(e4).length && "shallow-merge" === t3;
            } }, { key: "_validateMergeStrategy", value: function(e4) {
              if (!he.includes(e4))
                throw Error("Unrecognized mergeStrategy provided. Options are: [".concat(he, "]"));
            } }, { key: "_validateData", value: function(e4, t3) {
              if (!ve(e4))
                throw Error("Meeting session data must be a plain (map-like) object");
              var n3;
              try {
                if (n3 = JSON.stringify(e4), "replace" === t3) {
                  var r3 = JSON.parse(n3);
                  pe(r3, e4) || console.warn("The meeting session data provided will be modified when serialized.", r3, e4);
                } else if ("shallow-merge" === t3) {
                  for (var i3 in e4)
                    if (Object.hasOwnProperty.call(e4, i3) && void 0 !== e4[i3]) {
                      var a3 = JSON.parse(JSON.stringify(e4[i3]));
                      pe(e4[i3], a3) || console.warn("At least one key in the meeting session data provided will be modified when serialized.", a3, e4[i3]);
                    }
                }
              } catch (e5) {
                throw Error("Meeting session data must be serializable to JSON: ".concat(e5));
              }
              if (n3.length > 102400)
                throw Error("Meeting session data is too large (".concat(n3.length, " characters). Maximum size suppported is ").concat(102400, "."));
            } }]), e3;
          }(), ge = n2(56), ye = n2.n(ge);
          function _e(e3) {
            var t3 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }();
            return function() {
              var n3, r3 = y2()(e3);
              if (t3) {
                var i3 = y2()(this).constructor;
                n3 = Reflect.construct(r3, arguments, i3);
              } else
                n3 = r3.apply(this, arguments);
              return m2()(this, n3);
            };
          }
          var be = function() {
            function e3() {
              c3()(this, e3), this._currentLoad = null;
            }
            return f2()(e3, [{ key: "load", value: function(e4, t3, n3, r3) {
              if (this.loaded)
                return window._dailyCallObjectSetup(e4), void n3(true);
              !function(e5, t4) {
                window._dailyConfig || (window._dailyConfig = {}), window._dailyConfig.callFrameId = e5, window._dailyConfig.avoidEval = t4;
              }(e4, t3), this._currentLoad && this._currentLoad.cancel(), this._currentLoad = new we(function() {
                n3(false);
              }, r3), this._currentLoad.start();
            } }, { key: "cancel", value: function() {
              this._currentLoad && this._currentLoad.cancel();
            } }, { key: "loaded", get: function() {
              return this._currentLoad && this._currentLoad.succeeded;
            } }]), e3;
          }(), we = function() {
            function e3(t3, n3) {
              c3()(this, e3), this._attemptsRemaining = 3, this._currentAttempt = null, this._successCallback = t3, this._failureCallback = n3;
            }
            return f2()(e3, [{ key: "start", value: function() {
              var e4 = this;
              if (!this._currentAttempt) {
                this._currentAttempt = new Me(this._successCallback, function t3(n3) {
                  e4._currentAttempt.cancelled || (e4._attemptsRemaining--, e4._failureCallback(n3, e4._attemptsRemaining > 0), e4._attemptsRemaining <= 0 || setTimeout(function() {
                    e4._currentAttempt.cancelled || (e4._currentAttempt = new Me(e4._successCallback, t3), e4._currentAttempt.start());
                  }, 3e3));
                }), this._currentAttempt.start();
              }
            } }, { key: "cancel", value: function() {
              this._currentAttempt && this._currentAttempt.cancel();
            } }, { key: "cancelled", get: function() {
              return this._currentAttempt && this._currentAttempt.cancelled;
            } }, { key: "succeeded", get: function() {
              return this._currentAttempt && this._currentAttempt.succeeded;
            } }]), e3;
          }(), ke = function(e3) {
            h2()(n3, e3);
            var t3 = _e(n3);
            function n3() {
              return c3()(this, n3), t3.apply(this, arguments);
            }
            return n3;
          }(ye()(Error)), Me = function() {
            function e3(t4, n3) {
              c3()(this, e3), this._loadAttemptImpl = Y2() || !_dailyConfig.avoidEval ? new Se(t4, n3) : new Ee(t4, n3);
            }
            var t3;
            return f2()(e3, [{ key: "start", value: (t3 = o2()(function* () {
              return this._loadAttemptImpl.start();
            }), function() {
              return t3.apply(this, arguments);
            }) }, { key: "cancel", value: function() {
              this._loadAttemptImpl.cancel();
            } }, { key: "cancelled", get: function() {
              return this._loadAttemptImpl.cancelled;
            } }, { key: "succeeded", get: function() {
              return this._loadAttemptImpl.succeeded;
            } }]), e3;
          }(), Se = function() {
            function e3(t4, n4) {
              c3()(this, e3), this.cancelled = false, this.succeeded = false, this._networkTimedOut = false, this._networkTimeout = null, this._iosCache = "undefined" != typeof iOSCallObjectBundleCache && iOSCallObjectBundleCache, this._refetchHeaders = null, this._successCallback = t4, this._failureCallback = n4;
            }
            var t3, n3, r3, i3;
            return f2()(e3, [{ key: "start", value: (i3 = o2()(function* () {
              var e4 = ne();
              !(yield this._tryLoadFromIOSCache(e4)) && this._loadFromNetwork(e4);
            }), function() {
              return i3.apply(this, arguments);
            }) }, { key: "cancel", value: function() {
              clearTimeout(this._networkTimeout), this.cancelled = true;
            } }, { key: "_tryLoadFromIOSCache", value: (r3 = o2()(function* (e4) {
              if (!this._iosCache)
                return false;
              try {
                var t4 = yield this._iosCache.get(e4);
                return !!this.cancelled || !!t4 && (t4.code ? (Function('"use strict";' + t4.code)(), this.succeeded = true, this._successCallback(), true) : (this._refetchHeaders = t4.refetchHeaders, false));
              } catch (e5) {
                return false;
              }
            }), function(e4) {
              return r3.apply(this, arguments);
            }) }, { key: "_loadFromNetwork", value: (n3 = o2()(function* (e4) {
              var t4 = this;
              this._networkTimeout = setTimeout(function() {
                t4._networkTimedOut = true, t4._failureCallback("Timed out (>".concat(2e4, " ms) when loading call object bundle ").concat(e4));
              }, 2e4);
              try {
                var n4 = this._refetchHeaders ? { headers: this._refetchHeaders } : {}, r4 = yield fetch(e4, n4);
                if (clearTimeout(this._networkTimeout), this.cancelled || this._networkTimedOut)
                  throw new ke();
                var i4 = yield this._getBundleCodeFromResponse(e4, r4);
                if (this.cancelled)
                  throw new ke();
                Function('"use strict";' + i4)(), this._iosCache && this._iosCache.set(e4, i4, r4.headers), this.succeeded = true, this._successCallback();
              } catch (t5) {
                if (clearTimeout(this._networkTimeout), t5 instanceof ke || this.cancelled || this._networkTimedOut)
                  return;
                this._failureCallback("Failed to load call object bundle ".concat(e4, ": ").concat(t5));
              }
            }), function(e4) {
              return n3.apply(this, arguments);
            }) }, { key: "_getBundleCodeFromResponse", value: (t3 = o2()(function* (e4, t4) {
              if (t4.ok)
                return yield t4.text();
              if (this._iosCache && 304 === t4.status)
                return (yield this._iosCache.renew(e4, t4.headers)).code;
              throw new Error("Received ".concat(t4.status, " response"));
            }), function(e4, n4) {
              return t3.apply(this, arguments);
            }) }]), e3;
          }(), Ee = function() {
            function e3(t4, n3) {
              c3()(this, e3), this.cancelled = false, this.succeeded = false, this._successCallback = t4, this._failureCallback = n3, this._attemptId = ee(), this._networkTimeout = null, this._scriptElement = null;
            }
            var t3;
            return f2()(e3, [{ key: "start", value: (t3 = o2()(function* () {
              window._dailyCallMachineLoadWaitlist || (window._dailyCallMachineLoadWaitlist = /* @__PURE__ */ new Set());
              var e4 = ne();
              "object" === ("undefined" == typeof document ? "undefined" : S2()(document)) ? this._startLoading(e4) : this._failureCallback("Call object bundle must be loaded in a DOM/web context");
            }), function() {
              return t3.apply(this, arguments);
            }) }, { key: "cancel", value: function() {
              this._stopLoading(), this.cancelled = true;
            } }, { key: "_startLoading", value: function(e4) {
              var t4 = this;
              this._signUpForCallMachineLoadWaitlist(), this._networkTimeout = setTimeout(function() {
                t4._stopLoading(), t4._failureCallback("Timed out (>".concat(2e4, " ms) when loading call object bundle ").concat(e4));
              }, 2e4);
              var n3 = document.getElementsByTagName("head")[0], r3 = document.createElement("script");
              this._scriptElement = r3, r3.onload = o2()(function* () {
                t4._stopLoading(), t4.succeeded = true, t4._successCallback();
              }), r3.onerror = function() {
                var e5 = o2()(function* (e6) {
                  t4._stopLoading(), t4._failureCallback("Failed to load call object bundle ".concat(e6.target.src));
                });
                return function(t5) {
                  return e5.apply(this, arguments);
                };
              }(), r3.src = e4, n3.appendChild(r3);
            } }, { key: "_stopLoading", value: function() {
              this._withdrawFromCallMachineLoadWaitlist(), clearTimeout(this._networkTimeout), this._scriptElement && (this._scriptElement.onload = null, this._scriptElement.onerror = null);
            } }, { key: "_signUpForCallMachineLoadWaitlist", value: function() {
              window._dailyCallMachineLoadWaitlist.add(this._attemptId);
            } }, { key: "_withdrawFromCallMachineLoadWaitlist", value: function() {
              window._dailyCallMachineLoadWaitlist.delete(this._attemptId);
            } }]), e3;
          }(), Ae = n2(57), Te = n2.n(Ae), Oe = n2(58), Ce = n2.n(Oe), Pe = function(e3, t3, n3) {
            return true === Ie(e3.local, t3, n3);
          }, je = function(e3, t3, n3) {
            return e3.local.streams && e3.local.streams[t3] && e3.local.streams[t3].stream && e3.local.streams[t3].stream["get".concat("video" === n3 ? "Video" : "Audio", "Tracks")]()[0];
          }, Le = function(e3, t3, n3, r3) {
            var i3 = xe(e3, t3, n3, r3);
            return i3 && i3.pendingTrack;
          }, Ie = function(e3, t3, n3) {
            if (!e3)
              return false;
            var r3 = function(e4) {
              switch (e4) {
                case "avatar":
                  return true;
                case "staged":
                  return e4;
                default:
                  return !!e4;
              }
            }, i3 = e3.public.subscribedTracks;
            return i3 && i3[t3] ? -1 === ["cam-audio", "cam-video", "screen-video", "screen-audio", "rmpAudio", "rmpVideo"].indexOf(n3) && i3[t3].custom ? [true, "staged"].includes(i3[t3].custom) ? r3(i3[t3].custom) : r3(i3[t3].custom[n3]) : r3(i3[t3][n3]) : !i3 || r3(i3.ALL);
          }, xe = function(e3, t3, n3, r3) {
            var i3 = Ce()(Te()(e3.streams, function(e4) {
              return e4.participantId === t3 && e4.type === n3 && e4.pendingTrack && e4.pendingTrack.kind === r3;
            }), "starttime", "desc");
            return i3 && i3[0];
          }, De = function(e3, t3) {
            var n3 = e3.local.public.customTracks;
            if (n3 && n3[t3])
              return n3[t3].track;
          };
          function Ne(e3) {
            for (var t3 = store.getState(), n3 = 0, r3 = ["cam", "screen"]; n3 < r3.length; n3++)
              for (var i3 = r3[n3], a3 = 0, o3 = ["video", "audio"]; a3 < o3.length; a3++) {
                var s3 = o3[a3], c4 = "cam" === i3 ? s3 : "screen".concat(s3.charAt(0).toUpperCase() + s3.slice(1)), u3 = e3.tracks[c4];
                if (u3) {
                  var l3 = e3.local ? je(t3, i3, s3) : Le(t3, e3.session_id, i3, s3);
                  "playable" === u3.state && (u3.track = l3), u3.persistentTrack = l3;
                }
              }
          }
          function Re(e3) {
            try {
              var t3 = store.getState();
              for (var n3 in e3.tracks)
                if (!Fe(n3)) {
                  var r3 = e3.tracks[n3].kind;
                  if (r3) {
                    var i3 = e3.tracks[n3];
                    if (i3) {
                      var a3 = e3.local ? De(t3, n3) : Le(t3, e3.session_id, n3, r3);
                      "playable" === i3.state && (e3.tracks[n3].track = a3), i3.persistentTrack = a3;
                    }
                  } else
                    console.error("unknown type for custom track");
                }
            } catch (e4) {
              console.error(e4);
            }
          }
          function Fe(e3) {
            return ["video", "audio", "screenVideo", "screenAudio"].includes(e3);
          }
          function Be(e3, t3) {
            var n3 = store.getState();
            if (e3.local) {
              if (e3.audio)
                try {
                  e3.audioTrack = n3.local.streams.cam.stream.getAudioTracks()[0], e3.audioTrack || (e3.audio = false);
                } catch (e4) {
                }
              if (e3.video)
                try {
                  e3.videoTrack = n3.local.streams.cam.stream.getVideoTracks()[0], e3.videoTrack || (e3.video = false);
                } catch (e4) {
                }
              if (e3.screen)
                try {
                  e3.screenVideoTrack = n3.local.streams.screen.stream.getVideoTracks()[0], e3.screenAudioTrack = n3.local.streams.screen.stream.getAudioTracks()[0], e3.screenVideoTrack || e3.screenAudioTrack || (e3.screen = false);
                } catch (e4) {
                }
            } else {
              var r3 = true;
              try {
                var i3 = n3.participants[e3.session_id];
                i3 && i3.public && i3.public.rtcType && "peer-to-peer" === i3.public.rtcType.impl && i3.private && !["connected", "completed"].includes(i3.private.peeringState) && (r3 = false);
              } catch (e4) {
                console.error(e4);
              }
              if (!r3)
                return e3.audio = false, e3.audioTrack = false, e3.video = false, e3.videoTrack = false, e3.screen = false, void (e3.screenTrack = false);
              try {
                n3.streams;
                if (e3.audio && Pe(n3, e3.session_id, "cam-audio")) {
                  var a3 = Le(n3, e3.session_id, "cam", "audio");
                  a3 && (t3 && t3.audioTrack && t3.audioTrack.id === a3.id ? e3.audioTrack = a3 : a3.muted || (e3.audioTrack = a3)), e3.audioTrack || (e3.audio = false);
                }
                if (e3.video && Pe(n3, e3.session_id, "cam-video")) {
                  var o3 = Le(n3, e3.session_id, "cam", "video");
                  o3 && (t3 && t3.videoTrack && t3.videoTrack.id === o3.id ? e3.videoTrack = o3 : o3.muted || (e3.videoTrack = o3)), e3.videoTrack || (e3.video = false);
                }
                if (e3.screen && Pe(n3, e3.session_id, "screen-audio")) {
                  var s3 = Le(n3, e3.session_id, "screen", "audio");
                  s3 && (t3 && t3.screenAudioTrack && t3.screenAudioTrack.id === s3.id ? e3.screenAudioTrack = s3 : s3.muted || (e3.screenAudioTrack = s3));
                }
                if (e3.screen && Pe(n3, e3.session_id, "screen-video")) {
                  var c4 = Le(n3, e3.session_id, "screen", "video");
                  c4 && (t3 && t3.screenVideoTrack && t3.screenVideoTrack.id === c4.id ? e3.screenVideoTrack = c4 : c4.muted || (e3.screenVideoTrack = c4));
                }
                e3.screenVideoTrack || e3.screenAudioTrack || (e3.screen = false);
              } catch (e4) {
                console.error("unexpected error matching up tracks", e4);
              }
            }
          }
          function Ve(e3, t3) {
            var n3 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var r3 = Object.getOwnPropertySymbols(e3);
              t3 && (r3 = r3.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), n3.push.apply(n3, r3);
            }
            return n3;
          }
          function Ue(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? Ve(Object(n3), true).forEach(function(t4) {
                b2()(e3, t4, n3[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : Ve(Object(n3)).forEach(function(t4) {
                Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
              });
            }
            return e3;
          }
          function Ye(e3) {
            var t3 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }();
            return function() {
              var n3, r3 = y2()(e3);
              if (t3) {
                var i3 = y2()(this).constructor;
                n3 = Reflect.construct(r3, arguments, i3);
              } else
                n3 = r3.apply(this, arguments);
              return m2()(this, n3);
            };
          }
          function Je(e3, t3) {
            var n3;
            if ("undefined" == typeof Symbol || null == e3[Symbol.iterator]) {
              if (Array.isArray(e3) || (n3 = function(e4, t4) {
                if (!e4)
                  return;
                if ("string" == typeof e4)
                  return We(e4, t4);
                var n4 = Object.prototype.toString.call(e4).slice(8, -1);
                "Object" === n4 && e4.constructor && (n4 = e4.constructor.name);
                if ("Map" === n4 || "Set" === n4)
                  return Array.from(e4);
                if ("Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
                  return We(e4, t4);
              }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                n3 && (e3 = n3);
                var r3 = 0, i3 = function() {
                };
                return { s: i3, n: function() {
                  return r3 >= e3.length ? { done: true } : { done: false, value: e3[r3++] };
                }, e: function(e4) {
                  throw e4;
                }, f: i3 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a3, o3 = true, s3 = false;
            return { s: function() {
              n3 = e3[Symbol.iterator]();
            }, n: function() {
              var e4 = n3.next();
              return o3 = e4.done, e4;
            }, e: function(e4) {
              s3 = true, a3 = e4;
            }, f: function() {
              try {
                o3 || null == n3.return || n3.return();
              } finally {
                if (s3)
                  throw a3;
              }
            } };
          }
          function We(e3, t3) {
            (null == t3 || t3 > e3.length) && (t3 = e3.length);
            for (var n3 = 0, r3 = new Array(t3); n3 < t3; n3++)
              r3[n3] = e3[n3];
            return r3;
          }
          n2.d(t2, "default", function() {
            return tt;
          }), n2.d(t2, "DAILY_STATE_NEW", function() {
            return P2;
          }), n2.d(t2, "DAILY_STATE_JOINING", function() {
            return L2;
          }), n2.d(t2, "DAILY_STATE_JOINED", function() {
            return I2;
          }), n2.d(t2, "DAILY_STATE_LEFT", function() {
            return x2;
          }), n2.d(t2, "DAILY_STATE_ERROR", function() {
            return D2;
          }), n2.d(t2, "DAILY_TRACK_STATE_BLOCKED", function() {
            return "blocked";
          }), n2.d(t2, "DAILY_TRACK_STATE_OFF", function() {
            return "off";
          }), n2.d(t2, "DAILY_TRACK_STATE_SENDABLE", function() {
            return "sendable";
          }), n2.d(t2, "DAILY_TRACK_STATE_LOADING", function() {
            return "loading";
          }), n2.d(t2, "DAILY_TRACK_STATE_INTERRUPTED", function() {
            return "interrupted";
          }), n2.d(t2, "DAILY_TRACK_STATE_PLAYABLE", function() {
            return "playable";
          }), n2.d(t2, "DAILY_ACCESS_UNKNOWN", function() {
            return "unknown";
          }), n2.d(t2, "DAILY_ACCESS_LEVEL_FULL", function() {
            return "full";
          }), n2.d(t2, "DAILY_ACCESS_LEVEL_LOBBY", function() {
            return "lobby";
          }), n2.d(t2, "DAILY_ACCESS_LEVEL_NONE", function() {
            return "none";
          }), n2.d(t2, "DAILY_RECEIVE_SETTINGS_BASE_KEY", function() {
            return "base";
          }), n2.d(t2, "DAILY_RECEIVE_SETTINGS_ALL_PARTICIPANTS_KEY", function() {
            return "*";
          }), n2.d(t2, "DAILY_FATAL_ERROR_EJECTED", function() {
            return "ejected";
          }), n2.d(t2, "DAILY_FATAL_ERROR_NBF_ROOM", function() {
            return "nbf-room";
          }), n2.d(t2, "DAILY_FATAL_ERROR_NBF_TOKEN", function() {
            return "nbf-token";
          }), n2.d(t2, "DAILY_FATAL_ERROR_EXP_ROOM", function() {
            return "exp-room";
          }), n2.d(t2, "DAILY_FATAL_ERROR_EXP_TOKEN", function() {
            return "exp-token";
          }), n2.d(t2, "DAILY_FATAL_ERROR_MEETING_FULL", function() {
            return "meeting-full";
          }), n2.d(t2, "DAILY_CAMERA_ERROR_CAM_IN_USE", function() {
            return "cam-in-use";
          }), n2.d(t2, "DAILY_CAMERA_ERROR_MIC_IN_USE", function() {
            return "mic-in-use";
          }), n2.d(t2, "DAILY_CAMERA_ERROR_CAM_AND_MIC_IN_USE", function() {
            return "cam-mic-in-use";
          }), n2.d(t2, "DAILY_CAMERA_ERROR_PERMISSIONS", function() {
            return "permissions";
          }), n2.d(t2, "DAILY_CAMERA_ERROR_UNDEF_MEDIADEVICES", function() {
            return "undefined-mediadevices";
          }), n2.d(t2, "DAILY_CAMERA_ERROR_NOT_FOUND", function() {
            return "not-found";
          }), n2.d(t2, "DAILY_CAMERA_ERROR_CONSTRAINTS", function() {
            return "constraints";
          }), n2.d(t2, "DAILY_CAMERA_ERROR_UNKNOWN", function() {
            return "unknown";
          }), n2.d(t2, "DAILY_EVENT_IFRAME_READY_FOR_LAUNCH_CONFIG", function() {
            return "iframe-ready-for-launch-config";
          }), n2.d(t2, "DAILY_EVENT_IFRAME_LAUNCH_CONFIG", function() {
            return "iframe-launch-config";
          }), n2.d(t2, "DAILY_EVENT_THEME_UPDATED", function() {
            return "theme-updated";
          }), n2.d(t2, "DAILY_EVENT_LOADING", function() {
            return "loading";
          }), n2.d(t2, "DAILY_EVENT_LOADED", function() {
            return "loaded";
          }), n2.d(t2, "DAILY_EVENT_LOAD_ATTEMPT_FAILED", function() {
            return "load-attempt-failed";
          }), n2.d(t2, "DAILY_EVENT_STARTED_CAMERA", function() {
            return "started-camera";
          }), n2.d(t2, "DAILY_EVENT_CAMERA_ERROR", function() {
            return "camera-error";
          }), n2.d(t2, "DAILY_EVENT_JOINING_MEETING", function() {
            return "joining-meeting";
          }), n2.d(t2, "DAILY_EVENT_JOINED_MEETING", function() {
            return "joined-meeting";
          }), n2.d(t2, "DAILY_EVENT_LEFT_MEETING", function() {
            return "left-meeting";
          }), n2.d(t2, "DAILY_EVENT_PARTICIPANT_JOINED", function() {
            return "participant-joined";
          }), n2.d(t2, "DAILY_EVENT_PARTICIPANT_UPDATED", function() {
            return "participant-updated";
          }), n2.d(t2, "DAILY_EVENT_PARTICIPANT_LEFT", function() {
            return "participant-left";
          }), n2.d(t2, "DAILY_EVENT_PARTICIPANT_COUNTS_UPDATED", function() {
            return "participant-counts-updated";
          }), n2.d(t2, "DAILY_EVENT_TRACK_STARTED", function() {
            return "track-started";
          }), n2.d(t2, "DAILY_EVENT_TRACK_STOPPED", function() {
            return "track-stopped";
          }), n2.d(t2, "DAILY_EVENT_RECORDING_STARTED", function() {
            return "recording-started";
          }), n2.d(t2, "DAILY_EVENT_RECORDING_STOPPED", function() {
            return "recording-stopped";
          }), n2.d(t2, "DAILY_EVENT_RECORDING_STATS", function() {
            return "recording-stats";
          }), n2.d(t2, "DAILY_EVENT_RECORDING_ERROR", function() {
            return "recording-error";
          }), n2.d(t2, "DAILY_EVENT_RECORDING_UPLOAD_COMPLETED", function() {
            return "recording-upload-completed";
          }), n2.d(t2, "DAILY_EVENT_REMOTE_MEDIA_PLAYER_STARTED", function() {
            return "remote-media-player-started";
          }), n2.d(t2, "DAILY_EVENT_REMOTE_MEDIA_PLAYER_UPDATED", function() {
            return "remote-media-player-updated";
          }), n2.d(t2, "DAILY_EVENT_REMOTE_MEDIA_PLAYER_STOPPED", function() {
            return "remote-media-player-stopped";
          }), n2.d(t2, "DAILY_EVENT_TRANSCRIPTION_STARTED", function() {
            return "transcription-started";
          }), n2.d(t2, "DAILY_EVENT_TRANSCRIPTION_STOPPED", function() {
            return "transcription-stopped";
          }), n2.d(t2, "DAILY_EVENT_TRANSCRIPTION_ERROR", function() {
            return "transcription-error";
          }), n2.d(t2, "DAILY_EVENT_ERROR", function() {
            return "error";
          }), n2.d(t2, "DAILY_EVENT_APP_MSG", function() {
            return "app-message";
          }), n2.d(t2, "DAILY_EVENT_INPUT_EVENT", function() {
            return "input-event";
          }), n2.d(t2, "DAILY_EVENT_LOCAL_SCREEN_SHARE_STARTED", function() {
            return "local-screen-share-started";
          }), n2.d(t2, "DAILY_EVENT_LOCAL_SCREEN_SHARE_STOPPED", function() {
            return "local-screen-share-stopped";
          }), n2.d(t2, "DAILY_EVENT_NETWORK_QUALITY_CHANGE", function() {
            return "network-quality-change";
          }), n2.d(t2, "DAILY_EVENT_ACTIVE_SPEAKER_CHANGE", function() {
            return "active-speaker-change";
          }), n2.d(t2, "DAILY_EVENT_ACTIVE_SPEAKER_MODE_CHANGE", function() {
            return "active-speaker-mode-change";
          }), n2.d(t2, "DAILY_EVENT_FULLSCREEN", function() {
            return "fullscreen";
          }), n2.d(t2, "DAILY_EVENT_EXIT_FULLSCREEN", function() {
            return "exited-fullscreen";
          }), n2.d(t2, "DAILY_EVENT_NETWORK_CONNECTION", function() {
            return "network-connection";
          }), n2.d(t2, "DAILY_EVENT_RECORDING_DATA", function() {
            return "recording-data";
          }), n2.d(t2, "DAILY_EVENT_LIVE_STREAMING_STARTED", function() {
            return "live-streaming-started";
          }), n2.d(t2, "DAILY_EVENT_LIVE_STREAMING_STOPPED", function() {
            return "live-streaming-stopped";
          }), n2.d(t2, "DAILY_EVENT_LIVE_STREAMING_ERROR", function() {
            return "live-streaming-error";
          }), n2.d(t2, "DAILY_EVENT_LANG_UPDATED", function() {
            return "lang-updated";
          }), n2.d(t2, "DAILY_EVENT_ACCESS_STATE_UPDATED", function() {
            return "access-state-updated";
          }), n2.d(t2, "DAILY_EVENT_MEETING_SESSION_UPDATED", function() {
            return "meeting-session-updated";
          }), n2.d(t2, "DAILY_EVENT_MEETING_SESSION_STATE_UPDATED", function() {
            return "meeting-session-state-updated";
          }), n2.d(t2, "DAILY_EVENT_MEETING_SESSION_DATA_ERROR", function() {
            return "meeting-session-data-error";
          }), n2.d(t2, "DAILY_EVENT_WAITING_PARTICIPANT_ADDED", function() {
            return "waiting-participant-added";
          }), n2.d(t2, "DAILY_EVENT_WAITING_PARTICIPANT_REMOVED", function() {
            return "waiting-participant-removed";
          }), n2.d(t2, "DAILY_EVENT_WAITING_PARTICIPANT_UPDATED", function() {
            return "waiting-participant-updated";
          }), n2.d(t2, "DAILY_EVENT_RECEIVE_SETTINGS_UPDATED", function() {
            return "receive-settings-updated";
          }), n2.d(t2, "DAILY_EVENT_INPUT_SETTINGS_UPDATED", function() {
            return "input-settings-updated";
          }), n2.d(t2, "DAILY_EVENT_NONFATAL_ERROR", function() {
            return "nonfatal-error";
          });
          var ze = "video", Ge = "voice", qe = Y2() ? { data: {} } : { data: {}, topology: "none" }, Ke = { present: 0, hidden: 0 }, He = { maxBitrate: { min: 1e5, max: 25e5 }, maxFramerate: { min: 1, max: 30 }, scaleResolutionDownBy: { min: 1, max: 8 } }, Qe = ["state", "volume", "simulcastEncodings"], $e = { androidInCallNotification: { title: "string", subtitle: "string", iconName: "string", disableForCustomOverride: "boolean" }, disableAutoDeviceManagement: { audio: "boolean", video: "boolean" } }, Ze = { id: { iconPath: "string", iconPathDarkMode: "string", label: "string", tooltip: "string" } }, Xe = { customTrayButtons: { validate: dt, help: "customTrayButtons should be a dictionary of the type ".concat(JSON.stringify(Ze)) }, url: { validate: function(e3) {
            return "string" == typeof e3;
          }, help: "url should be a string" }, baseUrl: { validate: function(e3) {
            return "string" == typeof e3;
          }, help: "baseUrl should be a string" }, token: { validate: function(e3) {
            return "string" == typeof e3;
          }, help: "token should be a string", queryString: "t" }, dailyConfig: { validate: function(e3) {
            return window._dailyConfig || (window._dailyConfig = {}), window._dailyConfig.experimentalGetUserMediaConstraintsModify = e3.experimentalGetUserMediaConstraintsModify, window._dailyConfig.userMediaVideoConstraints = e3.userMediaVideoConstraints, window._dailyConfig.userMediaAudioConstraints = e3.userMediaAudioConstraints, window._dailyConfig.callObjectBundleUrlOverride = e3.callObjectBundleUrlOverride, true;
          } }, reactNativeConfig: { validate: function(e3) {
            return function e4(t3, n3) {
              if (void 0 === n3)
                return false;
              switch (S2()(n3)) {
                case "string":
                  return S2()(t3) === n3;
                case "object":
                  if ("object" !== S2()(t3))
                    return false;
                  for (var r3 in t3)
                    if (!e4(t3[r3], n3[r3]))
                      return false;
                  return true;
                default:
                  return false;
              }
            }(e3, $e);
          }, help: "reactNativeConfig should look like ".concat(JSON.stringify($e), ", all fields optional") }, lang: { validate: function(e3) {
            return ["de", "en-us", "en", "es", "fi", "fr", "it", "jp", "ka", "nl", "no", "pl", "pt", "ru", "sv", "tr", "user"].includes(e3);
          }, help: "language not supported. Options are: de, en-us, en, es, fi, fr, it, jp, ka, nl, no, pl, pt, ru, sv, tr, user" }, userName: true, userData: { validate: function(e3) {
            try {
              return ot(e3), true;
            } catch (e4) {
              return console.error(e4), false;
            }
          }, help: "invalid userData type provided" }, startVideoOff: true, startAudioOff: true, activeSpeakerMode: true, showLeaveButton: true, showLocalVideo: true, showParticipantsBar: true, showFullscreenButton: true, showUserNameChangeUI: true, iframeStyle: true, customLayout: true, cssFile: true, cssText: true, bodyClass: true, videoSource: { validate: function(e3, t3) {
            return t3._preloadCache.videoDeviceId = e3, true;
          } }, audioSource: { validate: function(e3, t3) {
            return t3._preloadCache.audioDeviceId = e3, true;
          } }, subscribeToTracksAutomatically: { validate: function(e3, t3) {
            return t3._preloadCache.subscribeToTracksAutomatically = e3, true;
          } }, theme: { validate: function(e3) {
            var t3 = ["accent", "accentText", "background", "backgroundAccent", "baseText", "border", "mainAreaBg", "mainAreaBgAccent", "mainAreaText", "supportiveText"], n3 = function(e4) {
              for (var n4 = 0, r3 = Object.keys(e4); n4 < r3.length; n4++) {
                var i3 = r3[n4];
                if (!t3.includes(i3))
                  return console.error('unsupported color "'.concat(i3, '". Valid colors: ').concat(t3.join(", "))), false;
                if (!e4[i3].match(/^#[0-9a-f]{6}|#[0-9a-f]{3}$/i))
                  return console.error("".concat(i3, ' theme color should be provided in valid hex color format. Received: "').concat(e4[i3], '"')), false;
              }
              return true;
            };
            return "object" === S2()(e3) && ("light" in e3 && "dark" in e3 || "colors" in e3) ? "light" in e3 && "dark" in e3 ? "colors" in e3.light ? "colors" in e3.dark ? n3(e3.light.colors) && n3(e3.dark.colors) : (console.error('Dark theme is missing "colors" property.', e3), false) : (console.error('Light theme is missing "colors" property.', e3), false) : n3(e3.colors) : (console.error('Theme must contain either both "light" and "dark" properties, or "colors".', e3), false);
          }, help: "unsupported theme configuration. Check error logs for detailed info." }, layoutConfig: { validate: function(e3) {
            if ("grid" in e3) {
              var t3 = e3.grid;
              if ("maxTilesPerPage" in t3) {
                if (!Number.isInteger(t3.maxTilesPerPage))
                  return console.error("grid.maxTilesPerPage should be an integer. You passed ".concat(t3.maxTilesPerPage, ".")), false;
                if (t3.maxTilesPerPage > 49)
                  return console.error("grid.maxTilesPerPage can't be larger than 49 without sacrificing browser performance. Please contact us at https://www.daily.co/contact to talk about your use case."), false;
              }
              if ("minTilesPerPage" in t3) {
                if (!Number.isInteger(t3.minTilesPerPage))
                  return console.error("grid.minTilesPerPage should be an integer. You passed ".concat(t3.minTilesPerPage, ".")), false;
                if (t3.minTilesPerPage < 1)
                  return console.error("grid.minTilesPerPage can't be lower than 1."), false;
                if ("maxTilesPerPage" in t3 && t3.minTilesPerPage > t3.maxTilesPerPage)
                  return console.error("grid.minTilesPerPage can't be higher than grid.maxTilesPerPage."), false;
              }
            }
            return true;
          }, help: "unsupported layoutConfig. Check error logs for detailed info." }, receiveSettings: { validate: function(e3) {
            return st(e3, { allowAllParticipantsKey: false });
          }, help: lt({ allowAllParticipantsKey: false }) }, inputSettings: { validate: function(e3) {
            return ct(e3);
          }, help: ut() }, layout: { validate: function(e3) {
            return "custom-v1" === e3 || "browser" === e3 || "none" === e3;
          }, help: 'layout may only be set to "custom-v1"', queryString: "layout" }, emb: { queryString: "emb" }, embHref: { queryString: "embHref" }, dailyJsVersion: { queryString: "dailyJsVersion" } }, et = { styles: { validate: function(e3) {
            for (var t3 in e3)
              if ("cam" !== t3 && "screen" !== t3)
                return false;
            if (e3.cam) {
              for (var t3 in e3.cam)
                if ("div" !== t3 && "video" !== t3)
                  return false;
            }
            if (e3.screen) {
              for (var t3 in e3.screen)
                if ("div" !== t3 && "video" !== t3)
                  return false;
            }
            return true;
          }, help: "styles format should be a subset of: { cam: {div: {}, video: {}}, screen: {div: {}, video: {}} }" }, setSubscribedTracks: { validate: function(e3, t3, n3) {
            if (t3._preloadCache.subscribeToTracksAutomatically)
              return false;
            var r3 = [true, false, "staged"];
            if (r3.includes(e3) || !Y2() && "avatar" === e3)
              return true;
            var i3 = ["audio", "video", "screenAudio", "screenVideo", "rmpAudio", "rmpVideo"];
            return function e4(t4) {
              var n4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              for (var a3 in t4)
                if ("custom" === a3) {
                  var o3 = r3.includes(t4[a3]);
                  if (!o3 && !e4(t4[a3], true))
                    return false;
                } else {
                  var s3 = !n4 && !i3.includes(a3), c4 = !r3.includes(t4[a3]);
                  if (s3 || c4)
                    return false;
                }
              return true;
            }(e3);
          }, help: "setSubscribedTracks cannot be used when setSubscribeToTracksAutomatically is enabled, and should be of the form: " + "true".concat(Y2() ? "" : " | 'avatar'", " | false | 'staged' | { [audio: true|false|'staged'], [video: true|false|'staged'], [screenAudio: true|false|'staged'], [screenVideo: true|false|'staged'] }") }, setAudio: true, setVideo: true, eject: true, updatePermissions: { validate: function(e3) {
            for (var t3 = 0, n3 = Object.entries(e3); t3 < n3.length; t3++) {
              var r3 = k2()(n3[t3], 2), i3 = r3[0], a3 = r3[1];
              switch (i3) {
                case "hasPresence":
                  if ("boolean" != typeof a3)
                    return false;
                  break;
                case "canSend":
                  if (a3 instanceof Set) {
                    var o3, s3 = ["video", "audio", "screenVideo", "screenAudio", "customVideo", "customAudio"], c4 = Je(a3);
                    try {
                      for (c4.s(); !(o3 = c4.n()).done; ) {
                        var u3 = o3.value;
                        if (!s3.includes(u3))
                          return false;
                      }
                    } catch (e4) {
                      c4.e(e4);
                    } finally {
                      c4.f();
                    }
                  } else if ("boolean" != typeof a3)
                    return false;
                  break;
                default:
                  return false;
              }
            }
            return true;
          }, help: "updatePermissions can take hasPresence and canSend permissions. hasPresence must be a boolean. canSend can be a boolean or an array of media types (video, audio, screenVideo, screenAudio, customVideo, customAudio)." } }, tt = function(e3) {
            h2()(te2, e3);
            var t3, n3, r3, a3, s3, u3, d3, p3, v3, m3, g3, y3, _2, w3, k3, M3, E3, O3, N3, F3, J3, G3, H3, Q2, $3, Z3, X2 = Ye(te2);
            function te2(e4) {
              var t4, n4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
              if (c3()(this, te2), t4 = X2.call(this), b2()(l2()(t4), "startListeningForDeviceChanges", function() {
                void 0 !== navigator.mediaDevices.ondevicechange || Y2() ? navigator.mediaDevices.addEventListener("devicechange", t4.deviceChangeListener) : t4.startPollingForDeviceChanges();
              }), b2()(l2()(t4), "stopListeningForDeviceChanges", function() {
                void 0 !== navigator.mediaDevices.ondevicechange || Y2() ? navigator.mediaDevices.removeEventListener("devicechange", t4.deviceChangeListener) : t4.stopPollingForDeviceChanges();
              }), b2()(l2()(t4), "deviceChangeListener", o2()(function* () {
                var e5 = yield t4.enumerateDevices();
                t4.handleDeviceChange(e5.devices);
              })), b2()(l2()(t4), "handleDeviceChange", function(e5) {
                t4.emit("available-devices-updated", { action: "available-devices-updated", availableDevices: e5 });
              }), b2()(l2()(t4), "startPollingForDeviceChanges", function() {
                t4._deviceChangeInterval || (t4._deviceChangeInterval = setInterval(o2()(function* () {
                  var e5 = yield t4.enumerateDevices(), n5 = JSON.stringify(e5);
                  t4._lastDevicesJSON && n5 !== t4._lastDevicesJSON && t4.handleDeviceChange(e5.devices), t4._lastDevicesJSON = n5;
                }), 3e3));
              }), b2()(l2()(t4), "stopPollingForDeviceChanges", function() {
                t4._deviceChangeInterval && (clearInterval(t4._deviceChangeInterval), t4._deviceChangeInterval = null, t4._lastDevicesJSON = null);
              }), b2()(l2()(t4), "handleNativeAppActiveStateChange", function(e5) {
                t4.disableReactNativeAutoDeviceManagement("video") || (e5 ? t4.camUnmutedBeforeLosingNativeActiveState && t4.setLocalVideo(true) : (t4.camUnmutedBeforeLosingNativeActiveState = t4.localVideo(), t4.camUnmutedBeforeLosingNativeActiveState && t4.setLocalVideo(false)));
              }), b2()(l2()(t4), "handleNativeAudioFocusChange", function(e5) {
                t4.disableReactNativeAutoDeviceManagement("audio") || (t4._hasNativeAudioFocus = e5, t4.toggleParticipantAudioBasedOnNativeAudioFocus(), t4._hasNativeAudioFocus ? t4.micUnmutedBeforeLosingNativeAudioFocus && t4.setLocalAudio(true) : (t4.micUnmutedBeforeLosingNativeAudioFocus = t4.localAudio(), t4.setLocalAudio(false)));
              }), n4.dailyJsVersion = te2.version(), t4._iframe = e4, t4._callObjectMode = "none" === n4.layout && !t4._iframe, t4._preloadCache = { subscribeToTracksAutomatically: true, audioDeviceId: null, videoDeviceId: null, outputDeviceId: null }, t4._callObjectMode && (window._dailyPreloadCache = t4._preloadCache), void 0 !== n4.showLocalVideo ? t4._callObjectMode ? console.error("showLocalVideo is not available in call object mode") : t4._showLocalVideo = !!n4.showLocalVideo : t4._showLocalVideo = true, void 0 !== n4.showParticipantsBar ? t4._callObjectMode ? console.error("showParticipantsBar is not available in call object mode") : t4._showParticipantsBar = !!n4.showParticipantsBar : t4._showParticipantsBar = true, void 0 !== n4.customTrayButtons ? t4._callObjectMode ? console.error("customTrayButtons is not available in call object mode") : t4._customTrayButtons = n4.customTrayButtons : t4._customTrayButtons = {}, void 0 !== n4.activeSpeakerMode ? t4._callObjectMode ? console.error("activeSpeakerMode is not available in call object mode") : t4._activeSpeakerMode = !!n4.activeSpeakerMode : t4._activeSpeakerMode = false, n4.receiveSettings ? t4._callObjectMode ? t4._receiveSettings = n4.receiveSettings : console.error("receiveSettings is only available in call object mode") : t4._receiveSettings = {}, t4._inputSettings = {}, n4.inputSettings && (t4._inputSettings = n4.inputSettings), t4.validateProperties(n4), t4.properties = Ue({}, n4), t4._callObjectLoader = t4._callObjectMode ? new be() : null, t4._callState = P2, t4._isPreparingToJoin = false, t4._accessState = { access: "unknown" }, t4._meetingSessionState = qe, t4._nativeInCallAudioMode = ze, t4._participants = {}, t4._participantCounts = Ke, t4._rmpPlayerState = {}, t4._waitingParticipants = {}, t4._inputEventsOn = {}, t4._network = { threshold: "good", quality: 100 }, t4._activeSpeaker = {}, t4._callFrameId = ee(), t4._messageChannel = Y2() ? new le() : new ce(), t4._iframe && (t4._iframe.requestFullscreen ? t4._iframe.addEventListener("fullscreenchange", function(e5) {
                document.fullscreenElement === t4._iframe ? (t4.emit("fullscreen", { action: "fullscreen" }), t4.sendMessageToCallMachine({ action: "fullscreen" })) : (t4.emit("exited-fullscreen", { action: "exited-fullscreen" }), t4.sendMessageToCallMachine({ action: "exited-fullscreen" }));
              }) : t4._iframe.webkitRequestFullscreen && t4._iframe.addEventListener("webkitfullscreenchange", function(e5) {
                document.webkitFullscreenElement === t4._iframe ? (t4.emit("fullscreen", { action: "fullscreen" }), t4.sendMessageToCallMachine({ action: "fullscreen" })) : (t4.emit("exited-fullscreen", { action: "exited-fullscreen" }), t4.sendMessageToCallMachine({ action: "exited-fullscreen" }));
              })), Y2()) {
                var r4 = t4.nativeUtils();
                r4.addAudioFocusChangeListener && r4.removeAudioFocusChangeListener && r4.addAppActiveStateChangeListener && r4.removeAppActiveStateChangeListener || console.warn("expected (add|remove)(AudioFocus|AppActiveState)ChangeListener to be available in React Native"), t4._hasNativeAudioFocus = true, r4.addAudioFocusChangeListener(t4.handleNativeAudioFocusChange), r4.addAppActiveStateChangeListener(t4.handleNativeAppActiveStateChange);
              }
              return t4._callObjectMode && t4.startListeningForDeviceChanges(), t4._messageChannel.addListenerForMessagesFromCallMachine(t4.handleMessageFromCallMachine, t4._callFrameId, l2()(t4)), t4;
            }
            return f2()(te2, null, [{ key: "supportedBrowser", value: function() {
              if (Y2())
                return { supported: true, mobile: true, name: "React Native", version: null, supportsScreenShare: false, supportsSfu: true, supportsVideoProcessing: false };
              var e4 = C2.a.getParser(U2());
              return { supported: !!K(), mobile: "mobile" === e4.getPlatformType(), name: e4.getBrowserName(), version: e4.getBrowserVersion(), supportsFullscreen: !!z2(), supportsScreenShare: !!W2(), supportsSfu: !!K(), supportsVideoProcessing: q2() };
            } }, { key: "version", value: function() {
              return "0.34.0";
            } }, { key: "createCallObject", value: function() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              return e4.layout = "none", new te2(null, e4);
            } }, { key: "wrap", value: function(e4) {
              var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
              if (rt(), !e4 || !e4.contentWindow || "string" != typeof e4.src)
                throw new Error("DailyIframe::Wrap needs an iframe-like first argument");
              return t4.layout || (t4.customLayout ? t4.layout = "custom-v1" : t4.layout = "browser"), new te2(e4, t4);
            } }, { key: "createFrame", value: function(e4, t4) {
              var n4, r4;
              rt(), e4 && t4 ? (n4 = e4, r4 = t4) : e4 && e4.append ? (n4 = e4, r4 = {}) : (n4 = document.body, r4 = e4 || {});
              var i3 = r4.iframeStyle;
              i3 || (i3 = n4 === document.body ? { position: "fixed", border: "1px solid black", backgroundColor: "white", width: "375px", height: "450px", right: "1em", bottom: "1em" } : { border: 0, width: "100%", height: "100%" });
              var a4 = document.createElement("iframe");
              window.navigator && window.navigator.userAgent.match(/Chrome\/61\./) ? a4.allow = "microphone, camera" : a4.allow = "microphone; camera; autoplay; display-capture", a4.style.visibility = "hidden", n4.appendChild(a4), a4.style.visibility = null, Object.keys(i3).forEach(function(e5) {
                return a4.style[e5] = i3[e5];
              }), r4.layout || (r4.customLayout ? r4.layout = "custom-v1" : r4.layout = "browser");
              try {
                return new te2(a4, r4);
              } catch (e5) {
                throw n4.removeChild(a4), e5;
              }
            } }, { key: "createTransparentFrame", value: function() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              rt();
              var t4 = document.createElement("iframe");
              return t4.allow = "microphone; camera; autoplay", t4.style.cssText = "\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border: 0;\n      pointer-events: none;\n    ", document.body.appendChild(t4), e4.layout || (e4.layout = "custom-v1"), te2.wrap(t4, e4);
            } }]), f2()(te2, [{ key: "destroy", value: (Z3 = o2()(function* () {
              try {
                [I2, j2].includes(this._callState) && (yield this.leave());
              } catch (e5) {
              }
              var e4 = this._iframe;
              if (e4) {
                var t4 = e4.parentElement;
                t4 && t4.removeChild(e4);
              }
              if (this._messageChannel.removeListener(this.handleMessageFromCallMachine), Y2()) {
                var n4 = this.nativeUtils();
                n4.removeAudioFocusChangeListener(this.handleNativeAudioFocusChange), n4.removeAppActiveStateChangeListener(this.handleNativeAppActiveStateChange);
              }
              this._callObjectMode && this.stopListeningForDeviceChanges(), this.resetMeetingDependentVars();
            }), function() {
              return Z3.apply(this, arguments);
            }) }, { key: "loadCss", value: function(e4) {
              var t4 = e4.bodyClass, n4 = e4.cssFile, r4 = e4.cssText;
              return rt(), this.sendMessageToCallMachine({ action: "load-css", cssFile: this.absoluteUrl(n4), bodyClass: t4, cssText: r4 }), this;
            } }, { key: "iframe", value: function() {
              return rt(), this._iframe;
            } }, { key: "meetingState", value: function() {
              return this._callState;
            } }, { key: "accessState", value: function() {
              if (!this._callObjectMode)
                throw new Error("accessState() currently only supported in call object mode");
              return this._accessState;
            } }, { key: "participants", value: function() {
              return this._participants;
            } }, { key: "participantCounts", value: function() {
              return this._participantCounts;
            } }, { key: "waitingParticipants", value: function() {
              if (!this._callObjectMode)
                throw new Error("waitingParticipants() currently only supported in call object mode");
              return this._waitingParticipants;
            } }, { key: "validateParticipantProperties", value: function(e4, t4) {
              for (var n4 in t4) {
                if (!et[n4])
                  throw new Error("unrecognized updateParticipant property ".concat(n4));
                if (et[n4].validate && !et[n4].validate(t4[n4], this, this._participants[e4]))
                  throw new Error(et[n4].help);
              }
            } }, { key: "updateParticipant", value: function(e4, t4) {
              return this._participants.local && this._participants.local.session_id === e4 && (e4 = "local"), e4 && t4 && (this.validateParticipantProperties(e4, t4), this.sendMessageToCallMachine({ action: "update-participant", id: e4, properties: t4 })), this;
            } }, { key: "updateParticipants", value: function(e4) {
              var t4 = this._participants.local && this._participants.local.session_id;
              for (var n4 in e4)
                n4 === t4 && (n4 = "local"), n4 && e4[n4] && this.validateParticipantProperties(n4, e4[n4]);
              return this.sendMessageToCallMachine({ action: "update-participants", participants: e4 }), this;
            } }, { key: "updateWaitingParticipant", value: ($3 = o2()(function* () {
              var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", n4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
              if (!this._callObjectMode)
                throw new Error("updateWaitingParticipant() currently only supported in call object mode");
              if (this._callState !== I2)
                throw new Error("updateWaitingParticipant() only supported for joined meetings");
              if ("string" != typeof t4 || "object" !== S2()(n4))
                throw new Error("updateWaitingParticipant() must take an id string and a updates object");
              return new Promise(function(r4, i3) {
                e4.sendMessageToCallMachine({ action: "daily-method-update-waiting-participant", id: t4, updates: n4 }, function(e5) {
                  e5.error && i3(e5.error), e5.id || i3(new Error("unknown error in updateWaitingParticipant()")), r4({ id: e5.id });
                });
              });
            }), function() {
              return $3.apply(this, arguments);
            }) }, { key: "updateWaitingParticipants", value: (Q2 = o2()(function* () {
              var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              if (!this._callObjectMode)
                throw new Error("updateWaitingParticipants() currently only supported in call object mode");
              if (this._callState !== I2)
                throw new Error("updateWaitingParticipants() only supported for joined meetings");
              if ("object" !== S2()(t4))
                throw new Error("updateWaitingParticipants() must take a mapping between ids and update objects");
              return new Promise(function(n4, r4) {
                e4.sendMessageToCallMachine({ action: "daily-method-update-waiting-participants", updatesById: t4 }, function(e5) {
                  e5.error && r4(e5.error), e5.ids || r4(new Error("unknown error in updateWaitingParticipants()")), n4({ ids: e5.ids });
                });
              });
            }), function() {
              return Q2.apply(this, arguments);
            }) }, { key: "requestAccess", value: (H3 = o2()(function* () {
              var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n4 = t4.access, r4 = void 0 === n4 ? { level: "full" } : n4, i3 = t4.name, a4 = void 0 === i3 ? "" : i3;
              if (!this._callObjectMode)
                throw new Error("requestAccess() currently only supported in call object mode");
              if (this._callState !== I2)
                throw new Error("requestAccess() only supported for joined meetings");
              return new Promise(function(t5, n5) {
                e4.sendMessageToCallMachine({ action: "daily-method-request-access", access: r4, name: a4 }, function(e5) {
                  e5.error && n5(e5.error), e5.access || n5(new Error("unknown error in requestAccess()")), t5({ access: e5.access, granted: e5.granted });
                });
              });
            }), function() {
              return H3.apply(this, arguments);
            }) }, { key: "localAudio", value: function() {
              return this._participants.local ? this._participants.local.audio : null;
            } }, { key: "localVideo", value: function() {
              return this._participants.local ? this._participants.local.video : null;
            } }, { key: "setLocalAudio", value: function(e4) {
              return this.sendMessageToCallMachine({ action: "local-audio", state: e4 }), this;
            } }, { key: "setLocalVideo", value: function(e4) {
              return this.sendMessageToCallMachine({ action: "local-video", state: e4 }), this;
            } }, { key: "getReceiveSettings", value: (G3 = o2()(function* (e4) {
              var t4 = this, n4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r4 = n4.showInheritedValues, i3 = void 0 !== r4 && r4;
              if (!this._callObjectMode)
                throw new Error("getReceiveSettings() only supported in call object mode");
              switch (S2()(e4)) {
                case "string":
                  return new Promise(function(n5) {
                    t4.sendMessageToCallMachine({ action: "get-single-participant-receive-settings", id: e4, showInheritedValues: i3 }, function(e5) {
                      n5(e5.receiveSettings);
                    });
                  });
                case "undefined":
                  return this._receiveSettings;
                default:
                  throw new Error('first argument to getReceiveSettings() must be a participant id (or "base"), or there should be no arguments');
              }
            }), function(e4) {
              return G3.apply(this, arguments);
            }) }, { key: "updateReceiveSettings", value: (J3 = o2()(function* (e4) {
              var t4 = this;
              if (!this._callObjectMode)
                throw new Error("updateReceiveSettings() only supported in call object mode");
              if (!st(e4, { allowAllParticipantsKey: true }))
                throw new Error(lt({ allowAllParticipantsKey: true }));
              if (this._callState !== I2)
                throw new Error("updateReceiveSettings() is only allowed when joined. To specify receive settings earlier, use the receiveSettings config property.");
              return new Promise(function(n4) {
                t4.sendMessageToCallMachine({ action: "update-receive-settings", receiveSettings: e4 }, function(e5) {
                  n4({ receiveSettings: e5.receiveSettings });
                });
              });
            }), function(e4) {
              return J3.apply(this, arguments);
            }) }, { key: "getInputSettings", value: function() {
              var e4 = this;
              return new Promise(function(t4) {
                t4(e4._inputSettings);
              });
            } }, { key: "updateInputSettings", value: (F3 = o2()(function* (e4) {
              var t4 = this;
              return new Promise(function(n4, r4) {
                if (!ct(e4))
                  return console.error(ut()), void r4(ut());
                t4.sendMessageToCallMachine({ action: "update-input-settings", inputSettings: e4 }, function(e5) {
                  e5.error ? r4(e5.error) : n4({ inputSettings: e5.inputSettings });
                });
              });
            }), function(e4) {
              return F3.apply(this, arguments);
            }) }, { key: "setBandwidth", value: function(e4) {
              var t4 = e4.kbs, n4 = e4.trackConstraints;
              return rt(), this.sendMessageToCallMachine({ action: "set-bandwidth", kbs: t4, trackConstraints: n4 }), this;
            } }, { key: "getDailyLang", value: function() {
              var e4 = this;
              return rt(), new Promise(function() {
                var t4 = o2()(function* (t5) {
                  e4.sendMessageToCallMachine({ action: "get-daily-lang" }, function(e5) {
                    delete e5.action, delete e5.callbackStamp, t5(e5);
                  });
                });
                return function(e5) {
                  return t4.apply(this, arguments);
                };
              }());
            } }, { key: "setDailyLang", value: function(e4) {
              return rt(), this.sendMessageToCallMachine({ action: "set-daily-lang", lang: e4 }), this;
            } }, { key: "getMeetingSession", value: (N3 = o2()(function* () {
              var e4 = this;
              if (this._callState !== I2)
                throw new Error("getMeetingSession() is only allowed when joined");
              return new Promise(function(t4) {
                e4.sendMessageToCallMachine({ action: "get-meeting-session" }, function(e5) {
                  delete e5.action, delete e5.callbackStamp, delete e5.callFrameId, t4(e5);
                });
              });
            }), function() {
              return N3.apply(this, arguments);
            }) }, { key: "meetingSessionState", value: function() {
              if (this._callState !== I2)
                throw new Error("meetingSessionState() is only available when joined");
              return this._meetingSessionState;
            } }, { key: "setMeetingSessionData", value: function(e4) {
              var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "replace";
              if (this._callState !== I2)
                throw new Error("setMeetingSessionData() is only available when joined");
              try {
                at(e4, t4);
              } catch (e5) {
                throw console.error(e5), e5;
              }
              try {
                this.sendMessageToCallMachine({ action: "set-session-data", data: e4, mergeStrategy: t4 });
              } catch (e5) {
                throw new Error("Error setting meeting session data: ".concat(e5));
              }
            } }, { key: "setUserName", value: function(e4, t4) {
              var n4 = this;
              return this.properties.userName = e4, new Promise(function(r4) {
                n4.sendMessageToCallMachine({ action: "set-user-name", name: null != e4 ? e4 : "", thisMeetingOnly: Y2() || !!t4 && !!t4.thisMeetingOnly }, function(e5) {
                  delete e5.action, delete e5.callbackStamp, r4(e5);
                });
              });
            } }, { key: "setUserData", value: (O3 = o2()(function* (e4) {
              var t4 = this;
              try {
                ot(e4);
              } catch (e5) {
                throw console.error(e5), e5;
              }
              return this.properties.userData = e4, new Promise(function(n4) {
                try {
                  t4.sendMessageToCallMachine({ action: "set-user-data", userData: e4 }, function(e5) {
                    delete e5.action, delete e5.callbackStamp, delete e5.callFrameId, n4(e5);
                  });
                } catch (e5) {
                  throw new Error("Error setting user data: ".concat(e5));
                }
              });
            }), function(e4) {
              return O3.apply(this, arguments);
            }) }, { key: "startCamera", value: function() {
              var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              if (!this._callObjectMode)
                throw new Error("startCamera() currently only supported in call object mode");
              if ([L2, I2].includes(this._callState))
                throw new Error("startCamera() not supported after joining a meeting: did you mean to use setLocalAudio() and/or setLocalVideo() instead?");
              return new Promise(function() {
                var n4 = o2()(function* (n5, r4) {
                  if (e4.needsLoad())
                    try {
                      yield e4.load(t4);
                    } catch (e5) {
                      r4(e5);
                    }
                  else
                    e4.validateProperties(t4);
                  e4.sendMessageToCallMachine({ action: "start-camera", properties: nt(e4.properties), preloadCache: nt(e4._preloadCache) }, function(e5) {
                    delete e5.action, delete e5.callbackStamp, n5(e5);
                  });
                });
                return function(e5, t5) {
                  return n4.apply(this, arguments);
                };
              }());
            } }, { key: "validateCustomTrack", value: function(e4, t4, n4) {
              if (n4 && n4.length > 50)
                throw new Error("Custom track `trackName` must not be more than 50 characters");
              if (t4 && "music" !== t4 && "speech" !== t4 && !(t4 instanceof Object))
                throw new Error("Custom track `mode` must be either `music` | `speech` | `DailyMicAudioModeSettings` or `undefined`");
              if (!!n4 && ["cam-audio", "cam-video", "screen-video", "screen-audio", "rmpAudio", "rmpVideo"].includes(n4))
                throw new Error("Custom track `trackName` must not match a track name already used by daily: cam-audio, cam-video, screen-video, screen-audio, rmpAudio, rmpVideo");
              if (!(e4 instanceof MediaStreamTrack))
                throw new Error("Custom tracks provided must be instances of MediaStreamTrack");
            } }, { key: "startCustomTrack", value: function() {
              var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { track, mode, trackName };
              if (rt(), this.validateCustomTrack(t4.track, t4.mode, t4.trackName), this._meetingState !== I2)
                throw new Error("startCustomTrack() is only allowed when joined");
              return new Promise(function(n4, r4) {
                window._dailyPreloadCache.customTrack = t4.track, t4.track = "daily-custom-track", e4.sendMessageToCallMachine({ action: "start-custom-track", properties: t4 }, function(e5) {
                  e5.error ? reject({ error: e5.error }) : n4(e5.mediaTag);
                });
              });
            } }, { key: "stopCustomTrack", value: function(e4) {
              var t4 = this;
              if (rt(), this._meetingState !== I2)
                throw new Error("stopCustomTrack() is only allowed when joined");
              return new Promise(function(n4, r4) {
                t4.sendMessageToCallMachine({ action: "stop-custom-track", mediaTag: e4 }, function(e5) {
                  n4(e5.mediaTag);
                });
              });
            } }, { key: "setCamera", value: function(e4) {
              var t4 = this;
              if (it(), this.needsLoad())
                throw new Error("Before you can invoke setCamera, first you need to invoke one of these methods: join, startCamera, or preAuth");
              return new Promise(function(n4, r4) {
                t4.sendMessageToCallMachine({ action: "set-camera", cameraDeviceId: e4 }, function(e5) {
                  n4({ device: e5.device });
                });
              });
            } }, { key: "setAudioDevice", value: (E3 = o2()(function* (e4) {
              return it(), this.nativeUtils().setAudioDevice(e4), { deviceId: yield this.nativeUtils().getAudioDevice() };
            }), function(e4) {
              return E3.apply(this, arguments);
            }) }, { key: "cycleCamera", value: function() {
              var e4 = this;
              return new Promise(function(t4, n4) {
                e4.sendMessageToCallMachine({ action: "cycle-camera" }, function(e5) {
                  t4({ device: e5.device });
                });
              });
            } }, { key: "cycleMic", value: function() {
              var e4 = this;
              return rt(), new Promise(function(t4, n4) {
                e4.sendMessageToCallMachine({ action: "cycle-mic" }, function(e5) {
                  t4({ device: e5.device });
                });
              });
            } }, { key: "getCameraFacingMode", value: function() {
              var e4 = this;
              return it(), new Promise(function(t4, n4) {
                e4.sendMessageToCallMachine({ action: "get-camera-facing-mode" }, function(e5) {
                  t4(e5.facingMode);
                });
              });
            } }, { key: "setInputDevices", value: function(e4) {
              var t4 = e4.audioDeviceId, n4 = e4.videoDeviceId, r4 = e4.audioSource, i3 = e4.videoSource;
              return console.warn("setInputDevices() is deprecated: instead use setInputDevicesAsync(), which returns a Promise"), this.setInputDevicesAsync({ audioDeviceId: t4, videoDeviceId: n4, audioSource: r4, videoSource: i3 }), this;
            } }, { key: "setInputDevicesAsync", value: (M3 = o2()(function* (e4) {
              var t4 = this, n4 = e4.audioDeviceId, r4 = e4.videoDeviceId, i3 = e4.audioSource, a4 = e4.videoSource;
              return rt(), void 0 !== i3 && (n4 = i3), void 0 !== a4 && (r4 = a4), n4 && (this._preloadCache.audioDeviceId = n4), r4 && (this._preloadCache.videoDeviceId = r4), this._callObjectMode && this.needsLoad() ? { camera: { deviceId: this._preloadCache.videoDeviceId }, mic: { deviceId: this._preloadCache.audioDeviceId }, speaker: { deviceId: this._preloadCache.outputDeviceId } } : (n4 instanceof MediaStreamTrack && (n4 = "daily-custom-track"), r4 instanceof MediaStreamTrack && (r4 = "daily-custom-track"), new Promise(function(e5) {
                t4.sendMessageToCallMachine({ action: "set-input-devices", audioDeviceId: n4, videoDeviceId: r4 }, function(n5) {
                  delete n5.action, delete n5.callbackStamp, n5.returnPreloadCache ? e5({ camera: { deviceId: t4._preloadCache.videoDeviceId }, mic: { deviceId: t4._preloadCache.audioDeviceId }, speaker: { deviceId: t4._preloadCache.outputDeviceId } }) : e5(n5);
                });
              }));
            }), function(e4) {
              return M3.apply(this, arguments);
            }) }, { key: "setOutputDevice", value: function(e4) {
              var t4 = e4.outputDeviceId;
              return console.warn("setOutputDevice() is deprecated: instead use setOutputDeviceAsync(), which returns a Promise"), this.setOutputDeviceAsync({ outputDeviceId: t4 }), this;
            } }, { key: "setOutputDeviceAsync", value: (k3 = o2()(function* (e4) {
              var t4 = this, n4 = e4.outputDeviceId;
              return rt(), n4 && (this._preloadCache.outputDeviceId = n4), this._callObjectMode && this.needsLoad() ? { camera: { deviceId: this._preloadCache.videoDeviceId }, mic: { deviceId: this._preloadCache.audioDeviceId }, speaker: { deviceId: this._preloadCache.outputDeviceId } } : new Promise(function(e5) {
                t4.sendMessageToCallMachine({ action: "set-output-device", outputDeviceId: n4 }, function(n5) {
                  delete n5.action, delete n5.callbackStamp, n5.returnPreloadCache ? e5({ camera: { deviceId: t4._preloadCache.videoDeviceId }, mic: { deviceId: t4._preloadCache.audioDeviceId }, speaker: { deviceId: t4._preloadCache.outputDeviceId } }) : e5(n5);
                });
              });
            }), function(e4) {
              return k3.apply(this, arguments);
            }) }, { key: "getInputDevices", value: (w3 = o2()(function* () {
              var e4 = this;
              return this._callObjectMode && this.needsLoad() ? { camera: { deviceId: this._preloadCache.videoDeviceId }, mic: { deviceId: this._preloadCache.audioDeviceId }, speaker: { deviceId: this._preloadCache.outputDeviceId } } : new Promise(function(t4, n4) {
                e4.sendMessageToCallMachine({ action: "get-input-devices" }, function(n5) {
                  delete n5.action, delete n5.callbackStamp, n5.returnPreloadCache ? t4({ camera: { deviceId: e4._preloadCache.videoDeviceId }, mic: { deviceId: e4._preloadCache.audioDeviceId }, speaker: { deviceId: e4._preloadCache.outputDeviceId } }) : t4(n5);
                });
              });
            }), function() {
              return w3.apply(this, arguments);
            }) }, { key: "nativeInCallAudioMode", value: function() {
              return it(), this._nativeInCallAudioMode;
            } }, { key: "setNativeInCallAudioMode", value: function(e4) {
              if (it(), [ze, Ge].includes(e4)) {
                if (e4 !== this._nativeInCallAudioMode)
                  return this._nativeInCallAudioMode = e4, !this.disableReactNativeAutoDeviceManagement("audio") && this._isCallPendingOrOngoing(this._callState, this._isPreparingToJoin) && this.nativeUtils().setAudioMode(this._nativeInCallAudioMode), this;
              } else
                console.error("invalid in-call audio mode specified: ", e4);
            } }, { key: "preAuth", value: (_2 = o2()(function* () {
              var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              if (!this._callObjectMode)
                throw new Error("preAuth() currently only supported in call object mode");
              if ([L2, I2].includes(this._callState))
                throw new Error("preAuth() not supported after joining a meeting");
              if (this.needsLoad() && (yield this.load(t4)), !t4.url)
                throw new Error("preAuth() requires at least a url to be provided");
              return this.validateProperties(t4), this.properties = Ue(Ue({}, this.properties), t4), new Promise(function(t5, n4) {
                e4.sendMessageToCallMachine({ action: "daily-method-preauth", properties: nt(e4.properties) }, function(r4) {
                  return r4.error ? n4(r4.error) : r4.access ? (e4._didPreAuth = true, void t5({ access: r4.access })) : n4(new Error("unknown error in preAuth()"));
                });
              });
            }), function() {
              return _2.apply(this, arguments);
            }) }, { key: "load", value: (y3 = o2()(function* (e4) {
              var t4 = this;
              if (this.needsLoad()) {
                if (e4 && (this.validateProperties(e4), this.properties = Ue(Ue({}, this.properties), e4)), !this._callObjectMode && !this.properties.url)
                  throw new Error("can't load iframe meeting because url property isn't set");
                this._updateCallState(j2);
                try {
                  this.emit("loading", { action: "loading" });
                } catch (e5) {
                  console.log("could not emit 'loading'", e5);
                }
                return this._callObjectMode ? new Promise(function(e5, n4) {
                  t4._callObjectLoader.cancel(), t4._callObjectLoader.load(t4._callFrameId, t4.properties.dailyConfig && t4.properties.dailyConfig.avoidEval, function(n5) {
                    t4._updateCallState("loaded"), n5 && t4.emit("loaded", { action: "loaded" }), e5();
                  }, function(e6, r4) {
                    t4.emit("load-attempt-failed", { action: "load-attempt-failed", errorMsg: e6 }), r4 || (t4._updateCallState(D2), t4.resetMeetingDependentVars(), t4.emit("error", { action: "error", errorMsg: e6 }), n4(e6));
                  });
                }) : (this._iframe.src = this.assembleMeetingUrl(), new Promise(function(e5, n4) {
                  t4._loadedCallback = function(r4) {
                    if (t4._callState !== D2) {
                      for (var i3 in t4._updateCallState("loaded"), (t4.properties.cssFile || t4.properties.cssText) && t4.loadCss(t4.properties), t4._inputEventsOn)
                        t4.sendMessageToCallMachine({ action: "register-input-handler", on: i3 });
                      e5();
                    } else
                      n4(r4);
                  };
                }));
              }
            }), function(e4) {
              return y3.apply(this, arguments);
            }) }, { key: "join", value: (g3 = o2()(function* () {
              var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n4 = false;
              if (this.needsLoad()) {
                this.updateIsPreparingToJoin(true);
                try {
                  yield this.load(t4);
                } catch (e5) {
                  return this.updateIsPreparingToJoin(false), Promise.reject(e5);
                }
              } else {
                if (n4 = !(!this.properties.cssFile && !this.properties.cssText), this._didPreAuth) {
                  if (t4.url && t4.url !== this.properties.url)
                    return console.error("url in join() is different than the one used in preAuth()"), this.updateIsPreparingToJoin(false), Promise.reject();
                  if (t4.token && t4.token !== this.properties.token)
                    return console.error("token in join() is different than the one used in preAuth()"), this.updateIsPreparingToJoin(false), Promise.reject();
                }
                if (t4.url && !this._callObjectMode && t4.url && t4.url !== this.properties.url)
                  return console.error("url in join() is different than the one used in load() (".concat(this.properties.url, " -> ").concat(t4.url, ")")), this.updateIsPreparingToJoin(false), Promise.reject();
                this.validateProperties(t4), this.properties = Ue(Ue({}, this.properties), t4);
              }
              if (void 0 !== t4.showLocalVideo && (this._callObjectMode ? console.error("showLocalVideo is not available in callObject mode") : this._showLocalVideo = !!t4.showLocalVideo), void 0 !== t4.showParticipantsBar && (this._callObjectMode ? console.error("showParticipantsBar is not available in callObject mode") : this._showParticipantsBar = !!t4.showParticipantsBar), this._callState === I2 || this._callState === L2)
                return console.warn("already joined meeting, call leave() before joining again"), void this.updateIsPreparingToJoin(false);
              this._updateCallState(L2, false);
              try {
                this.emit("joining-meeting", { action: "joining-meeting" });
              } catch (e5) {
                console.log("could not emit 'joining-meeting'", e5);
              }
              return this.sendMessageToCallMachine({ action: "join-meeting", properties: nt(this.properties), preloadCache: nt(this._preloadCache) }), new Promise(function(t5, r4) {
                e4._joinedCallback = function(i3, a4) {
                  if (e4._callState !== D2) {
                    if (e4._updateCallState(I2), i3)
                      for (var o3 in i3)
                        e4._callObjectMode && (Ne(i3[o3]), Re(i3[o3]), Be(i3[o3], e4._participants[o3])), e4._participants[o3] = Ue({}, i3[o3]), e4.toggleParticipantAudioBasedOnNativeAudioFocus();
                    n4 && e4.loadCss(e4.properties), t5(i3);
                  } else
                    r4(a4);
                };
              });
            }), function() {
              return g3.apply(this, arguments);
            }) }, { key: "leave", value: (m3 = o2()(function* () {
              var e4 = this;
              return new Promise(function(t4, n4) {
                if (e4._callObjectLoader && !e4._callObjectLoader.loaded) {
                  e4._callObjectLoader.cancel(), e4._updateCallState(x2), e4.resetMeetingDependentVars();
                  try {
                    e4.emit(x2, { action: x2 });
                  } catch (e5) {
                    console.log("could not emit 'left-meeting'", e5);
                  }
                  t4();
                } else
                  e4._callState === x2 || e4._callState === D2 ? t4() : (e4._resolveLeave = t4, e4.sendMessageToCallMachine({ action: "leave-meeting" }));
              });
            }), function() {
              return m3.apply(this, arguments);
            }) }, { key: "startScreenShare", value: function() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              rt(), e4.mediaStream && (this._preloadCache.screenMediaStream = e4.mediaStream, e4.mediaStream = "daily-custom-track"), this.sendMessageToCallMachine({ action: "local-screen-start", captureOptions: e4 });
            } }, { key: "stopScreenShare", value: function() {
              rt(), this.sendMessageToCallMachine({ action: "local-screen-stop" });
            } }, { key: "startRecording", value: function() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              this.sendMessageToCallMachine(Ue({ action: "local-recording-start" }, e4));
            } }, { key: "updateRecording", value: function(e4) {
              var t4 = e4.layout, n4 = void 0 === t4 ? { preset: "default" } : t4, r4 = e4.instanceId;
              this.sendMessageToCallMachine({ action: "daily-method-update-recording", layout: n4, instanceId: r4 });
            } }, { key: "stopRecording", value: function() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              this.sendMessageToCallMachine(Ue({ action: "local-recording-stop" }, e4));
            } }, { key: "startLiveStreaming", value: function() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              this.sendMessageToCallMachine(Ue({ action: "daily-method-start-live-streaming" }, e4));
            } }, { key: "updateLiveStreaming", value: function(e4) {
              var t4 = e4.layout, n4 = void 0 === t4 ? { preset: "default" } : t4, r4 = e4.instanceId;
              this.sendMessageToCallMachine({ action: "daily-method-update-live-streaming", layout: n4, instanceId: r4 });
            } }, { key: "addLiveStreamingEndpoints", value: function(e4) {
              var t4 = e4.endpoints, n4 = e4.instanceId;
              this.sendMessageToCallMachine({ action: "daily-method-update-live-streaming-endpoints", endpointsOp: B2, endpoints: t4, instanceId: n4 });
            } }, { key: "removeLiveStreamingEndpoints", value: function(e4) {
              var t4 = e4.endpoints, n4 = e4.instanceId;
              this.sendMessageToCallMachine({ action: "daily-method-update-live-streaming-endpoints", endpointsOp: V2, endpoints: t4, instanceId: n4 });
            } }, { key: "stopLiveStreaming", value: function() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              this.sendMessageToCallMachine(Ue({ action: "daily-method-stop-live-streaming" }, e4));
            } }, { key: "startRemoteMediaPlayer", value: (v3 = o2()(function* (e4) {
              var t4 = this, n4 = e4.url, r4 = e4.settings, i3 = void 0 === r4 ? { state: R2.PLAY } : r4;
              try {
                !function(e5) {
                  if ("string" != typeof e5)
                    throw new Error('url parameter must be "string" type');
                }(n4), ft(i3), function(e5) {
                  for (var t5 in e5)
                    if (!Qe.includes(t5))
                      throw new Error("Invalid key ".concat(t5, ", valid keys are: ").concat(Qe));
                  if (e5.simulcastEncodings) {
                    if (!(e5.simulcastEncodings instanceof Array))
                      throw new Error('simulcastEncodings must be "Array"');
                    if (!pt(e5.simulcastEncodings.length, 0, 3))
                      throw new Error('"simulcastEncodings" not in range. valid range 1 to 3 layers');
                    e5.simulcastEncodings.every(function(e6) {
                      for (var t6 in e6) {
                        if (!He.hasOwnProperty(t6))
                          throw new Error("Invalid key ".concat(t6, ", valid keys are:") + Object.keys(He));
                        if ("number" != typeof e6[t6])
                          throw new Error("simulcastEncodings[].".concat(t6, ' must be "number"'));
                        var n5 = He[t6], r5 = n5.min, i4 = n5.max;
                        if (!pt(e6[t6], r5, i4))
                          throw new Error("simulcastEncodings[].".concat(t6, " value not in range. valid range:        ").concat(r5, " to ").concat(i4));
                      }
                      if (!e6.hasOwnProperty("maxBitrate"))
                        throw new Error("simulcastEncodings[].maxBitrate is not specified");
                    });
                  }
                }(i3);
              } catch (e5) {
                throw console.error("invalid argument Error: ".concat(e5)), console.error('startRemoteMediaPlayer arguments must be of the form: \n  { url: "playback url", \n  settings?: \n  {state: "play"|"pause", simulcastEncodings?: [{}] } }'), e5;
              }
              return new Promise(function() {
                var e5 = o2()(function* (e6, r5) {
                  t4.sendMessageToCallMachine({ action: "daily-method-start-remote-media-player", url: n4, settings: i3 }, function(t5) {
                    t5.error ? r5({ error: t5.error, errorMsg: t5.errorMsg }) : e6({ session_id: t5.session_id, remoteMediaPlayerState: { state: t5.state, settings: t5.settings } });
                  });
                });
                return function(t5, n5) {
                  return e5.apply(this, arguments);
                };
              }());
            }), function(e4) {
              return v3.apply(this, arguments);
            }) }, { key: "stopRemoteMediaPlayer", value: (p3 = o2()(function* (e4) {
              var t4 = this;
              if ("string" != typeof e4)
                throw new Error(" remotePlayerID must be of type string");
              return new Promise(function() {
                var n4 = o2()(function* (n5, r4) {
                  t4.sendMessageToCallMachine({ action: "daily-method-stop-remote-media-player", session_id: e4 }, function(e5) {
                    e5.error ? r4({ error: e5.error, errorMsg: e5.errorMsg }) : n5();
                  });
                });
                return function(e5, t5) {
                  return n4.apply(this, arguments);
                };
              }());
            }), function(e4) {
              return p3.apply(this, arguments);
            }) }, { key: "updateRemoteMediaPlayer", value: (d3 = o2()(function* (e4) {
              var t4 = this, n4 = e4.session_id, r4 = e4.settings;
              try {
                ft(r4);
              } catch (e5) {
                throw console.error("invalid argument Error: ".concat(e5)), console.error('updateRemoteMediaPlayer arguments must be of the form: \n  session_id: "participant session", \n  { settings?: {state: "play"|"pause"} }'), e5;
              }
              return new Promise(function() {
                var e5 = o2()(function* (e6, i3) {
                  t4.sendMessageToCallMachine({ action: "daily-method-update-remote-media-player", session_id: n4, settings: r4 }, function(t5) {
                    t5.error ? i3({ error: t5.error, errorMsg: t5.errorMsg }) : e6({ session_id: t5.session_id, remoteMediaPlayerState: { state: t5.state, settings: t5.settings } });
                  });
                });
                return function(t5, n5) {
                  return e5.apply(this, arguments);
                };
              }());
            }), function(e4) {
              return d3.apply(this, arguments);
            }) }, { key: "startTranscription", value: function(e4) {
              this.sendMessageToCallMachine(Ue({ action: "daily-method-start-transcription" }, e4));
            } }, { key: "stopTranscription", value: function() {
              this.sendMessageToCallMachine({ action: "daily-method-stop-transcription" });
            } }, { key: "getNetworkStats", value: function() {
              var e4 = this;
              if (this._callState !== I2) {
                return { stats: { latest: {} } };
              }
              return new Promise(function(t4, n4) {
                e4.sendMessageToCallMachine({ action: "get-calc-stats" }, function(n5) {
                  t4(Ue({ stats: n5.stats }, e4._network));
                });
              });
            } }, { key: "getActiveSpeaker", value: function() {
              return rt(), this._activeSpeaker;
            } }, { key: "setActiveSpeakerMode", value: function(e4) {
              return rt(), this.sendMessageToCallMachine({ action: "set-active-speaker-mode", enabled: e4 }), this;
            } }, { key: "activeSpeakerMode", value: function() {
              return rt(), this._activeSpeakerMode;
            } }, { key: "subscribeToTracksAutomatically", value: function() {
              return this._preloadCache.subscribeToTracksAutomatically;
            } }, { key: "setSubscribeToTracksAutomatically", value: function(e4) {
              if (this._callState !== I2)
                throw new Error("setSubscribeToTracksAutomatically() is only allowed when joined");
              return this._preloadCache.subscribeToTracksAutomatically = e4, this.sendMessageToCallMachine({ action: "daily-method-subscribe-to-tracks-automatically", enabled: e4 }), this;
            } }, { key: "enumerateDevices", value: (u3 = o2()(function* () {
              var e4 = this;
              return this._callObjectMode ? { devices: (yield navigator.mediaDevices.enumerateDevices()).map(function(e5) {
                return JSON.parse(JSON.stringify(e5));
              }) } : new Promise(function(t4, n4) {
                e4.sendMessageToCallMachine({ action: "enumerate-devices" }, function(e5) {
                  t4({ devices: e5.devices });
                });
              });
            }), function() {
              return u3.apply(this, arguments);
            }) }, { key: "sendAppMessage", value: function(e4) {
              var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "*";
              if (JSON.stringify(e4).length > 4096)
                throw new Error("Message data too large. Max size is 4096");
              return this.sendMessageToCallMachine({ action: "app-msg", data: e4, to: t4 }), this;
            } }, { key: "addFakeParticipant", value: function(e4) {
              return rt(), this.sendMessageToCallMachine(Ue({ action: "add-fake-participant" }, e4)), this;
            } }, { key: "setShowNamesMode", value: function(e4) {
              return rt(), e4 && "always" !== e4 && "never" !== e4 ? (console.error('setShowNamesMode argument should be "always", "never", or false'), this) : (this.sendMessageToCallMachine({ action: "set-show-names", mode: e4 }), this);
            } }, { key: "setShowLocalVideo", value: function() {
              var e4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
              return rt(), "boolean" != typeof e4 ? (console.error("setShowLocalVideo only accepts a boolean value"), this) : this._callObjectMode ? (console.error("setShowLocalVideo is not available in callObject mode"), this) : this._callState !== I2 ? (console.error("the meeting must be joined before calling setShowLocalVideo"), this) : (this.sendMessageToCallMachine({ action: "set-show-local-video", show: e4 }), this._showLocalVideo = e4, this);
            } }, { key: "showLocalVideo", value: function() {
              return rt(), this._callObjectMode ? (console.error("showLocalVideo is not available in callObject mode"), this) : this._showLocalVideo;
            } }, { key: "setShowParticipantsBar", value: function() {
              var e4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
              return rt(), "boolean" != typeof e4 ? (console.error("setShowParticipantsBar only accepts a boolean value"), this) : this._callObjectMode ? (console.error("setShowParticipantsBar is not available in callObject mode"), this) : this._callState !== I2 ? (console.error("the meeting must be joined before calling setShowParticipantsBar"), this) : (this.sendMessageToCallMachine({ action: "set-show-participants-bar", show: e4 }), this._showParticipantsBar = e4, this);
            } }, { key: "showParticipantsBar", value: function() {
              return rt(), this._callObjectMode ? (console.error("showParticipantsBar is not available in callObject mode"), this) : this._showParticipantsBar;
            } }, { key: "customTrayButtons", value: function() {
              return rt(), this._callObjectMode ? (console.error("customTrayButtons is not available in callObject mode"), this) : this._customTrayButtons;
            } }, { key: "updateCustomTrayButtons", value: function(e4) {
              return rt(), this._callObjectMode ? (console.error("updateCustomTrayButtons is not available in callObject mode"), this) : this._callState !== I2 ? (console.error("the meeting must be joined before calling updateCustomTrayButtons"), this) : dt(e4) ? (this.sendMessageToCallMachine({ action: "update-custom-tray-buttons", btns: e4 }), this._customTrayButtons = e4, this) : (console.error("updateCustomTrayButtons only accepts a dictionary of the type ".concat(JSON.stringify(Ze))), this);
            } }, { key: "theme", value: function() {
              return this._callObjectMode ? (console.error("theme is not available in callObject mode"), this) : this.properties.theme;
            } }, { key: "setTheme", value: function(e4) {
              var t4 = this;
              return new Promise(function(n4, r4) {
                if (t4._callObjectMode)
                  r4("setTheme is not available in callObject mode");
                else
                  try {
                    t4.validateProperties({ theme: e4 }), t4.properties.theme = Ue({}, e4), t4.sendMessageToCallMachine({ action: "set-theme", theme: t4.properties.theme });
                    try {
                      t4.emit("theme-updated", { action: "theme-updated", theme: t4.properties.theme });
                    } catch (e5) {
                      console.log("could not emit 'theme-updated'", e5);
                    }
                    n4(t4.properties.theme);
                  } catch (e5) {
                    r4(e5);
                  }
              });
            } }, { key: "detectAllFaces", value: function() {
              var e4 = this;
              return rt(), new Promise(function(t4, n4) {
                e4.sendMessageToCallMachine({ action: "detect-all-faces" }, function(e5) {
                  delete e5.action, delete e5.callbackStamp, t4(e5);
                });
              });
            } }, { key: "requestFullscreen", value: (s3 = o2()(function* () {
              if (rt(), this._iframe && !document.fullscreenElement && z2())
                try {
                  (yield this._iframe.requestFullscreen) ? this._iframe.requestFullscreen() : this._iframe.webkitRequestFullscreen();
                } catch (e4) {
                  console.log("could not make video call fullscreen", e4);
                }
            }), function() {
              return s3.apply(this, arguments);
            }) }, { key: "exitFullscreen", value: function() {
              rt(), document.fullscreenElement ? document.exitFullscreen() : document.webkitFullscreenElement && document.webkitExitFullscreen();
            } }, { key: "room", value: (a3 = o2()(function* () {
              var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n4 = t4.includeRoomConfigDefaults, r4 = void 0 === n4 || n4;
              return "unknown" === this._accessState.access || this.needsLoad() ? this.properties.url ? { roomUrlPendingJoin: this.properties.url } : null : new Promise(function(t5, n5) {
                e4.sendMessageToCallMachine({ action: "lib-room-info", includeRoomConfigDefaults: r4 }, function(e5) {
                  delete e5.action, delete e5.callbackStamp, t5(e5);
                });
              });
            }), function() {
              return a3.apply(this, arguments);
            }) }, { key: "geo", value: (r3 = o2()(function* () {
              return new Promise(function() {
                var e4 = o2()(function* (e5, t4) {
                  try {
                    var n4 = yield fetch("https://gs.daily.co/_ks_/x-swsl/:");
                    e5({ current: (yield n4.json()).geo });
                  } catch (t5) {
                    console.error("geo lookup failed", t5), e5({ current: "" });
                  }
                });
                return function(t4, n4) {
                  return e4.apply(this, arguments);
                };
              }());
            }), function() {
              return r3.apply(this, arguments);
            }) }, { key: "setNetworkTopology", value: (n3 = o2()(function* (e4) {
              var t4 = this;
              return rt(), new Promise(function() {
                var n4 = o2()(function* (n5, r4) {
                  t4.sendMessageToCallMachine({ action: "set-network-topology", opts: e4 }, function(e5) {
                    e5.error ? r4({ error: e5.error }) : n5({ workerId: e5.workerId });
                  });
                });
                return function(e5, t5) {
                  return n4.apply(this, arguments);
                };
              }());
            }), function(e4) {
              return n3.apply(this, arguments);
            }) }, { key: "getNetworkTopology", value: (t3 = o2()(function* () {
              var e4 = this;
              return new Promise(function() {
                var t4 = o2()(function* (t5, n4) {
                  e4.sendMessageToCallMachine({ action: "get-network-topology" }, function(e5) {
                    e5.error ? n4({ error: e5.error }) : t5({ topology: e5.topology });
                  });
                });
                return function(e5, n4) {
                  return t4.apply(this, arguments);
                };
              }());
            }), function() {
              return t3.apply(this, arguments);
            }) }, { key: "setPlayNewParticipantSound", value: function(e4) {
              if (rt(), "number" != typeof e4 && true !== e4 && false !== e4)
                throw new Error("argument to setShouldPlayNewParticipantSound should be true, false, or a number, but is ".concat(e4));
              this.sendMessageToCallMachine({ action: "daily-method-set-play-ding", arg: e4 });
            } }, { key: "on", value: function(e4, t4) {
              return this._inputEventsOn[e4] = {}, this.sendMessageToCallMachine({ action: "register-input-handler", on: e4 }), A2.a.prototype.on.call(this, e4, t4);
            } }, { key: "once", value: function(e4, t4) {
              return this._inputEventsOn[e4] = {}, this.sendMessageToCallMachine({ action: "register-input-handler", on: e4 }), A2.a.prototype.once.call(this, e4, t4);
            } }, { key: "off", value: function(e4, t4) {
              return delete this._inputEventsOn[e4], this.sendMessageToCallMachine({ action: "register-input-handler", off: e4 }), A2.a.prototype.off.call(this, e4, t4);
            } }, { key: "validateProperties", value: function(e4) {
              for (var t4 in e4) {
                if (!Xe[t4])
                  throw new Error("unrecognized property '".concat(t4, "'"));
                if (Xe[t4].validate && !Xe[t4].validate(e4[t4], this))
                  throw new Error("property '".concat(t4, "': ").concat(Xe[t4].help));
              }
            } }, { key: "assembleMeetingUrl", value: function() {
              var e4 = Ue(Ue({}, this.properties), {}, { emb: this._callFrameId, embHref: encodeURIComponent(window.location.href) }), t4 = e4.url.match(/\?/) ? "&" : "?";
              return e4.url + t4 + Object.keys(Xe).filter(function(t5) {
                return Xe[t5].queryString && void 0 !== e4[t5];
              }).map(function(t5) {
                return "".concat(Xe[t5].queryString, "=").concat(e4[t5]);
              }).join("&");
            } }, { key: "needsLoad", value: function() {
              return [P2, j2, x2, D2].includes(this._callState);
            } }, { key: "sendMessageToCallMachine", value: function(e4, t4) {
              this._messageChannel.sendMessageToCallMachine(e4, t4, this._iframe, this._callFrameId);
            } }, { key: "forwardPackagedMessageToCallMachine", value: function(e4) {
              this._messageChannel.forwardPackagedMessageToCallMachine(e4, this._iframe, this._callFrameId);
            } }, { key: "addListenerForPackagedMessagesFromCallMachine", value: function(e4) {
              return this._messageChannel.addListenerForPackagedMessagesFromCallMachine(e4, this._callFrameId);
            } }, { key: "removeListenerForPackagedMessagesFromCallMachine", value: function(e4) {
              this._messageChannel.removeListenerForPackagedMessagesFromCallMachine(e4);
            } }, { key: "handleMessageFromCallMachine", value: function(e4) {
              switch (e4.action) {
                case "iframe-ready-for-launch-config":
                  this.sendMessageToCallMachine(Ue({ action: "iframe-launch-config" }, this.properties));
                  break;
                case "loaded":
                  this._loadedCallback && (this._loadedCallback(), this._loadedCallback = null);
                  try {
                    this.emit(e4.action, e4);
                  } catch (t5) {
                    console.log("could not emit", e4, t5);
                  }
                  break;
                case "joined-meeting":
                  this._joinedCallback && (this._joinedCallback(e4.participants), this._joinedCallback = null);
                  try {
                    this.emit(e4.action, e4);
                  } catch (t5) {
                    console.log("could not emit", e4, t5);
                  }
                  break;
                case "participant-joined":
                case "participant-updated":
                  if (this._callState === x2)
                    return;
                  if (e4.participant && e4.participant.session_id) {
                    var t4 = e4.participant.local ? "local" : e4.participant.session_id;
                    this._callObjectMode && (Ne(e4.participant), Re(e4.participant), Be(e4.participant, this._participants[t4]));
                    try {
                      this.maybeEventTrackStopped(this._participants[t4], e4.participant, "audioTrack"), this.maybeEventTrackStopped(this._participants[t4], e4.participant, "videoTrack"), this.maybeEventTrackStopped(this._participants[t4], e4.participant, "screenVideoTrack"), this.maybeEventTrackStopped(this._participants[t4], e4.participant, "screenAudioTrack"), this.maybeEventTrackStarted(this._participants[t4], e4.participant, "audioTrack"), this.maybeEventTrackStarted(this._participants[t4], e4.participant, "videoTrack"), this.maybeEventTrackStarted(this._participants[t4], e4.participant, "screenVideoTrack"), this.maybeEventTrackStarted(this._participants[t4], e4.participant, "screenAudioTrack"), this.maybeEventTrackStoppedForCustomTracks(this._participants[t4], e4.participant), this.maybeEventTrackStartedForCustomTracks(this._participants[t4], e4.participant), this.maybeEventRecordingStopped(this._participants[t4], e4.participant), this.maybeEventRecordingStarted(this._participants[t4], e4.participant);
                    } catch (e5) {
                      console.error("track events error", e5);
                    }
                    if (!this.compareEqualForParticipantUpdateEvent(e4.participant, this._participants[t4])) {
                      this._participants[t4] = Ue({}, e4.participant), this.toggleParticipantAudioBasedOnNativeAudioFocus();
                      try {
                        this.emit(e4.action, e4);
                      } catch (t5) {
                        console.log("could not emit", e4, t5);
                      }
                    }
                  }
                  break;
                case "participant-left":
                  if (e4.participant && e4.participant.session_id) {
                    var n4 = this._participants[e4.participant.session_id];
                    n4 && (this.maybeEventTrackStopped(n4, null, "audioTrack"), this.maybeEventTrackStopped(n4, null, "videoTrack"), this.maybeEventTrackStopped(n4, null, "screenVideoTrack"), this.maybeEventTrackStopped(n4, null, "screenAudioTrack"), this.maybeEventTrackStoppedForCustomTracks(n4, null)), delete this._participants[e4.participant.session_id];
                    try {
                      this.emit(e4.action, e4);
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  }
                  break;
                case "participant-counts-updated":
                  if (!Object(T2.deepEqual)(this._participantCounts, e4.participantCounts)) {
                    this._participantCounts = e4.participantCounts;
                    try {
                      this.emit(e4.action, e4);
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  }
                  break;
                case "access-state-updated":
                  var r4 = { access: e4.access };
                  if (e4.awaitingAccess && (r4.awaitingAccess = e4.awaitingAccess), !Object(T2.deepEqual)(this._accessState, r4)) {
                    this._accessState = r4;
                    try {
                      this.emit(e4.action, e4);
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  }
                  break;
                case "meeting-session-updated":
                  if (e4.meetingSession)
                    try {
                      delete e4.callFrameId, this.emit(e4.action, e4);
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  break;
                case "error":
                  this._iframe && !e4.preserveIframe && (this._iframe.src = ""), this._updateCallState(D2), this.resetMeetingDependentVars(), this._loadedCallback && (this._loadedCallback(e4.errorMsg), this._loadedCallback = null), this._joinedCallback && (this._joinedCallback(null, e4.errorMsg), this._joinedCallback = null);
                  try {
                    e4.preserveIframe;
                    var a4 = i2()(e4, ["preserveIframe"]);
                    this.emit(e4.action, a4);
                  } catch (t5) {
                    console.log("could not emit", e4, t5);
                  }
                  break;
                case "left-meeting":
                  this._meetingState !== D2 && this._updateCallState(x2), this.resetMeetingDependentVars(), this._resolveLeave && (this._resolveLeave(), this._resolveLeave = null);
                  try {
                    this.emit(e4.action, e4);
                  } catch (t5) {
                    console.log("could not emit", e4, t5);
                  }
                  break;
                case "input-event":
                  var o3 = this._participants[e4.session_id];
                  o3 || (o3 = e4.session_id === this._participants.local.session_id ? this._participants.local : {});
                  try {
                    this.emit(e4.event.type, { action: e4.event.type, event: e4.event, participant: Ue({}, o3) });
                  } catch (t5) {
                    console.log("could not emit", e4, t5);
                  }
                  break;
                case "selected-devices-updated":
                  if (e4.devices)
                    try {
                      this.emit(e4.action, e4);
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  break;
                case "network-quality-change":
                  var s4 = e4.threshold, c4 = e4.quality;
                  if (s4 !== this._network.threshold || c4 !== this._network.quality) {
                    this._network.quality = c4, this._network.threshold = s4;
                    try {
                      this.emit(e4.action, e4);
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  }
                  break;
                case "active-speaker-change":
                  var u4 = e4.activeSpeaker;
                  if (this._activeSpeaker.peerId !== u4.peerId) {
                    this._activeSpeaker.peerId = u4.peerId;
                    try {
                      this.emit(e4.action, { action: e4.action, activeSpeaker: this._activeSpeaker });
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  }
                  break;
                case "show-local-video-changed":
                  if (this._callObjectMode)
                    return;
                  var l3 = e4.show;
                  this._showLocalVideo = l3;
                  try {
                    this.emit(e4.action, { action: e4.action, show: l3 });
                  } catch (t5) {
                    console.log("could not emit", e4, t5);
                  }
                  break;
                case "active-speaker-mode-change":
                  var d4 = e4.enabled;
                  if (this._activeSpeakerMode !== d4) {
                    this._activeSpeakerMode = d4;
                    try {
                      this.emit(e4.action, { action: e4.action, enabled: this._activeSpeakerMode });
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  }
                  break;
                case "waiting-participant-added":
                case "waiting-participant-updated":
                case "waiting-participant-removed":
                  this._waitingParticipants = e4.allWaitingParticipants;
                  try {
                    this.emit(e4.action, { action: e4.action, participant: e4.participant });
                  } catch (t5) {
                    console.log("could not emit", e4, t5);
                  }
                  break;
                case "receive-settings-updated":
                  if (!Object(T2.deepEqual)(this._receiveSettings, e4.receiveSettings)) {
                    this._receiveSettings = e4.receiveSettings;
                    try {
                      this.emit(e4.action, { action: e4.action, receiveSettings: e4.receiveSettings });
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  }
                  break;
                case "input-settings-updated":
                  if (!Object(T2.deepEqual)(this._inputSettings, e4.inputSettings)) {
                    this._inputSettings = e4.inputSettings;
                    try {
                      this.emit(e4.action, { action: e4.action, inputSettings: e4.inputSettings });
                    } catch (t5) {
                      console.log("could not emit", e4, t5);
                    }
                  }
                  break;
                case "remote-media-player-started":
                  var f3 = e4.session_id;
                  this._rmpPlayerState[f3] = e4.playerState, this.emitDailyJSEvent(e4);
                  break;
                case "remote-media-player-stopped":
                  delete this._rmpPlayerState[e4.session_id], this.emitDailyJSEvent(e4);
                  break;
                case "remote-media-player-updated":
                  var p4 = e4.session_id, h3 = this._rmpPlayerState[p4];
                  h3 && this.compareEqualForRMPUpdateEvent(h3, e4.remoteMediaPlayerState) || (this._rmpPlayerState[p4] = e4.remoteMediaPlayerState, this.emitDailyJSEvent(e4));
                  break;
                case "custom-button-click":
                  this.emitDailyJSEvent(e4);
                  break;
                case "meeting-session-state-updated":
                  this._meetingSessionState = e4.meetingSessionState, this.emitDailyJSEvent(e4);
                  break;
                case "recording-started":
                case "recording-stopped":
                case "recording-stats":
                case "recording-error":
                case "recording-upload-completed":
                case "transcription-started":
                case "transcription-stopped":
                case "transcription-error":
                case "started-camera":
                case "camera-error":
                case "app-message":
                case "local-screen-share-started":
                case "local-screen-share-stopped":
                case "network-connection":
                case "recording-data":
                case "live-streaming-started":
                case "live-streaming-stopped":
                case "live-streaming-error":
                case "nonfatal-error":
                case "lang-updated":
                  try {
                    this.emit(e4.action, e4);
                  } catch (t5) {
                    console.log("could not emit", e4, t5);
                  }
                  break;
                case "request-fullscreen":
                  this.requestFullscreen();
                  break;
                case "request-exit-fullscreen":
                  this.exitFullscreen();
              }
            } }, { key: "maybeEventRecordingStopped", value: function(e4, t4) {
              var n4 = "record";
              if (e4 && !t4.local && false === t4[n4] && e4[n4] !== t4[n4])
                try {
                  this.emit("recording-stopped", { action: "recording-stopped" });
                } catch (e5) {
                  console.log("could not emit", e5);
                }
            } }, { key: "maybeEventRecordingStarted", value: function(e4, t4) {
              var n4 = "record";
              if (e4 && !t4.local && true === t4[n4] && e4[n4] !== t4[n4])
                try {
                  this.emit("recording-started", { action: "recording-started" });
                } catch (e5) {
                  console.log("could not emit", e5);
                }
            } }, { key: "maybeEventTrackStopped", value: function(e4, t4, n4) {
              if (e4 && (e4[n4] && "ended" === e4[n4].readyState || e4[n4] && (!t4 || !t4[n4]) || e4[n4] && e4[n4].id !== t4[n4].id))
                try {
                  this.emit("track-stopped", { action: "track-stopped", track: e4[n4], participant: t4 });
                } catch (e5) {
                  console.log("could not emit", e5);
                }
            } }, { key: "maybeEventCustomTrackStopped", value: function(e4, t4, n4, r4) {
              if (e4 && (e4 && "ended" === e4.readyState || e4 && !t4 || e4 && e4.id !== t4.id))
                try {
                  this.emit("track-stopped", { action: "track-stopped", track: e4, participant: r4 });
                } catch (e5) {
                  console.log("maybeEventCustomTrackStopped: could not emit", e5);
                }
            } }, { key: "maybeEventCustomTrackStarted", value: function(e4, t4, n4) {
              if (t4 && !e4 || t4 && "ended" === e4.readyState || t4 && t4.id !== e4.id)
                try {
                  this.emit("track-started", { action: "track-started", track: t4, participant: n4 });
                } catch (e5) {
                  console.log("maybeEventCustomTrackStarted: could not emit", e5);
                }
            } }, { key: "maybeEventTrackStarted", value: function(e4, t4, n4) {
              if (t4[n4] && (!e4 || !e4[n4]) || t4[n4] && "ended" === e4[n4].readyState || t4[n4] && t4[n4].id !== e4[n4].id)
                try {
                  this.emit("track-started", { action: "track-started", track: t4[n4], participant: t4 });
                } catch (e5) {
                  console.log("could not emit", e5);
                }
            } }, { key: "maybeEventTrackStoppedForCustomTracks", value: function(e4, t4) {
              if (e4)
                for (var n4 in e4.tracks)
                  Fe(n4) || this.maybeEventCustomTrackStopped(e4.tracks[n4].track, t4 && t4.tracks[n4] ? t4.tracks[n4].track : null, e4, t4);
            } }, { key: "maybeEventTrackStartedForCustomTracks", value: function(e4, t4) {
              if (t4)
                for (var n4 in t4.tracks)
                  Fe(n4) || this.maybeEventCustomTrackStarted(e4 && e4.tracks[n4] ? e4.tracks[n4].track : null, t4.tracks[n4].track, t4);
            } }, { key: "compareEqualForRMPUpdateEvent", value: function(e4, t4) {
              var n4, r4;
              return e4.state === t4.state && (null === (n4 = e4.settings) || void 0 === n4 ? void 0 : n4.volume) === (null === (r4 = t4.settings) || void 0 === r4 ? void 0 : r4.volume);
            } }, { key: "emitDailyJSEvent", value: function(e4) {
              try {
                this.emit(e4.action, e4);
              } catch (t4) {
                console.log("could not emit", e4, t4);
              }
            } }, { key: "compareEqualForParticipantUpdateEvent", value: function(e4, t4) {
              return !!Object(T2.deepEqual)(e4, t4) && ((!e4.videoTrack || !t4.videoTrack || e4.videoTrack.id === t4.videoTrack.id && e4.videoTrack.muted === t4.videoTrack.muted && e4.videoTrack.enabled === t4.videoTrack.enabled) && (!e4.audioTrack || !t4.audioTrack || e4.audioTrack.id === t4.audioTrack.id && e4.audioTrack.muted === t4.audioTrack.muted && e4.audioTrack.enabled === t4.audioTrack.enabled));
            } }, { key: "nativeUtils", value: function() {
              return Y2() ? "undefined" == typeof DailyNativeUtils ? (console.warn("in React Native, DailyNativeUtils is expected to be available"), null) : DailyNativeUtils : null;
            } }, { key: "updateIsPreparingToJoin", value: function(e4) {
              this._updateCallState(this._callState, e4);
            } }, { key: "_updateCallState", value: function(e4) {
              var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._isPreparingToJoin;
              if (e4 !== this._callState || t4 !== this._isPreparingToJoin) {
                var n4 = this._callState, r4 = this._isPreparingToJoin;
                this._callState = e4, this._isPreparingToJoin = t4;
                var i3 = this._isCallPendingOrOngoing(n4, r4), a4 = this._isCallPendingOrOngoing(this._callState, this._isPreparingToJoin);
                i3 !== a4 && (this.updateKeepDeviceAwake(a4), this.updateDeviceAudioMode(a4), this.updateShowAndroidOngoingMeetingNotification(a4), this.updateNoOpRecordingEnsuringBackgroundContinuity(a4));
              }
            } }, { key: "resetMeetingDependentVars", value: function() {
              this._participants = {}, this._participantCounts = Ke, this._waitingParticipants = {}, this._activeSpeaker = {}, this._activeSpeakerMode = false, this._didPreAuth = false, this._accessState = { access: "unknown" }, this._meetingSessionState = qe, this._receiveSettings = {}, this._inputSettings = {}, this._preloadCache;
            } }, { key: "updateKeepDeviceAwake", value: function(e4) {
              Y2() && this.nativeUtils().setKeepDeviceAwake(e4, this._callFrameId);
            } }, { key: "updateDeviceAudioMode", value: function(e4) {
              if (Y2() && !this.disableReactNativeAutoDeviceManagement("audio")) {
                var t4 = e4 ? this._nativeInCallAudioMode : "idle";
                this.nativeUtils().setAudioMode(t4);
              }
            } }, { key: "updateShowAndroidOngoingMeetingNotification", value: function(e4) {
              if (Y2() && this.nativeUtils().setShowOngoingMeetingNotification) {
                var t4, n4, r4, i3;
                if (this.properties.reactNativeConfig && this.properties.reactNativeConfig.androidInCallNotification) {
                  var a4 = this.properties.reactNativeConfig.androidInCallNotification;
                  t4 = a4.title, n4 = a4.subtitle, r4 = a4.iconName, i3 = a4.disableForCustomOverride;
                }
                i3 && (e4 = false), this.nativeUtils().setShowOngoingMeetingNotification(e4, t4, n4, r4, this._callFrameId);
              }
            } }, { key: "updateNoOpRecordingEnsuringBackgroundContinuity", value: function(e4) {
              Y2() && this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity && this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity(e4);
            } }, { key: "_isCallPendingOrOngoing", value: function(e4, t4) {
              return [L2, I2].includes(e4) || t4;
            } }, { key: "toggleParticipantAudioBasedOnNativeAudioFocus", value: function() {
              if (Y2()) {
                var e4 = store.getState();
                for (var t4 in e4.streams) {
                  var n4 = e4.streams[t4];
                  n4 && n4.pendingTrack && "audio" === n4.pendingTrack.kind && (n4.pendingTrack.enabled = this._hasNativeAudioFocus);
                }
              }
            } }, { key: "disableReactNativeAutoDeviceManagement", value: function(e4) {
              return this.properties.reactNativeConfig && this.properties.reactNativeConfig.disableAutoDeviceManagement && this.properties.reactNativeConfig.disableAutoDeviceManagement[e4];
            } }, { key: "absoluteUrl", value: function(e4) {
              if (void 0 !== e4) {
                var t4 = document.createElement("a");
                return t4.href = e4, t4.href;
              }
            } }, { key: "sayHello", value: function() {
              var e4 = "hello, world.";
              return console.log(e4), e4;
            } }]), te2;
          }(A2.a);
          function nt(e3) {
            var t3 = {};
            for (var n3 in e3)
              e3[n3] instanceof MediaStreamTrack ? t3[n3] = "daily-custom-track" : "dailyConfig" === n3 ? (e3[n3].modifyLocalSdpHook && (window._dailyConfig && (window._dailyConfig.modifyLocalSdpHook = e3[n3].modifyLocalSdpHook), delete e3[n3].modifyLocalSdpHook), e3[n3].modifyRemoteSdpHook && (window._dailyConfig && (window._dailyConfig.modifyRemoteSdpHook = e3[n3].modifyRemoteSdpHook), delete e3[n3].modifyRemoteSdpHook), t3[n3] = e3[n3]) : t3[n3] = e3[n3];
            return t3;
          }
          function rt() {
            if (Y2())
              throw new Error("This daily-js method is not currently supported in React Native");
          }
          function it() {
            if (!Y2())
              throw new Error("This daily-js method is only supported in React Native");
          }
          function at(e3, t3) {
            return new me({ data: e3, mergeStrategy: t3 }), true;
          }
          function ot(e3) {
            if (void 0 === e3)
              return true;
            var t3;
            if ("string" == typeof e3)
              t3 = e3;
            else
              try {
                t3 = JSON.stringify(e3), Object(T2.deepEqual)(JSON.parse(t3), e3) || console.warn("The userData provided will be modified when serialized.");
              } catch (e4) {
                throw Error("userData must be serializable to JSON: ".concat(e4));
              }
            if (t3.length > 4096)
              throw Error("userData is too large (".concat(t3.length, " characters). Maximum size suppported is ").concat(4096, "."));
            return true;
          }
          function st(e3, t3) {
            for (var n3 = t3.allowAllParticipantsKey, r3 = function(e4) {
              var t4 = ["local"];
              return n3 || t4.push("*"), e4 && !t4.includes(e4);
            }, i3 = function(e4) {
              return !!(void 0 === e4.layer || Number.isInteger(e4.layer) && e4.layer >= 0 || "inherit" === e4.layer);
            }, a3 = function(e4) {
              return !!e4 && (!(e4.video && !i3(e4.video)) && !(e4.screenVideo && !i3(e4.screenVideo)));
            }, o3 = 0, s3 = Object.entries(e3); o3 < s3.length; o3++) {
              var c4 = k2()(s3[o3], 2), u3 = c4[0], l3 = c4[1];
              if (!r3(u3) || !a3(l3))
                return false;
            }
            return true;
          }
          function ct(e3) {
            return "object" === S2()(e3) && (!(!e3.video || "object" !== S2()(e3.video)) && !!function(e4) {
              var t3 = ["type", "config", "publish"];
              if (!e4)
                return false;
              if ("object" !== S2()(e4))
                return false;
              if (0 === Object.keys(e4).length)
                return false;
              if (e4.type && !function(e5) {
                if ("string" != typeof e5)
                  return false;
                if (!Object.values(N2).includes(e5))
                  return console.error("inputSettings video processor type invalid"), false;
                return true;
              }(e4.type))
                return false;
              if (void 0 !== e4.publish && "boolean" != typeof e4.publish)
                return false;
              "boolean" == typeof e4.publish && console.warn("inputSettings.video.processor: publish key has been deprecated; it will be ignored");
              if (e4.config) {
                if ("object" !== S2()(e4.config))
                  return false;
                if (!function(e5, t4) {
                  var n3 = Object.keys(t4);
                  if (0 === n3.length)
                    return true;
                  var r3 = "invalid object in inputSettings -> video -> processor -> config";
                  switch (e5) {
                    case N2.BGBLUR:
                      return n3.length > 1 || "strength" !== n3[0] ? (console.error(r3), false) : !("number" != typeof t4.strength || t4.strength <= 0 || t4.strength > 1 || isNaN(t4.strength)) || (console.error("".concat(r3, "; expected: {0 < strength <= 1}, got: ").concat(t4.strength)), false);
                    case N2.BGIMAGE:
                      return !(void 0 !== t4.source && !function(e6) {
                        if ("default" === e6.source)
                          return e6.type = "default", true;
                        if (re(e6.source))
                          return e6.type = "url", !!function(e7) {
                            var t6 = new URL(e7), n5 = t6.pathname;
                            if ("data:" === t6.protocol)
                              try {
                                var r4 = n5.substring(n5.indexOf(":") + 1, n5.indexOf(";")).split("/")[1];
                                return F2.includes(r4);
                              } catch (e8) {
                                return console.error("failed to deduce blob content type", e8), false;
                              }
                            var i3 = n5.split(".").at(-1).toLowerCase().trim();
                            return F2.includes(i3);
                          }(e6.source) || (console.error("invalid image type; supported types: [".concat(F2.join(", "), "]")), false);
                        return t5 = e6.source, n4 = Number(t5), isNaN(n4) || !Number.isInteger(n4) || n4 <= 0 || n4 > 10 ? (console.error("invalid image selection; must be an int, > 0, <= ".concat(10)), false) : (e6.type = "daily-preselect", true);
                        var t5, n4;
                      }(t4));
                    default:
                      return true;
                  }
                }(e4.type, e4.config))
                  return false;
              }
              return Object.keys(e4).filter(function(e5) {
                return !t3.includes(e5);
              }).forEach(function(t4) {
                console.warn("invalid key inputSettings -> video -> processor : ".concat(t4)), delete e4[t4];
              }), true;
            }(e3.video.processor));
          }
          function ut() {
            var e3 = Object.values(N2).join(" | ");
            return "inputSettings must be of the form: { video: { processor: [ ".concat(e3, " ] }, config?: {} }");
          }
          function lt(e3) {
            var t3 = e3.allowAllParticipantsKey;
            return "receiveSettings must be of the form { [<remote participant id> | ".concat("base").concat(t3 ? ' | "'.concat("*", '"') : "", "]: ") + '{ [video: [{ layer: [<non-negative integer> | "inherit"] } | "inherit"]], [screenVideo: [{ layer: [<non-negative integer> | "inherit"] } | "inherit"]] }}}';
          }
          function dt(e3) {
            if (e3 && "object" !== S2()(e3) || Array.isArray(e3))
              return console.error("customTrayButtons should be an Object of the type ".concat(JSON.stringify(Ze), ".")), false;
            if (e3)
              for (var t3 = 0, n3 = Object.entries(e3); t3 < n3.length; t3++)
                for (var r3 = k2()(n3[t3], 1)[0], i3 = 0, a3 = Object.entries(e3[r3]); i3 < a3.length; i3++) {
                  var o3 = k2()(a3[i3], 2), s3 = o3[0], c4 = o3[1];
                  if ("iconPath" === s3 && !re(c4))
                    return console.error("customTrayButton ".concat(s3, " should be a url.")), false;
                  if ("iconPathDarkMode" === s3 && !re(c4))
                    return console.error("customTrayButton ".concat(s3, " should be a url.")), false;
                  var u3 = Ze.id[s3];
                  if (!u3)
                    return console.error("customTrayButton does not support key ".concat(s3)), false;
                  if (S2()(c4) !== u3)
                    return console.error("customTrayButton ".concat(s3, " should be a ").concat(u3, ".")), false;
                }
            return true;
          }
          function ft(e3) {
            if ("object" !== S2()(e3))
              throw new Error('RemoteMediaPlayerSettings: must be "object" type');
            if (e3.state && !Object.values(R2).includes(e3.state))
              throw new Error("Invalid value for RemoteMediaPlayerSettings.state, valid values are: " + JSON.stringify(R2));
            if (e3.volume) {
              if ("number" != typeof e3.volume)
                throw new Error('RemoteMediaPlayerSettings.volume: must be "number" type');
              if (e3.volume < 0 || e3.volume > 2)
                throw new Error("RemoteMediaPlayerSettings.volume: must be between 0.0 - 2.0");
            }
          }
          function pt(e3, t3, n3) {
            return !("number" != typeof e3 || e3 < t3 || e3 > n3);
          }
        }]);
      });
    }
  });

  // ../assets/node_modules/recoil/cjs/index.js
  var require_cjs = __commonJS({
    "../assets/node_modules/recoil/cjs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var react = _interopDefault(require_react());
      var reactDom = _interopDefault(require_react_dom());
      function err(message) {
        const error = new Error(message);
        if (error.stack === void 0) {
          try {
            throw error;
          } catch (_) {
          }
        }
        return error;
      }
      var err_1 = err;
      var Recoil_err = err_1;
      function isPromise(p2) {
        return !!p2 && typeof p2.then === "function";
      }
      var Recoil_isPromise = isPromise;
      function nullthrows(x2, message) {
        if (x2 != null) {
          return x2;
        }
        throw Recoil_err(message !== null && message !== void 0 ? message : "Got unexpected null or undefined");
      }
      var Recoil_nullthrows = nullthrows;
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var BaseLoadable = class {
        getValue() {
          throw Recoil_err("BaseLoadable");
        }
        toPromise() {
          throw Recoil_err("BaseLoadable");
        }
        valueMaybe() {
          throw Recoil_err("BaseLoadable");
        }
        valueOrThrow() {
          throw Recoil_err(`Loadable expected value, but in "${this.state}" state`);
        }
        promiseMaybe() {
          throw Recoil_err("BaseLoadable");
        }
        promiseOrThrow() {
          throw Recoil_err(`Loadable expected promise, but in "${this.state}" state`);
        }
        errorMaybe() {
          throw Recoil_err("BaseLoadable");
        }
        errorOrThrow() {
          throw Recoil_err(`Loadable expected error, but in "${this.state}" state`);
        }
        is(other) {
          return other.state === this.state && other.contents === this.contents;
        }
        map(_map) {
          throw Recoil_err("BaseLoadable");
        }
      };
      var ValueLoadable = class extends BaseLoadable {
        constructor(value) {
          super();
          _defineProperty(this, "state", "hasValue");
          _defineProperty(this, "contents", void 0);
          this.contents = value;
        }
        getValue() {
          return this.contents;
        }
        toPromise() {
          return Promise.resolve(this.contents);
        }
        valueMaybe() {
          return this.contents;
        }
        valueOrThrow() {
          return this.contents;
        }
        promiseMaybe() {
          return void 0;
        }
        errorMaybe() {
          return void 0;
        }
        map(map) {
          try {
            const next = map(this.contents);
            return Recoil_isPromise(next) ? loadableWithPromise(next) : isLoadable(next) ? next : loadableWithValue(next);
          } catch (e2) {
            return Recoil_isPromise(e2) ? (
              // If we "suspended", then try again.
              // errors and subsequent retries will be handled in 'loading' case
              // $FlowFixMe[prop-missing]
              loadableWithPromise(e2.next(() => this.map(map)))
            ) : loadableWithError(e2);
          }
        }
      };
      var ErrorLoadable = class extends BaseLoadable {
        constructor(error) {
          super();
          _defineProperty(this, "state", "hasError");
          _defineProperty(this, "contents", void 0);
          this.contents = error;
        }
        getValue() {
          throw this.contents;
        }
        toPromise() {
          return Promise.reject(this.contents);
        }
        valueMaybe() {
          return void 0;
        }
        promiseMaybe() {
          return void 0;
        }
        errorMaybe() {
          return this.contents;
        }
        errorOrThrow() {
          return this.contents;
        }
        map(_map) {
          return this;
        }
      };
      var LoadingLoadable = class extends BaseLoadable {
        constructor(promise) {
          super();
          _defineProperty(this, "state", "loading");
          _defineProperty(this, "contents", void 0);
          this.contents = promise;
        }
        getValue() {
          throw this.contents;
        }
        toPromise() {
          return this.contents;
        }
        valueMaybe() {
          return void 0;
        }
        promiseMaybe() {
          return this.contents;
        }
        promiseOrThrow() {
          return this.contents;
        }
        errorMaybe() {
          return void 0;
        }
        map(map) {
          return loadableWithPromise(this.contents.then((value) => {
            const next = map(value);
            if (isLoadable(next)) {
              const nextLoadable = next;
              switch (nextLoadable.state) {
                case "hasValue":
                  return nextLoadable.contents;
                case "hasError":
                  throw nextLoadable.contents;
                case "loading":
                  return nextLoadable.contents;
              }
            }
            return next;
          }).catch((e2) => {
            if (Recoil_isPromise(e2)) {
              return e2.then(() => this.map(map).contents);
            }
            throw e2;
          }));
        }
      };
      function loadableWithValue(value) {
        return Object.freeze(new ValueLoadable(value));
      }
      function loadableWithError(error) {
        return Object.freeze(new ErrorLoadable(error));
      }
      function loadableWithPromise(promise) {
        return Object.freeze(new LoadingLoadable(promise));
      }
      function loadableLoading() {
        return Object.freeze(new LoadingLoadable(new Promise(() => {
        })));
      }
      function loadableAllArray(inputs) {
        return inputs.every((i2) => i2.state === "hasValue") ? loadableWithValue(inputs.map((i2) => i2.contents)) : inputs.some((i2) => i2.state === "hasError") ? loadableWithError(Recoil_nullthrows(inputs.find((i2) => i2.state === "hasError"), "Invalid loadable passed to loadableAll").contents) : loadableWithPromise(Promise.all(inputs.map((i2) => i2.contents)));
      }
      function loadableAll(inputs) {
        const unwrapedInputs = Array.isArray(inputs) ? inputs : Object.getOwnPropertyNames(inputs).map((key) => inputs[key]);
        const normalizedInputs = unwrapedInputs.map((x2) => isLoadable(x2) ? x2 : Recoil_isPromise(x2) ? loadableWithPromise(x2) : loadableWithValue(x2));
        const output = loadableAllArray(normalizedInputs);
        return Array.isArray(inputs) ? (
          // $FlowIssue[incompatible-return]
          output
        ) : (
          // Object.getOwnPropertyNames() has consistent key ordering with ES6
          // $FlowIssue[incompatible-call]
          output.map((outputs) => Object.getOwnPropertyNames(inputs).reduce((out, key, idx) => __spreadProps(__spreadValues({}, out), {
            [key]: outputs[idx]
          }), {}))
        );
      }
      function isLoadable(x2) {
        return x2 instanceof BaseLoadable;
      }
      var LoadableStaticInterface = {
        of: (value) => Recoil_isPromise(value) ? loadableWithPromise(value) : isLoadable(value) ? value : loadableWithValue(value),
        error: (error) => loadableWithError(error),
        // $FlowIssue[incompatible-return]
        loading: () => loadableLoading(),
        // $FlowIssue[unclear-type]
        all: loadableAll,
        isLoadable
      };
      var Recoil_Loadable = {
        loadableWithValue,
        loadableWithError,
        loadableWithPromise,
        loadableLoading,
        loadableAll,
        isLoadable,
        RecoilLoadable: LoadableStaticInterface
      };
      var Recoil_Loadable_1 = Recoil_Loadable.loadableWithValue;
      var Recoil_Loadable_2 = Recoil_Loadable.loadableWithError;
      var Recoil_Loadable_3 = Recoil_Loadable.loadableWithPromise;
      var Recoil_Loadable_4 = Recoil_Loadable.loadableLoading;
      var Recoil_Loadable_5 = Recoil_Loadable.loadableAll;
      var Recoil_Loadable_6 = Recoil_Loadable.isLoadable;
      var Recoil_Loadable_7 = Recoil_Loadable.RecoilLoadable;
      var Recoil_Loadable$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        loadableWithValue: Recoil_Loadable_1,
        loadableWithError: Recoil_Loadable_2,
        loadableWithPromise: Recoil_Loadable_3,
        loadableLoading: Recoil_Loadable_4,
        loadableAll: Recoil_Loadable_5,
        isLoadable: Recoil_Loadable_6,
        RecoilLoadable: Recoil_Loadable_7
      });
      var gks = (/* @__PURE__ */ new Map()).set("recoil_hamt_2020", true).set("recoil_sync_external_store", true).set("recoil_suppress_rerender_in_callback", true).set("recoil_memory_managament_2020", true);
      function Recoil_gkx_OSS(gk) {
        var _gks$get;
        return (_gks$get = gks.get(gk)) !== null && _gks$get !== void 0 ? _gks$get : false;
      }
      Recoil_gkx_OSS.setPass = (gk) => {
        gks.set(gk, true);
      };
      Recoil_gkx_OSS.setFail = (gk) => {
        gks.set(gk, false);
      };
      Recoil_gkx_OSS.clear = () => {
        gks.clear();
      };
      var Recoil_gkx = Recoil_gkx_OSS;
      function recoverableViolation(message, _projectName, {
        error
      } = {}) {
        if (process.env.NODE_ENV !== "production") {
          console.error(message, error);
        }
        return null;
      }
      var recoverableViolation_1 = recoverableViolation;
      var Recoil_recoverableViolation = recoverableViolation_1;
      var _createMutableSource;
      var _useMutableSource;
      var _useSyncExternalStore;
      var createMutableSource = (
        // flowlint-next-line unclear-type:off
        (_createMutableSource = react.createMutableSource) !== null && _createMutableSource !== void 0 ? _createMutableSource : react.unstable_createMutableSource
      );
      var useMutableSource = (
        // flowlint-next-line unclear-type:off
        (_useMutableSource = react.useMutableSource) !== null && _useMutableSource !== void 0 ? _useMutableSource : react.unstable_useMutableSource
      );
      var useSyncExternalStore = (
        // flowlint-next-line unclear-type:off
        (_useSyncExternalStore = react.useSyncExternalStore) !== null && _useSyncExternalStore !== void 0 ? _useSyncExternalStore : (
          // flowlint-next-line unclear-type:off
          react.unstable_useSyncExternalStore
        )
      );
      var ReactRendererVersionMismatchWarnOnce = false;
      function currentRendererSupportsUseSyncExternalStore() {
        var _ReactCurrentDispatch;
        const {
          ReactCurrentDispatcher,
          ReactCurrentOwner
        } = (
          /* $FlowFixMe[prop-missing] This workaround was approved as a safer mechanism
           * to detect if the current renderer supports useSyncExternalStore()
           * https://fb.workplace.com/groups/reactjs/posts/9558682330846963/ */
          react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
        );
        const dispatcher = (_ReactCurrentDispatch = ReactCurrentDispatcher === null || ReactCurrentDispatcher === void 0 ? void 0 : ReactCurrentDispatcher.current) !== null && _ReactCurrentDispatch !== void 0 ? _ReactCurrentDispatch : ReactCurrentOwner.currentDispatcher;
        const isUseSyncExternalStoreSupported = dispatcher.useSyncExternalStore != null;
        if (useSyncExternalStore && !isUseSyncExternalStoreSupported && !ReactRendererVersionMismatchWarnOnce) {
          ReactRendererVersionMismatchWarnOnce = true;
          Recoil_recoverableViolation("A React renderer without React 18+ API support is being used with React 18+.");
        }
        return isUseSyncExternalStoreSupported;
      }
      function reactMode() {
        if (Recoil_gkx("recoil_transition_support")) {
          return {
            mode: "TRANSITION_SUPPORT",
            early: true,
            concurrent: true
          };
        }
        if (Recoil_gkx("recoil_sync_external_store") && useSyncExternalStore != null) {
          return {
            mode: "SYNC_EXTERNAL_STORE",
            early: true,
            concurrent: false
          };
        }
        if (Recoil_gkx("recoil_mutable_source") && useMutableSource != null && typeof window !== "undefined" && !window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE) {
          return Recoil_gkx("recoil_suppress_rerender_in_callback") ? {
            mode: "MUTABLE_SOURCE",
            early: true,
            concurrent: true
          } : {
            mode: "MUTABLE_SOURCE",
            early: false,
            concurrent: false
          };
        }
        return Recoil_gkx("recoil_suppress_rerender_in_callback") ? {
          mode: "LEGACY",
          early: true,
          concurrent: false
        } : {
          mode: "LEGACY",
          early: false,
          concurrent: false
        };
      }
      function isFastRefreshEnabled() {
        return false;
      }
      var Recoil_ReactMode = {
        createMutableSource,
        useMutableSource,
        useSyncExternalStore,
        currentRendererSupportsUseSyncExternalStore,
        reactMode,
        isFastRefreshEnabled
      };
      var env = {
        RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED: true
      };
      function applyProcessEnvFlagOverrides() {
        var _process, _process$env$RECOIL_D, _process$env$RECOIL_D2;
        if (typeof process === "undefined") {
          return;
        }
        if (((_process = process) === null || _process === void 0 ? void 0 : _process.env) == null) {
          return;
        }
        const sanitizedValue = (_process$env$RECOIL_D = process.env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED) === null || _process$env$RECOIL_D === void 0 ? void 0 : (_process$env$RECOIL_D2 = _process$env$RECOIL_D.toLowerCase()) === null || _process$env$RECOIL_D2 === void 0 ? void 0 : _process$env$RECOIL_D2.trim();
        if (sanitizedValue == null || sanitizedValue === "") {
          return;
        }
        const allowedValues = ["true", "false"];
        if (!allowedValues.includes(sanitizedValue)) {
          throw Recoil_err(`process.env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED value must be 'true', 'false', or empty: ${sanitizedValue}`);
        }
        env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED = sanitizedValue === "true";
      }
      applyProcessEnvFlagOverrides();
      var Recoil_RecoilEnv = env;
      var AbstractRecoilValue = class {
        constructor(newKey) {
          _defineProperty(this, "key", void 0);
          this.key = newKey;
        }
        toJSON() {
          return {
            key: this.key
          };
        }
      };
      var RecoilState = class extends AbstractRecoilValue {
      };
      var RecoilValueReadOnly = class extends AbstractRecoilValue {
      };
      function isRecoilValue(x2) {
        return x2 instanceof RecoilState || x2 instanceof RecoilValueReadOnly;
      }
      var Recoil_RecoilValue = {
        AbstractRecoilValue,
        RecoilState,
        RecoilValueReadOnly,
        isRecoilValue
      };
      var Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;
      var Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;
      var Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;
      var Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;
      var Recoil_RecoilValue$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        AbstractRecoilValue: Recoil_RecoilValue_1,
        RecoilState: Recoil_RecoilValue_2,
        RecoilValueReadOnly: Recoil_RecoilValue_3,
        isRecoilValue: Recoil_RecoilValue_4
      });
      function sprintf(format, ...args) {
        let index2 = 0;
        return format.replace(/%s/g, () => String(args[index2++]));
      }
      var sprintf_1 = sprintf;
      function expectationViolation(format, ...args) {
        if (process.env.NODE_ENV !== "production") {
          const message = sprintf_1.call(null, format, ...args);
          const error = new Error(message);
          error.name = "Expectation Violation";
          console.error(error);
        }
      }
      var expectationViolation_1 = expectationViolation;
      var Recoil_expectationViolation = expectationViolation_1;
      function mapIterable(iterable, callback) {
        return function* () {
          let index2 = 0;
          for (const value of iterable) {
            yield callback(value, index2++);
          }
        }();
      }
      var Recoil_mapIterable = mapIterable;
      var {
        isFastRefreshEnabled: isFastRefreshEnabled$1
      } = Recoil_ReactMode;
      var DefaultValue = class {
      };
      var DEFAULT_VALUE = new DefaultValue();
      var nodes = /* @__PURE__ */ new Map();
      var recoilValues = /* @__PURE__ */ new Map();
      function recoilValuesForKeys(keys) {
        return Recoil_mapIterable(keys, (key) => Recoil_nullthrows(recoilValues.get(key)));
      }
      function checkForDuplicateAtomKey(key) {
        if (nodes.has(key)) {
          const message = `Duplicate atom key "${key}". This is a FATAL ERROR in
      production. But it is safe to ignore this warning if it occurred because of
      hot module replacement.`;
          if (process.env.NODE_ENV !== "production") {
            if (!isFastRefreshEnabled$1()) {
              Recoil_expectationViolation(message, "recoil");
            }
          } else {
            console.warn(message);
          }
        }
      }
      function registerNode(node) {
        if (Recoil_RecoilEnv.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED) {
          checkForDuplicateAtomKey(node.key);
        }
        nodes.set(node.key, node);
        const recoilValue = node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);
        recoilValues.set(node.key, recoilValue);
        return recoilValue;
      }
      var NodeMissingError = class extends Error {
      };
      function getNode(key) {
        const node = nodes.get(key);
        if (node == null) {
          throw new NodeMissingError(`Missing definition for RecoilValue: "${key}""`);
        }
        return node;
      }
      function getNodeMaybe(key) {
        return nodes.get(key);
      }
      var configDeletionHandlers = /* @__PURE__ */ new Map();
      function deleteNodeConfigIfPossible(key) {
        var _node$shouldDeleteCon;
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return;
        }
        const node = nodes.get(key);
        if (node !== null && node !== void 0 && (_node$shouldDeleteCon = node.shouldDeleteConfigOnRelease) !== null && _node$shouldDeleteCon !== void 0 && _node$shouldDeleteCon.call(node)) {
          var _getConfigDeletionHan;
          nodes.delete(key);
          (_getConfigDeletionHan = getConfigDeletionHandler(key)) === null || _getConfigDeletionHan === void 0 ? void 0 : _getConfigDeletionHan();
          configDeletionHandlers.delete(key);
        }
      }
      function setConfigDeletionHandler(key, fn) {
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return;
        }
        if (fn === void 0) {
          configDeletionHandlers.delete(key);
        } else {
          configDeletionHandlers.set(key, fn);
        }
      }
      function getConfigDeletionHandler(key) {
        return configDeletionHandlers.get(key);
      }
      var Recoil_Node = {
        nodes,
        recoilValues,
        registerNode,
        getNode,
        getNodeMaybe,
        deleteNodeConfigIfPossible,
        setConfigDeletionHandler,
        getConfigDeletionHandler,
        recoilValuesForKeys,
        NodeMissingError,
        DefaultValue,
        DEFAULT_VALUE
      };
      function enqueueExecution(s2, f2) {
        f2();
      }
      var Recoil_Queue = {
        enqueueExecution
      };
      function createCommonjsModule(fn, module2) {
        return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
      }
      var hamt_1 = createCommonjsModule(function(module2) {
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
          return typeof obj;
        } : function(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        var hamt = {};
        var SIZE = 5;
        var BUCKET_SIZE = Math.pow(2, SIZE);
        var MASK = BUCKET_SIZE - 1;
        var MAX_INDEX_NODE = BUCKET_SIZE / 2;
        var MIN_ARRAY_NODE = BUCKET_SIZE / 4;
        var nothing = {};
        var constant = function constant2(x2) {
          return function() {
            return x2;
          };
        };
        var hash2 = hamt.hash = function(str) {
          var type = typeof str === "undefined" ? "undefined" : _typeof(str);
          if (type === "number")
            return str;
          if (type !== "string")
            str += "";
          var hash3 = 0;
          for (var i2 = 0, len = str.length; i2 < len; ++i2) {
            var c3 = str.charCodeAt(i2);
            hash3 = (hash3 << 5) - hash3 + c3 | 0;
          }
          return hash3;
        };
        var popcount = function popcount2(x2) {
          x2 -= x2 >> 1 & 1431655765;
          x2 = (x2 & 858993459) + (x2 >> 2 & 858993459);
          x2 = x2 + (x2 >> 4) & 252645135;
          x2 += x2 >> 8;
          x2 += x2 >> 16;
          return x2 & 127;
        };
        var hashFragment = function hashFragment2(shift2, h2) {
          return h2 >>> shift2 & MASK;
        };
        var toBitmap = function toBitmap2(x2) {
          return 1 << x2;
        };
        var fromBitmap = function fromBitmap2(bitmap, bit) {
          return popcount(bitmap & bit - 1);
        };
        var arrayUpdate = function arrayUpdate2(mutate2, at, v2, arr) {
          var out = arr;
          if (!mutate2) {
            var len = arr.length;
            out = new Array(len);
            for (var i2 = 0; i2 < len; ++i2) {
              out[i2] = arr[i2];
            }
          }
          out[at] = v2;
          return out;
        };
        var arraySpliceOut = function arraySpliceOut2(mutate2, at, arr) {
          var newLen = arr.length - 1;
          var i2 = 0;
          var g2 = 0;
          var out = arr;
          if (mutate2) {
            i2 = g2 = at;
          } else {
            out = new Array(newLen);
            while (i2 < at) {
              out[g2++] = arr[i2++];
            }
          }
          ++i2;
          while (i2 <= newLen) {
            out[g2++] = arr[i2++];
          }
          if (mutate2) {
            out.length = newLen;
          }
          return out;
        };
        var arraySpliceIn = function arraySpliceIn2(mutate2, at, v2, arr) {
          var len = arr.length;
          if (mutate2) {
            var _i = len;
            while (_i >= at) {
              arr[_i--] = arr[_i];
            }
            arr[at] = v2;
            return arr;
          }
          var i2 = 0, g2 = 0;
          var out = new Array(len + 1);
          while (i2 < at) {
            out[g2++] = arr[i2++];
          }
          out[at] = v2;
          while (i2 < len) {
            out[++g2] = arr[i2++];
          }
          return out;
        };
        var LEAF = 1;
        var COLLISION = 2;
        var INDEX = 3;
        var ARRAY = 4;
        var empty = {
          __hamt_isEmpty: true
        };
        var isEmptyNode = function isEmptyNode2(x2) {
          return x2 === empty || x2 && x2.__hamt_isEmpty;
        };
        var Leaf = function Leaf2(edit, hash3, key, value) {
          return {
            type: LEAF,
            edit,
            hash: hash3,
            key,
            value,
            _modify: Leaf__modify
          };
        };
        var Collision = function Collision2(edit, hash3, children) {
          return {
            type: COLLISION,
            edit,
            hash: hash3,
            children,
            _modify: Collision__modify
          };
        };
        var IndexedNode = function IndexedNode2(edit, mask, children) {
          return {
            type: INDEX,
            edit,
            mask,
            children,
            _modify: IndexedNode__modify
          };
        };
        var ArrayNode = function ArrayNode2(edit, size2, children) {
          return {
            type: ARRAY,
            edit,
            size: size2,
            children,
            _modify: ArrayNode__modify
          };
        };
        var isLeaf = function isLeaf2(node) {
          return node === empty || node.type === LEAF || node.type === COLLISION;
        };
        var expand = function expand2(edit, frag, child, bitmap, subNodes) {
          var arr = [];
          var bit = bitmap;
          var count2 = 0;
          for (var i2 = 0; bit; ++i2) {
            if (bit & 1)
              arr[i2] = subNodes[count2++];
            bit >>>= 1;
          }
          arr[frag] = child;
          return ArrayNode(edit, count2 + 1, arr);
        };
        var pack = function pack2(edit, count2, removed, elements) {
          var children = new Array(count2 - 1);
          var g2 = 0;
          var bitmap = 0;
          for (var i2 = 0, len = elements.length; i2 < len; ++i2) {
            if (i2 !== removed) {
              var elem = elements[i2];
              if (elem && !isEmptyNode(elem)) {
                children[g2++] = elem;
                bitmap |= 1 << i2;
              }
            }
          }
          return IndexedNode(edit, bitmap, children);
        };
        var mergeLeaves = function mergeLeaves2(edit, shift2, h1, n1, h2, n2) {
          if (h1 === h2)
            return Collision(edit, h1, [n2, n1]);
          var subH1 = hashFragment(shift2, h1);
          var subH2 = hashFragment(shift2, h2);
          return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves2(edit, shift2 + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);
        };
        var updateCollisionList = function updateCollisionList2(mutate2, edit, keyEq, h2, list, f2, k2, size2) {
          var len = list.length;
          for (var i2 = 0; i2 < len; ++i2) {
            var child = list[i2];
            if (keyEq(k2, child.key)) {
              var value = child.value;
              var _newValue = f2(value);
              if (_newValue === value)
                return list;
              if (_newValue === nothing) {
                --size2.value;
                return arraySpliceOut(mutate2, i2, list);
              }
              return arrayUpdate(mutate2, i2, Leaf(edit, h2, k2, _newValue), list);
            }
          }
          var newValue = f2();
          if (newValue === nothing)
            return list;
          ++size2.value;
          return arrayUpdate(mutate2, len, Leaf(edit, h2, k2, newValue), list);
        };
        var canEditNode = function canEditNode2(edit, node) {
          return edit === node.edit;
        };
        var Leaf__modify = function Leaf__modify2(edit, keyEq, shift2, f2, h2, k2, size2) {
          if (keyEq(k2, this.key)) {
            var _v = f2(this.value);
            if (_v === this.value)
              return this;
            else if (_v === nothing) {
              --size2.value;
              return empty;
            }
            if (canEditNode(edit, this)) {
              this.value = _v;
              return this;
            }
            return Leaf(edit, h2, k2, _v);
          }
          var v2 = f2();
          if (v2 === nothing)
            return this;
          ++size2.value;
          return mergeLeaves(edit, shift2, this.hash, this, h2, Leaf(edit, h2, k2, v2));
        };
        var Collision__modify = function Collision__modify2(edit, keyEq, shift2, f2, h2, k2, size2) {
          if (h2 === this.hash) {
            var canEdit = canEditNode(edit, this);
            var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f2, k2, size2);
            if (list === this.children)
              return this;
            return list.length > 1 ? Collision(edit, this.hash, list) : list[0];
          }
          var v2 = f2();
          if (v2 === nothing)
            return this;
          ++size2.value;
          return mergeLeaves(edit, shift2, this.hash, this, h2, Leaf(edit, h2, k2, v2));
        };
        var IndexedNode__modify = function IndexedNode__modify2(edit, keyEq, shift2, f2, h2, k2, size2) {
          var mask = this.mask;
          var children = this.children;
          var frag = hashFragment(shift2, h2);
          var bit = toBitmap(frag);
          var indx = fromBitmap(mask, bit);
          var exists = mask & bit;
          var current = exists ? children[indx] : empty;
          var child = current._modify(edit, keyEq, shift2 + SIZE, f2, h2, k2, size2);
          if (current === child)
            return this;
          var canEdit = canEditNode(edit, this);
          var bitmap = mask;
          var newChildren = void 0;
          if (exists && isEmptyNode(child)) {
            bitmap &= ~bit;
            if (!bitmap)
              return empty;
            if (children.length <= 2 && isLeaf(children[indx ^ 1]))
              return children[indx ^ 1];
            newChildren = arraySpliceOut(canEdit, indx, children);
          } else if (!exists && !isEmptyNode(child)) {
            if (children.length >= MAX_INDEX_NODE)
              return expand(edit, frag, child, mask, children);
            bitmap |= bit;
            newChildren = arraySpliceIn(canEdit, indx, child, children);
          } else {
            newChildren = arrayUpdate(canEdit, indx, child, children);
          }
          if (canEdit) {
            this.mask = bitmap;
            this.children = newChildren;
            return this;
          }
          return IndexedNode(edit, bitmap, newChildren);
        };
        var ArrayNode__modify = function ArrayNode__modify2(edit, keyEq, shift2, f2, h2, k2, size2) {
          var count2 = this.size;
          var children = this.children;
          var frag = hashFragment(shift2, h2);
          var child = children[frag];
          var newChild = (child || empty)._modify(edit, keyEq, shift2 + SIZE, f2, h2, k2, size2);
          if (child === newChild)
            return this;
          var canEdit = canEditNode(edit, this);
          var newChildren = void 0;
          if (isEmptyNode(child) && !isEmptyNode(newChild)) {
            ++count2;
            newChildren = arrayUpdate(canEdit, frag, newChild, children);
          } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
            --count2;
            if (count2 <= MIN_ARRAY_NODE)
              return pack(edit, count2, frag, children);
            newChildren = arrayUpdate(canEdit, frag, empty, children);
          } else {
            newChildren = arrayUpdate(canEdit, frag, newChild, children);
          }
          if (canEdit) {
            this.size = count2;
            this.children = newChildren;
            return this;
          }
          return ArrayNode(edit, count2, newChildren);
        };
        empty._modify = function(edit, keyEq, shift2, f2, h2, k2, size2) {
          var v2 = f2();
          if (v2 === nothing)
            return empty;
          ++size2.value;
          return Leaf(edit, h2, k2, v2);
        };
        function Map2(editable, edit, config, root, size2) {
          this._editable = editable;
          this._edit = edit;
          this._config = config;
          this._root = root;
          this._size = size2;
        }
        Map2.prototype.setTree = function(newRoot, newSize) {
          if (this._editable) {
            this._root = newRoot;
            this._size = newSize;
            return this;
          }
          return newRoot === this._root ? this : new Map2(this._editable, this._edit, this._config, newRoot, newSize);
        };
        var tryGetHash = hamt.tryGetHash = function(alt, hash3, key, map) {
          var node = map._root;
          var shift2 = 0;
          var keyEq = map._config.keyEq;
          while (true) {
            switch (node.type) {
              case LEAF: {
                return keyEq(key, node.key) ? node.value : alt;
              }
              case COLLISION: {
                if (hash3 === node.hash) {
                  var children = node.children;
                  for (var i2 = 0, len = children.length; i2 < len; ++i2) {
                    var child = children[i2];
                    if (keyEq(key, child.key))
                      return child.value;
                  }
                }
                return alt;
              }
              case INDEX: {
                var frag = hashFragment(shift2, hash3);
                var bit = toBitmap(frag);
                if (node.mask & bit) {
                  node = node.children[fromBitmap(node.mask, bit)];
                  shift2 += SIZE;
                  break;
                }
                return alt;
              }
              case ARRAY: {
                node = node.children[hashFragment(shift2, hash3)];
                if (node) {
                  shift2 += SIZE;
                  break;
                }
                return alt;
              }
              default:
                return alt;
            }
          }
        };
        Map2.prototype.tryGetHash = function(alt, hash3, key) {
          return tryGetHash(alt, hash3, key, this);
        };
        var tryGet = hamt.tryGet = function(alt, key, map) {
          return tryGetHash(alt, map._config.hash(key), key, map);
        };
        Map2.prototype.tryGet = function(alt, key) {
          return tryGet(alt, key, this);
        };
        var getHash = hamt.getHash = function(hash3, key, map) {
          return tryGetHash(void 0, hash3, key, map);
        };
        Map2.prototype.getHash = function(hash3, key) {
          return getHash(hash3, key, this);
        };
        var get = hamt.get = function(key, map) {
          return tryGetHash(void 0, map._config.hash(key), key, map);
        };
        Map2.prototype.get = function(key, alt) {
          return tryGet(alt, key, this);
        };
        var hasHash = hamt.has = function(hash3, key, map) {
          return tryGetHash(nothing, hash3, key, map) !== nothing;
        };
        Map2.prototype.hasHash = function(hash3, key) {
          return hasHash(hash3, key, this);
        };
        var has = hamt.has = function(key, map) {
          return hasHash(map._config.hash(key), key, map);
        };
        Map2.prototype.has = function(key) {
          return has(key, this);
        };
        var defKeyCompare = function defKeyCompare2(x2, y2) {
          return x2 === y2;
        };
        hamt.make = function(config) {
          return new Map2(0, 0, {
            keyEq: config && config.keyEq || defKeyCompare,
            hash: config && config.hash || hash2
          }, empty, 0);
        };
        hamt.empty = hamt.make();
        var isEmpty = hamt.isEmpty = function(map) {
          return map && !!isEmptyNode(map._root);
        };
        Map2.prototype.isEmpty = function() {
          return isEmpty(this);
        };
        var modifyHash = hamt.modifyHash = function(f2, hash3, key, map) {
          var size2 = {
            value: map._size
          };
          var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f2, hash3, key, size2);
          return map.setTree(newRoot, size2.value);
        };
        Map2.prototype.modifyHash = function(hash3, key, f2) {
          return modifyHash(f2, hash3, key, this);
        };
        var modify = hamt.modify = function(f2, key, map) {
          return modifyHash(f2, map._config.hash(key), key, map);
        };
        Map2.prototype.modify = function(key, f2) {
          return modify(f2, key, this);
        };
        var setHash = hamt.setHash = function(hash3, key, value, map) {
          return modifyHash(constant(value), hash3, key, map);
        };
        Map2.prototype.setHash = function(hash3, key, value) {
          return setHash(hash3, key, value, this);
        };
        var set = hamt.set = function(key, value, map) {
          return setHash(map._config.hash(key), key, value, map);
        };
        Map2.prototype.set = function(key, value) {
          return set(key, value, this);
        };
        var del = constant(nothing);
        var removeHash = hamt.removeHash = function(hash3, key, map) {
          return modifyHash(del, hash3, key, map);
        };
        Map2.prototype.removeHash = Map2.prototype.deleteHash = function(hash3, key) {
          return removeHash(hash3, key, this);
        };
        var remove = hamt.remove = function(key, map) {
          return removeHash(map._config.hash(key), key, map);
        };
        Map2.prototype.remove = Map2.prototype.delete = function(key) {
          return remove(key, this);
        };
        var beginMutation = hamt.beginMutation = function(map) {
          return new Map2(map._editable + 1, map._edit + 1, map._config, map._root, map._size);
        };
        Map2.prototype.beginMutation = function() {
          return beginMutation(this);
        };
        var endMutation = hamt.endMutation = function(map) {
          map._editable = map._editable && map._editable - 1;
          return map;
        };
        Map2.prototype.endMutation = function() {
          return endMutation(this);
        };
        var mutate = hamt.mutate = function(f2, map) {
          var transient = beginMutation(map);
          f2(transient);
          return endMutation(transient);
        };
        Map2.prototype.mutate = function(f2) {
          return mutate(f2, this);
        };
        var appk = function appk2(k2) {
          return k2 && lazyVisitChildren(k2[0], k2[1], k2[2], k2[3], k2[4]);
        };
        var lazyVisitChildren = function lazyVisitChildren2(len, children, i2, f2, k2) {
          while (i2 < len) {
            var child = children[i2++];
            if (child && !isEmptyNode(child))
              return lazyVisit(child, f2, [len, children, i2, f2, k2]);
          }
          return appk(k2);
        };
        var lazyVisit = function lazyVisit2(node, f2, k2) {
          switch (node.type) {
            case LEAF:
              return {
                value: f2(node),
                rest: k2
              };
            case COLLISION:
            case ARRAY:
            case INDEX:
              var children = node.children;
              return lazyVisitChildren(children.length, children, 0, f2, k2);
            default:
              return appk(k2);
          }
        };
        var DONE = {
          done: true
        };
        function MapIterator(v2) {
          this.v = v2;
        }
        MapIterator.prototype.next = function() {
          if (!this.v)
            return DONE;
          var v0 = this.v;
          this.v = appk(v0.rest);
          return v0;
        };
        MapIterator.prototype[Symbol.iterator] = function() {
          return this;
        };
        var visit = function visit2(map, f2) {
          return new MapIterator(lazyVisit(map._root, f2));
        };
        var buildPairs = function buildPairs2(x2) {
          return [x2.key, x2.value];
        };
        var entries = hamt.entries = function(map) {
          return visit(map, buildPairs);
        };
        Map2.prototype.entries = Map2.prototype[Symbol.iterator] = function() {
          return entries(this);
        };
        var buildKeys = function buildKeys2(x2) {
          return x2.key;
        };
        var keys = hamt.keys = function(map) {
          return visit(map, buildKeys);
        };
        Map2.prototype.keys = function() {
          return keys(this);
        };
        var buildValues = function buildValues2(x2) {
          return x2.value;
        };
        var values = hamt.values = Map2.prototype.values = function(map) {
          return visit(map, buildValues);
        };
        Map2.prototype.values = function() {
          return values(this);
        };
        var fold = hamt.fold = function(f2, z2, m2) {
          var root = m2._root;
          if (root.type === LEAF)
            return f2(z2, root.value, root.key);
          var toVisit = [root.children];
          var children = void 0;
          while (children = toVisit.pop()) {
            for (var i2 = 0, len = children.length; i2 < len; ) {
              var child = children[i2++];
              if (child && child.type) {
                if (child.type === LEAF)
                  z2 = f2(z2, child.value, child.key);
                else
                  toVisit.push(child.children);
              }
            }
          }
          return z2;
        };
        Map2.prototype.fold = function(f2, z2) {
          return fold(f2, z2, this);
        };
        var forEach = hamt.forEach = function(f2, map) {
          return fold(function(_, value, key) {
            return f2(value, key, map);
          }, null, map);
        };
        Map2.prototype.forEach = function(f2) {
          return forEach(f2, this);
        };
        var count = hamt.count = function(map) {
          return map._size;
        };
        Map2.prototype.count = function() {
          return count(this);
        };
        Object.defineProperty(Map2.prototype, "size", {
          get: Map2.prototype.count
        });
        if (module2.exports) {
          module2.exports = hamt;
        } else {
          (void 0).hamt = hamt;
        }
      });
      var BuiltInMap = class {
        constructor(existing) {
          _defineProperty(this, "_map", void 0);
          this._map = new Map(existing === null || existing === void 0 ? void 0 : existing.entries());
        }
        keys() {
          return this._map.keys();
        }
        entries() {
          return this._map.entries();
        }
        get(k2) {
          return this._map.get(k2);
        }
        has(k2) {
          return this._map.has(k2);
        }
        set(k2, v2) {
          this._map.set(k2, v2);
          return this;
        }
        delete(k2) {
          this._map.delete(k2);
          return this;
        }
        clone() {
          return persistentMap(this);
        }
        toMap() {
          return new Map(this._map);
        }
      };
      var HashArrayMappedTrieMap = class {
        // Because hamt.empty is not a function there is no way to introduce type
        // parameters on it, so empty is typed as HAMTPlusMap<string, mixed>.
        // $FlowIssue
        constructor(existing) {
          _defineProperty(this, "_hamt", hamt_1.empty.beginMutation());
          if (existing instanceof HashArrayMappedTrieMap) {
            const h2 = existing._hamt.endMutation();
            existing._hamt = h2.beginMutation();
            this._hamt = h2.beginMutation();
          } else if (existing) {
            for (const [k2, v2] of existing.entries()) {
              this._hamt.set(k2, v2);
            }
          }
        }
        keys() {
          return this._hamt.keys();
        }
        entries() {
          return this._hamt.entries();
        }
        get(k2) {
          return this._hamt.get(k2);
        }
        has(k2) {
          return this._hamt.has(k2);
        }
        set(k2, v2) {
          this._hamt.set(k2, v2);
          return this;
        }
        delete(k2) {
          this._hamt.delete(k2);
          return this;
        }
        clone() {
          return persistentMap(this);
        }
        toMap() {
          return new Map(this._hamt);
        }
      };
      function persistentMap(existing) {
        if (Recoil_gkx("recoil_hamt_2020")) {
          return new HashArrayMappedTrieMap(existing);
        } else {
          return new BuiltInMap(existing);
        }
      }
      var Recoil_PersistentMap = {
        persistentMap
      };
      var Recoil_PersistentMap_1 = Recoil_PersistentMap.persistentMap;
      var Recoil_PersistentMap$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        persistentMap: Recoil_PersistentMap_1
      });
      function differenceSets(set, ...setsWithValuesToRemove) {
        const ret = /* @__PURE__ */ new Set();
        FIRST:
          for (const value of set) {
            for (const otherSet of setsWithValuesToRemove) {
              if (otherSet.has(value)) {
                continue FIRST;
              }
            }
            ret.add(value);
          }
        return ret;
      }
      var Recoil_differenceSets = differenceSets;
      function mapMap(map, callback) {
        const result = /* @__PURE__ */ new Map();
        map.forEach((value, key) => {
          result.set(key, callback(value, key));
        });
        return result;
      }
      var Recoil_mapMap = mapMap;
      function makeGraph() {
        return {
          nodeDeps: /* @__PURE__ */ new Map(),
          nodeToNodeSubscriptions: /* @__PURE__ */ new Map()
        };
      }
      function cloneGraph(graph2) {
        return {
          nodeDeps: Recoil_mapMap(graph2.nodeDeps, (s2) => new Set(s2)),
          nodeToNodeSubscriptions: Recoil_mapMap(graph2.nodeToNodeSubscriptions, (s2) => new Set(s2))
        };
      }
      function mergeDepsIntoGraph(key, newDeps, graph2, olderGraph) {
        const {
          nodeDeps,
          nodeToNodeSubscriptions
        } = graph2;
        const oldDeps = nodeDeps.get(key);
        if (oldDeps && olderGraph && oldDeps !== olderGraph.nodeDeps.get(key)) {
          return;
        }
        nodeDeps.set(key, newDeps);
        const addedDeps = oldDeps == null ? newDeps : Recoil_differenceSets(newDeps, oldDeps);
        for (const dep of addedDeps) {
          if (!nodeToNodeSubscriptions.has(dep)) {
            nodeToNodeSubscriptions.set(dep, /* @__PURE__ */ new Set());
          }
          const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(dep));
          existing.add(key);
        }
        if (oldDeps) {
          const removedDeps = Recoil_differenceSets(oldDeps, newDeps);
          for (const dep of removedDeps) {
            if (!nodeToNodeSubscriptions.has(dep)) {
              return;
            }
            const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(dep));
            existing.delete(key);
            if (existing.size === 0) {
              nodeToNodeSubscriptions.delete(dep);
            }
          }
        }
      }
      function saveDepsToStore(key, deps, store2, version) {
        var _storeState$nextTree, _storeState$previousT, _storeState$previousT2, _storeState$previousT3;
        const storeState = store2.getState();
        if (!(version === storeState.currentTree.version || version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {
          Recoil_recoverableViolation("Tried to save dependencies to a discarded tree");
        }
        const graph2 = store2.getGraph(version);
        mergeDepsIntoGraph(key, deps, graph2);
        if (version === ((_storeState$previousT2 = storeState.previousTree) === null || _storeState$previousT2 === void 0 ? void 0 : _storeState$previousT2.version)) {
          const currentGraph = store2.getGraph(storeState.currentTree.version);
          mergeDepsIntoGraph(key, deps, currentGraph, graph2);
        }
        if (version === ((_storeState$previousT3 = storeState.previousTree) === null || _storeState$previousT3 === void 0 ? void 0 : _storeState$previousT3.version) || version === storeState.currentTree.version) {
          var _storeState$nextTree2;
          const nextVersion = (_storeState$nextTree2 = storeState.nextTree) === null || _storeState$nextTree2 === void 0 ? void 0 : _storeState$nextTree2.version;
          if (nextVersion !== void 0) {
            const nextGraph = store2.getGraph(nextVersion);
            mergeDepsIntoGraph(key, deps, nextGraph, graph2);
          }
        }
      }
      var Recoil_Graph = {
        cloneGraph,
        graph: makeGraph,
        saveDepsToStore
      };
      var nextTreeStateVersion = 0;
      var getNextTreeStateVersion = () => nextTreeStateVersion++;
      var nextStoreID = 0;
      var getNextStoreID = () => nextStoreID++;
      var nextComponentID = 0;
      var getNextComponentID = () => nextComponentID++;
      var Recoil_Keys = {
        getNextTreeStateVersion,
        getNextStoreID,
        getNextComponentID
      };
      var {
        persistentMap: persistentMap$1
      } = Recoil_PersistentMap$1;
      var {
        graph
      } = Recoil_Graph;
      var {
        getNextTreeStateVersion: getNextTreeStateVersion$1
      } = Recoil_Keys;
      function makeEmptyTreeState() {
        const version = getNextTreeStateVersion$1();
        return {
          version,
          stateID: version,
          transactionMetadata: {},
          dirtyAtoms: /* @__PURE__ */ new Set(),
          atomValues: persistentMap$1(),
          nonvalidatedAtoms: persistentMap$1()
        };
      }
      function makeEmptyStoreState() {
        const currentTree = makeEmptyTreeState();
        return {
          currentTree,
          nextTree: null,
          previousTree: null,
          commitDepth: 0,
          knownAtoms: /* @__PURE__ */ new Set(),
          knownSelectors: /* @__PURE__ */ new Set(),
          transactionSubscriptions: /* @__PURE__ */ new Map(),
          nodeTransactionSubscriptions: /* @__PURE__ */ new Map(),
          nodeToComponentSubscriptions: /* @__PURE__ */ new Map(),
          queuedComponentCallbacks_DEPRECATED: [],
          suspendedComponentResolvers: /* @__PURE__ */ new Set(),
          graphsByVersion: (/* @__PURE__ */ new Map()).set(currentTree.version, graph()),
          retention: {
            referenceCounts: /* @__PURE__ */ new Map(),
            nodesRetainedByZone: /* @__PURE__ */ new Map(),
            retainablesToCheckForRelease: /* @__PURE__ */ new Set()
          },
          nodeCleanupFunctions: /* @__PURE__ */ new Map()
        };
      }
      var Recoil_State = {
        makeEmptyTreeState,
        makeEmptyStoreState,
        getNextTreeStateVersion: getNextTreeStateVersion$1
      };
      var RetentionZone = class {
      };
      function retentionZone() {
        return new RetentionZone();
      }
      var Recoil_RetentionZone = {
        RetentionZone,
        retentionZone
      };
      function setByAddingToSet(set, v2) {
        const next = new Set(set);
        next.add(v2);
        return next;
      }
      function setByDeletingFromSet(set, v2) {
        const next = new Set(set);
        next.delete(v2);
        return next;
      }
      function mapBySettingInMap(map, k2, v2) {
        const next = new Map(map);
        next.set(k2, v2);
        return next;
      }
      function mapByUpdatingInMap(map, k2, updater) {
        const next = new Map(map);
        next.set(k2, updater(next.get(k2)));
        return next;
      }
      function mapByDeletingFromMap(map, k2) {
        const next = new Map(map);
        next.delete(k2);
        return next;
      }
      function mapByDeletingMultipleFromMap(map, ks) {
        const next = new Map(map);
        ks.forEach((k2) => next.delete(k2));
        return next;
      }
      var Recoil_CopyOnWrite = {
        setByAddingToSet,
        setByDeletingFromSet,
        mapBySettingInMap,
        mapByUpdatingInMap,
        mapByDeletingFromMap,
        mapByDeletingMultipleFromMap
      };
      function* filterIterable(iterable, predicate) {
        let index2 = 0;
        for (const value of iterable) {
          if (predicate(value, index2++)) {
            yield value;
          }
        }
      }
      var Recoil_filterIterable = filterIterable;
      function lazyProxy(base, factories) {
        const proxy = new Proxy(base, {
          // Compute and cache lazy property if not already done.
          get: (target, prop) => {
            if (!(prop in target) && prop in factories) {
              target[prop] = factories[prop]();
            }
            return target[prop];
          },
          // This method allows user to iterate keys as normal
          ownKeys: (target) => {
            return Object.keys(target);
          }
        });
        return proxy;
      }
      var Recoil_lazyProxy = lazyProxy;
      var {
        getNode: getNode$1,
        getNodeMaybe: getNodeMaybe$1,
        recoilValuesForKeys: recoilValuesForKeys$1
      } = Recoil_Node;
      var {
        RetentionZone: RetentionZone$1
      } = Recoil_RetentionZone;
      var {
        setByAddingToSet: setByAddingToSet$1
      } = Recoil_CopyOnWrite;
      var emptySet = Object.freeze(/* @__PURE__ */ new Set());
      var ReadOnlyRecoilValueError = class extends Error {
      };
      function initializeRetentionForNode(store2, nodeKey, retainedBy) {
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return () => void 0;
        }
        const {
          nodesRetainedByZone: nodesRetainedByZone2
        } = store2.getState().retention;
        function addToZone(zone) {
          let set = nodesRetainedByZone2.get(zone);
          if (!set) {
            nodesRetainedByZone2.set(zone, set = /* @__PURE__ */ new Set());
          }
          set.add(nodeKey);
        }
        if (retainedBy instanceof RetentionZone$1) {
          addToZone(retainedBy);
        } else if (Array.isArray(retainedBy)) {
          for (const zone of retainedBy) {
            addToZone(zone);
          }
        }
        return () => {
          if (!Recoil_gkx("recoil_memory_managament_2020")) {
            return;
          }
          const {
            retention
          } = store2.getState();
          function deleteFromZone(zone) {
            const set = retention.nodesRetainedByZone.get(zone);
            set === null || set === void 0 ? void 0 : set.delete(nodeKey);
            if (set && set.size === 0) {
              retention.nodesRetainedByZone.delete(zone);
            }
          }
          if (retainedBy instanceof RetentionZone$1) {
            deleteFromZone(retainedBy);
          } else if (Array.isArray(retainedBy)) {
            for (const zone of retainedBy) {
              deleteFromZone(zone);
            }
          }
        };
      }
      function initializeNodeIfNewToStore(store2, treeState, key, trigger) {
        const storeState = store2.getState();
        if (storeState.nodeCleanupFunctions.has(key)) {
          return;
        }
        const node = getNode$1(key);
        const retentionCleanup = initializeRetentionForNode(store2, key, node.retainedBy);
        const nodeCleanup = node.init(store2, treeState, trigger);
        storeState.nodeCleanupFunctions.set(key, () => {
          nodeCleanup();
          retentionCleanup();
        });
      }
      function initializeNode(store2, key, trigger) {
        initializeNodeIfNewToStore(store2, store2.getState().currentTree, key, trigger);
      }
      function cleanUpNode(store2, key) {
        var _state$nodeCleanupFun;
        const state = store2.getState();
        (_state$nodeCleanupFun = state.nodeCleanupFunctions.get(key)) === null || _state$nodeCleanupFun === void 0 ? void 0 : _state$nodeCleanupFun();
        state.nodeCleanupFunctions.delete(key);
      }
      function getNodeLoadable(store2, state, key) {
        initializeNodeIfNewToStore(store2, state, key, "get");
        return getNode$1(key).get(store2, state);
      }
      function peekNodeLoadable(store2, state, key) {
        return getNode$1(key).peek(store2, state);
      }
      function setUnvalidatedAtomValue_DEPRECATED(state, key, newValue) {
        var _node$invalidate;
        const node = getNodeMaybe$1(key);
        node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);
        return __spreadProps(__spreadValues({}, state), {
          atomValues: state.atomValues.clone().delete(key),
          nonvalidatedAtoms: state.nonvalidatedAtoms.clone().set(key, newValue),
          dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)
        });
      }
      function setNodeValue(store2, state, key, newValue) {
        const node = getNode$1(key);
        if (node.set == null) {
          throw new ReadOnlyRecoilValueError(`Attempt to set read-only RecoilValue: ${key}`);
        }
        const set = node.set;
        initializeNodeIfNewToStore(store2, state, key, "set");
        return set(store2, state, newValue);
      }
      function peekNodeInfo(store2, state, key) {
        const storeState = store2.getState();
        const graph2 = store2.getGraph(state.version);
        const type = getNode$1(key).nodeType;
        return Recoil_lazyProxy({
          type
        }, {
          loadable: () => peekNodeLoadable(store2, state, key),
          isActive: () => storeState.knownAtoms.has(key) || storeState.knownSelectors.has(key),
          isSet: () => type === "selector" ? false : state.atomValues.has(key),
          isModified: () => state.dirtyAtoms.has(key),
          // Report current dependencies.  If the node hasn't been evaluated, then
          // dependencies may be missing based on the current state.
          deps: () => {
            var _graph$nodeDeps$get;
            return recoilValuesForKeys$1((_graph$nodeDeps$get = graph2.nodeDeps.get(key)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : []);
          },
          // Reports all "current" subscribers.  Evaluating other nodes or
          // previous in-progress async evaluations may introduce new subscribers.
          subscribers: () => {
            var _storeState$nodeToCom, _storeState$nodeToCom2;
            return {
              nodes: recoilValuesForKeys$1(Recoil_filterIterable(getDownstreamNodes(store2, state, /* @__PURE__ */ new Set([key])), (nodeKey) => nodeKey !== key)),
              components: Recoil_mapIterable((_storeState$nodeToCom = (_storeState$nodeToCom2 = storeState.nodeToComponentSubscriptions.get(key)) === null || _storeState$nodeToCom2 === void 0 ? void 0 : _storeState$nodeToCom2.values()) !== null && _storeState$nodeToCom !== void 0 ? _storeState$nodeToCom : [], ([name]) => ({
                name
              }))
            };
          }
        });
      }
      function getDownstreamNodes(store2, state, keys) {
        const visitedNodes = /* @__PURE__ */ new Set();
        const visitingNodes = Array.from(keys);
        const graph2 = store2.getGraph(state.version);
        for (let key = visitingNodes.pop(); key; key = visitingNodes.pop()) {
          var _graph$nodeToNodeSubs;
          visitedNodes.add(key);
          const subscribedNodes = (_graph$nodeToNodeSubs = graph2.nodeToNodeSubscriptions.get(key)) !== null && _graph$nodeToNodeSubs !== void 0 ? _graph$nodeToNodeSubs : emptySet;
          for (const downstreamNode of subscribedNodes) {
            if (!visitedNodes.has(downstreamNode)) {
              visitingNodes.push(downstreamNode);
            }
          }
        }
        return visitedNodes;
      }
      var Recoil_FunctionalCore = {
        getNodeLoadable,
        peekNodeLoadable,
        setNodeValue,
        initializeNode,
        cleanUpNode,
        setUnvalidatedAtomValue_DEPRECATED,
        peekNodeInfo,
        getDownstreamNodes
      };
      var _invalidateMemoizedSnapshot = null;
      function setInvalidateMemoizedSnapshot(invalidate) {
        _invalidateMemoizedSnapshot = invalidate;
      }
      function invalidateMemoizedSnapshot() {
        var _invalidateMemoizedSn;
        (_invalidateMemoizedSn = _invalidateMemoizedSnapshot) === null || _invalidateMemoizedSn === void 0 ? void 0 : _invalidateMemoizedSn();
      }
      var Recoil_SnapshotCache = {
        setInvalidateMemoizedSnapshot,
        invalidateMemoizedSnapshot
      };
      var {
        getDownstreamNodes: getDownstreamNodes$1,
        getNodeLoadable: getNodeLoadable$1,
        setNodeValue: setNodeValue$1
      } = Recoil_FunctionalCore;
      var {
        getNextComponentID: getNextComponentID$1
      } = Recoil_Keys;
      var {
        getNode: getNode$2,
        getNodeMaybe: getNodeMaybe$2
      } = Recoil_Node;
      var {
        DefaultValue: DefaultValue$1
      } = Recoil_Node;
      var {
        reactMode: reactMode$1
      } = Recoil_ReactMode;
      var {
        AbstractRecoilValue: AbstractRecoilValue$1,
        RecoilState: RecoilState$1,
        RecoilValueReadOnly: RecoilValueReadOnly$1,
        isRecoilValue: isRecoilValue$1
      } = Recoil_RecoilValue$1;
      var {
        invalidateMemoizedSnapshot: invalidateMemoizedSnapshot$1
      } = Recoil_SnapshotCache;
      function getRecoilValueAsLoadable(store2, {
        key
      }, treeState = store2.getState().currentTree) {
        var _storeState$nextTree, _storeState$previousT;
        const storeState = store2.getState();
        if (!(treeState.version === storeState.currentTree.version || treeState.version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || treeState.version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {
          Recoil_recoverableViolation("Tried to read from a discarded tree");
        }
        const loadable = getNodeLoadable$1(store2, treeState, key);
        if (loadable.state === "loading") {
          loadable.contents.catch(() => {
            return;
          });
        }
        return loadable;
      }
      function applyAtomValueWrites(atomValues, writes) {
        const result = atomValues.clone();
        writes.forEach((v2, k2) => {
          if (v2.state === "hasValue" && v2.contents instanceof DefaultValue$1) {
            result.delete(k2);
          } else {
            result.set(k2, v2);
          }
        });
        return result;
      }
      function valueFromValueOrUpdater(store2, state, {
        key
      }, valueOrUpdater) {
        if (typeof valueOrUpdater === "function") {
          const current = getNodeLoadable$1(store2, state, key);
          if (current.state === "loading") {
            const msg = `Tried to set atom or selector "${key}" using an updater function while the current state is pending, this is not currently supported.`;
            Recoil_recoverableViolation(msg);
            throw Recoil_err(msg);
          } else if (current.state === "hasError") {
            throw current.contents;
          }
          return valueOrUpdater(current.contents);
        } else {
          return valueOrUpdater;
        }
      }
      function applyAction(store2, state, action) {
        if (action.type === "set") {
          const {
            recoilValue,
            valueOrUpdater
          } = action;
          const newValue = valueFromValueOrUpdater(store2, state, recoilValue, valueOrUpdater);
          const writes = setNodeValue$1(store2, state, recoilValue.key, newValue);
          for (const [key, loadable] of writes.entries()) {
            writeLoadableToTreeState(state, key, loadable);
          }
        } else if (action.type === "setLoadable") {
          const {
            recoilValue: {
              key
            },
            loadable
          } = action;
          writeLoadableToTreeState(state, key, loadable);
        } else if (action.type === "markModified") {
          const {
            recoilValue: {
              key
            }
          } = action;
          state.dirtyAtoms.add(key);
        } else if (action.type === "setUnvalidated") {
          var _node$invalidate;
          const {
            recoilValue: {
              key
            },
            unvalidatedValue
          } = action;
          const node = getNodeMaybe$2(key);
          node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);
          state.atomValues.delete(key);
          state.nonvalidatedAtoms.set(key, unvalidatedValue);
          state.dirtyAtoms.add(key);
        } else {
          Recoil_recoverableViolation(`Unknown action ${action.type}`);
        }
      }
      function writeLoadableToTreeState(state, key, loadable) {
        if (loadable.state === "hasValue" && loadable.contents instanceof DefaultValue$1) {
          state.atomValues.delete(key);
        } else {
          state.atomValues.set(key, loadable);
        }
        state.dirtyAtoms.add(key);
        state.nonvalidatedAtoms.delete(key);
      }
      function applyActionsToStore(store2, actions) {
        store2.replaceState((state) => {
          const newState = copyTreeState(state);
          for (const action of actions) {
            applyAction(store2, newState, action);
          }
          invalidateDownstreams(store2, newState);
          invalidateMemoizedSnapshot$1();
          return newState;
        });
      }
      function queueOrPerformStateUpdate(store2, action) {
        if (batchStack.length) {
          const actionsByStore = batchStack[batchStack.length - 1];
          let actions = actionsByStore.get(store2);
          if (!actions) {
            actionsByStore.set(store2, actions = []);
          }
          actions.push(action);
        } else {
          applyActionsToStore(store2, [action]);
        }
      }
      var batchStack = [];
      function batchStart() {
        const actionsByStore = /* @__PURE__ */ new Map();
        batchStack.push(actionsByStore);
        return () => {
          for (const [store2, actions] of actionsByStore) {
            applyActionsToStore(store2, actions);
          }
          const popped = batchStack.pop();
          if (popped !== actionsByStore) {
            Recoil_recoverableViolation("Incorrect order of batch popping");
          }
        };
      }
      function copyTreeState(state) {
        return __spreadProps(__spreadValues({}, state), {
          atomValues: state.atomValues.clone(),
          nonvalidatedAtoms: state.nonvalidatedAtoms.clone(),
          dirtyAtoms: new Set(state.dirtyAtoms)
        });
      }
      function invalidateDownstreams(store2, state) {
        const downstreams = getDownstreamNodes$1(store2, state, state.dirtyAtoms);
        for (const key of downstreams) {
          var _getNodeMaybe, _getNodeMaybe$invalid;
          (_getNodeMaybe = getNodeMaybe$2(key)) === null || _getNodeMaybe === void 0 ? void 0 : (_getNodeMaybe$invalid = _getNodeMaybe.invalidate) === null || _getNodeMaybe$invalid === void 0 ? void 0 : _getNodeMaybe$invalid.call(_getNodeMaybe, state);
        }
      }
      function setRecoilValue(store2, recoilValue, valueOrUpdater) {
        queueOrPerformStateUpdate(store2, {
          type: "set",
          recoilValue,
          valueOrUpdater
        });
      }
      function setRecoilValueLoadable(store2, recoilValue, loadable) {
        if (loadable instanceof DefaultValue$1) {
          return setRecoilValue(store2, recoilValue, loadable);
        }
        queueOrPerformStateUpdate(store2, {
          type: "setLoadable",
          recoilValue,
          loadable
        });
      }
      function markRecoilValueModified(store2, recoilValue) {
        queueOrPerformStateUpdate(store2, {
          type: "markModified",
          recoilValue
        });
      }
      function setUnvalidatedRecoilValue(store2, recoilValue, unvalidatedValue) {
        queueOrPerformStateUpdate(store2, {
          type: "setUnvalidated",
          recoilValue,
          unvalidatedValue
        });
      }
      function subscribeToRecoilValue(store2, {
        key
      }, callback, componentDebugName = null) {
        const subID = getNextComponentID$1();
        const storeState = store2.getState();
        if (!storeState.nodeToComponentSubscriptions.has(key)) {
          storeState.nodeToComponentSubscriptions.set(key, /* @__PURE__ */ new Map());
        }
        Recoil_nullthrows(storeState.nodeToComponentSubscriptions.get(key)).set(subID, [componentDebugName !== null && componentDebugName !== void 0 ? componentDebugName : "<not captured>", callback]);
        const mode2 = reactMode$1();
        if (mode2.early && (mode2.mode === "LEGACY" || mode2.mode === "MUTABLE_SOURCE")) {
          const nextTree = store2.getState().nextTree;
          if (nextTree && nextTree.dirtyAtoms.has(key)) {
            callback(nextTree);
          }
        }
        return {
          release: () => {
            const releaseStoreState = store2.getState();
            const subs = releaseStoreState.nodeToComponentSubscriptions.get(key);
            if (subs === void 0 || !subs.has(subID)) {
              Recoil_recoverableViolation(`Subscription missing at release time for atom ${key}. This is a bug in Recoil.`);
              return;
            }
            subs.delete(subID);
            if (subs.size === 0) {
              releaseStoreState.nodeToComponentSubscriptions.delete(key);
            }
          }
        };
      }
      function refreshRecoilValue(store2, recoilValue) {
        var _node$clearCache;
        const {
          currentTree
        } = store2.getState();
        const node = getNode$2(recoilValue.key);
        (_node$clearCache = node.clearCache) === null || _node$clearCache === void 0 ? void 0 : _node$clearCache.call(node, store2, currentTree);
      }
      var Recoil_RecoilValueInterface = {
        RecoilValueReadOnly: RecoilValueReadOnly$1,
        AbstractRecoilValue: AbstractRecoilValue$1,
        RecoilState: RecoilState$1,
        getRecoilValueAsLoadable,
        setRecoilValue,
        setRecoilValueLoadable,
        markRecoilValueModified,
        setUnvalidatedRecoilValue,
        subscribeToRecoilValue,
        isRecoilValue: isRecoilValue$1,
        applyAtomValueWrites,
        // TODO Remove export when deprecating initialStoreState_DEPRECATED in RecoilRoot
        batchStart,
        writeLoadableToTreeState,
        invalidateDownstreams,
        copyTreeState,
        refreshRecoilValue
      };
      function someSet(set, callback, context) {
        const iterator = set.entries();
        let current = iterator.next();
        while (!current.done) {
          const entry = current.value;
          if (callback.call(context, entry[1], entry[0], set)) {
            return true;
          }
          current = iterator.next();
        }
        return false;
      }
      var Recoil_someSet = someSet;
      var {
        cleanUpNode: cleanUpNode$1
      } = Recoil_FunctionalCore;
      var {
        deleteNodeConfigIfPossible: deleteNodeConfigIfPossible$1,
        getNode: getNode$3
      } = Recoil_Node;
      var {
        RetentionZone: RetentionZone$2
      } = Recoil_RetentionZone;
      var SUSPENSE_TIMEOUT_MS = 12e4;
      var emptySet$1 = /* @__PURE__ */ new Set();
      function releaseRetainablesNowOnCurrentTree(store2, retainables) {
        const storeState = store2.getState();
        const treeState = storeState.currentTree;
        if (storeState.nextTree) {
          Recoil_recoverableViolation("releaseNodesNowOnCurrentTree should only be called at the end of a batch");
          return;
        }
        const nodes2 = /* @__PURE__ */ new Set();
        for (const r2 of retainables) {
          if (r2 instanceof RetentionZone$2) {
            for (const n2 of nodesRetainedByZone(storeState, r2)) {
              nodes2.add(n2);
            }
          } else {
            nodes2.add(r2);
          }
        }
        const releasableNodes = findReleasableNodes(store2, nodes2);
        for (const node of releasableNodes) {
          releaseNode(store2, treeState, node);
        }
      }
      function findReleasableNodes(store2, searchFromNodes) {
        const storeState = store2.getState();
        const treeState = storeState.currentTree;
        const graph2 = store2.getGraph(treeState.version);
        const releasableNodes = /* @__PURE__ */ new Set();
        const nonReleasableNodes = /* @__PURE__ */ new Set();
        findReleasableNodesInner(searchFromNodes);
        return releasableNodes;
        function findReleasableNodesInner(searchFromNodes2) {
          const releasableNodesFoundThisIteration = /* @__PURE__ */ new Set();
          const downstreams = getDownstreamNodesInTopologicalOrder(
            store2,
            treeState,
            searchFromNodes2,
            releasableNodes,
            // don't descend into these
            nonReleasableNodes
            // don't descend into these
          );
          for (const node of downstreams) {
            var _storeState$retention;
            if (getNode$3(node).retainedBy === "recoilRoot") {
              nonReleasableNodes.add(node);
              continue;
            }
            if (((_storeState$retention = storeState.retention.referenceCounts.get(node)) !== null && _storeState$retention !== void 0 ? _storeState$retention : 0) > 0) {
              nonReleasableNodes.add(node);
              continue;
            }
            if (zonesThatCouldRetainNode(node).some((z2) => storeState.retention.referenceCounts.get(z2))) {
              nonReleasableNodes.add(node);
              continue;
            }
            const nodeChildren = graph2.nodeToNodeSubscriptions.get(node);
            if (nodeChildren && Recoil_someSet(nodeChildren, (child) => nonReleasableNodes.has(child))) {
              nonReleasableNodes.add(node);
              continue;
            }
            releasableNodes.add(node);
            releasableNodesFoundThisIteration.add(node);
          }
          const parents = /* @__PURE__ */ new Set();
          for (const node of releasableNodesFoundThisIteration) {
            for (const parent of (_graph$nodeDeps$get = graph2.nodeDeps.get(node)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : emptySet$1) {
              var _graph$nodeDeps$get;
              if (!releasableNodes.has(parent)) {
                parents.add(parent);
              }
            }
          }
          if (parents.size) {
            findReleasableNodesInner(parents);
          }
        }
      }
      function getDownstreamNodesInTopologicalOrder(store2, treeState, nodes2, doNotDescendInto1, doNotDescendInto2) {
        const graph2 = store2.getGraph(treeState.version);
        const answer = [];
        const visited = /* @__PURE__ */ new Set();
        while (nodes2.size > 0) {
          visit(Recoil_nullthrows(nodes2.values().next().value));
        }
        return answer;
        function visit(node) {
          if (doNotDescendInto1.has(node) || doNotDescendInto2.has(node)) {
            nodes2.delete(node);
            return;
          }
          if (visited.has(node)) {
            return;
          }
          const children = graph2.nodeToNodeSubscriptions.get(node);
          if (children) {
            for (const child of children) {
              visit(child);
            }
          }
          visited.add(node);
          nodes2.delete(node);
          answer.push(node);
        }
      }
      function releaseNode(store2, treeState, node) {
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return;
        }
        cleanUpNode$1(store2, node);
        const storeState = store2.getState();
        storeState.knownAtoms.delete(node);
        storeState.knownSelectors.delete(node);
        storeState.nodeTransactionSubscriptions.delete(node);
        storeState.retention.referenceCounts.delete(node);
        const zones = zonesThatCouldRetainNode(node);
        for (const zone of zones) {
          var _storeState$retention2;
          (_storeState$retention2 = storeState.retention.nodesRetainedByZone.get(zone)) === null || _storeState$retention2 === void 0 ? void 0 : _storeState$retention2.delete(node);
        }
        treeState.atomValues.delete(node);
        treeState.dirtyAtoms.delete(node);
        treeState.nonvalidatedAtoms.delete(node);
        const graph2 = storeState.graphsByVersion.get(treeState.version);
        if (graph2) {
          const deps = graph2.nodeDeps.get(node);
          if (deps !== void 0) {
            graph2.nodeDeps.delete(node);
            for (const dep of deps) {
              var _graph$nodeToNodeSubs;
              (_graph$nodeToNodeSubs = graph2.nodeToNodeSubscriptions.get(dep)) === null || _graph$nodeToNodeSubs === void 0 ? void 0 : _graph$nodeToNodeSubs.delete(node);
            }
          }
          graph2.nodeToNodeSubscriptions.delete(node);
        }
        deleteNodeConfigIfPossible$1(node);
      }
      function nodesRetainedByZone(storeState, zone) {
        var _storeState$retention3;
        return (_storeState$retention3 = storeState.retention.nodesRetainedByZone.get(zone)) !== null && _storeState$retention3 !== void 0 ? _storeState$retention3 : emptySet$1;
      }
      function zonesThatCouldRetainNode(node) {
        const retainedBy = getNode$3(node).retainedBy;
        if (retainedBy === void 0 || retainedBy === "components" || retainedBy === "recoilRoot") {
          return [];
        } else if (retainedBy instanceof RetentionZone$2) {
          return [retainedBy];
        } else {
          return retainedBy;
        }
      }
      function scheduleOrPerformPossibleReleaseOfRetainable(store2, retainable) {
        const state = store2.getState();
        if (state.nextTree) {
          state.retention.retainablesToCheckForRelease.add(retainable);
        } else {
          releaseRetainablesNowOnCurrentTree(store2, /* @__PURE__ */ new Set([retainable]));
        }
      }
      function updateRetainCount(store2, retainable, delta) {
        var _map$get;
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return;
        }
        const map = store2.getState().retention.referenceCounts;
        const newCount = ((_map$get = map.get(retainable)) !== null && _map$get !== void 0 ? _map$get : 0) + delta;
        if (newCount === 0) {
          updateRetainCountToZero(store2, retainable);
        } else {
          map.set(retainable, newCount);
        }
      }
      function updateRetainCountToZero(store2, retainable) {
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return;
        }
        const map = store2.getState().retention.referenceCounts;
        map.delete(retainable);
        scheduleOrPerformPossibleReleaseOfRetainable(store2, retainable);
      }
      function releaseScheduledRetainablesNow(store2) {
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return;
        }
        const state = store2.getState();
        releaseRetainablesNowOnCurrentTree(store2, state.retention.retainablesToCheckForRelease);
        state.retention.retainablesToCheckForRelease.clear();
      }
      function retainedByOptionWithDefault(r2) {
        return r2 === void 0 ? "recoilRoot" : r2;
      }
      var Recoil_Retention = {
        SUSPENSE_TIMEOUT_MS,
        updateRetainCount,
        updateRetainCountToZero,
        releaseScheduledRetainablesNow,
        retainedByOptionWithDefault
      };
      var {
        unstable_batchedUpdates
      } = reactDom;
      var ReactBatchedUpdates = {
        unstable_batchedUpdates
      };
      var {
        unstable_batchedUpdates: unstable_batchedUpdates$1
      } = ReactBatchedUpdates;
      var Recoil_ReactBatchedUpdates = {
        unstable_batchedUpdates: unstable_batchedUpdates$1
      };
      var {
        batchStart: batchStart$1
      } = Recoil_RecoilValueInterface;
      var {
        unstable_batchedUpdates: unstable_batchedUpdates$2
      } = Recoil_ReactBatchedUpdates;
      var batcher = unstable_batchedUpdates$2;
      var setBatcher = (newBatcher) => {
        batcher = newBatcher;
      };
      var getBatcher = () => batcher;
      var batchUpdates = (callback) => {
        batcher(() => {
          let batchEnd = () => void 0;
          try {
            batchEnd = batchStart$1();
            callback();
          } finally {
            batchEnd();
          }
        });
      };
      var Recoil_Batching = {
        getBatcher,
        setBatcher,
        batchUpdates
      };
      function* concatIterables(iters) {
        for (const iter of iters) {
          for (const val of iter) {
            yield val;
          }
        }
      }
      var Recoil_concatIterables = concatIterables;
      var isSSR = (
        // $FlowFixMe(site=recoil) Window does not have a FlowType definition https://github.com/facebook/flow/issues/6709
        typeof Window === "undefined" || typeof window === "undefined"
      );
      var isWindow2 = (value) => !isSSR && // $FlowFixMe(site=recoil) Window does not have a FlowType definition https://github.com/facebook/flow/issues/6709
      (value === window || value instanceof Window);
      var isReactNative = typeof navigator !== "undefined" && navigator.product === "ReactNative";
      var Recoil_Environment = {
        isSSR,
        isReactNative,
        isWindow: isWindow2
      };
      function memoizeWithArgsHash(fn, hashFunction) {
        let cache;
        const memoizedFn = (...args) => {
          if (!cache) {
            cache = {};
          }
          const key = hashFunction(...args);
          if (!Object.hasOwnProperty.call(cache, key)) {
            cache[key] = fn(...args);
          }
          return cache[key];
        };
        return memoizedFn;
      }
      function memoizeOneWithArgsHash(fn, hashFunction) {
        let lastKey;
        let lastResult;
        const memoizedFn = (...args) => {
          const key = hashFunction(...args);
          if (lastKey === key) {
            return lastResult;
          }
          lastKey = key;
          lastResult = fn(...args);
          return lastResult;
        };
        return memoizedFn;
      }
      function memoizeOneWithArgsHashAndInvalidation(fn, hashFunction) {
        let lastKey;
        let lastResult;
        const memoizedFn = (...args) => {
          const key = hashFunction(...args);
          if (lastKey === key) {
            return lastResult;
          }
          lastKey = key;
          lastResult = fn(...args);
          return lastResult;
        };
        const invalidate = () => {
          lastKey = null;
        };
        return [memoizedFn, invalidate];
      }
      var Recoil_Memoize = {
        memoizeWithArgsHash,
        memoizeOneWithArgsHash,
        memoizeOneWithArgsHashAndInvalidation
      };
      var {
        batchUpdates: batchUpdates$1
      } = Recoil_Batching;
      var {
        initializeNode: initializeNode$1,
        peekNodeInfo: peekNodeInfo$1
      } = Recoil_FunctionalCore;
      var {
        graph: graph$1
      } = Recoil_Graph;
      var {
        getNextStoreID: getNextStoreID$1
      } = Recoil_Keys;
      var {
        DEFAULT_VALUE: DEFAULT_VALUE$1,
        recoilValues: recoilValues$1,
        recoilValuesForKeys: recoilValuesForKeys$2
      } = Recoil_Node;
      var {
        AbstractRecoilValue: AbstractRecoilValue$2,
        getRecoilValueAsLoadable: getRecoilValueAsLoadable$1,
        setRecoilValue: setRecoilValue$1,
        setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1
      } = Recoil_RecoilValueInterface;
      var {
        updateRetainCount: updateRetainCount$1
      } = Recoil_Retention;
      var {
        setInvalidateMemoizedSnapshot: setInvalidateMemoizedSnapshot$1
      } = Recoil_SnapshotCache;
      var {
        getNextTreeStateVersion: getNextTreeStateVersion$2,
        makeEmptyStoreState: makeEmptyStoreState$1
      } = Recoil_State;
      var {
        isSSR: isSSR$1
      } = Recoil_Environment;
      var {
        memoizeOneWithArgsHashAndInvalidation: memoizeOneWithArgsHashAndInvalidation$1
      } = Recoil_Memoize;
      var retainWarning = `
Recoil Snapshots only last for the duration of the callback they are provided to. To keep a Snapshot longer, do this:

  const release = snapshot.retain();
  try {
    await doSomethingWithSnapshot(snapshot);
  } finally {
    release();
  }

This is currently a DEV-only warning but will become a thrown exception in the next release of Recoil.
`;
      var Snapshot = class {
        // eslint-disable-next-line fb-www/no-uninitialized-properties
        constructor(storeState, parentStoreID) {
          _defineProperty(this, "_store", void 0);
          _defineProperty(this, "_refCount", 1);
          _defineProperty(this, "getLoadable", (recoilValue) => {
            this.checkRefCount_INTERNAL();
            return getRecoilValueAsLoadable$1(this._store, recoilValue);
          });
          _defineProperty(this, "getPromise", (recoilValue) => {
            this.checkRefCount_INTERNAL();
            return this.getLoadable(recoilValue).toPromise();
          });
          _defineProperty(this, "getNodes_UNSTABLE", (opt) => {
            this.checkRefCount_INTERNAL();
            if ((opt === null || opt === void 0 ? void 0 : opt.isModified) === true) {
              if ((opt === null || opt === void 0 ? void 0 : opt.isInitialized) === false) {
                return [];
              }
              const state = this._store.getState().currentTree;
              return recoilValuesForKeys$2(state.dirtyAtoms);
            }
            const knownAtoms = this._store.getState().knownAtoms;
            const knownSelectors = this._store.getState().knownSelectors;
            return (opt === null || opt === void 0 ? void 0 : opt.isInitialized) == null ? recoilValues$1.values() : opt.isInitialized === true ? recoilValuesForKeys$2(Recoil_concatIterables([knownAtoms, knownSelectors])) : Recoil_filterIterable(recoilValues$1.values(), ({
              key
            }) => !knownAtoms.has(key) && !knownSelectors.has(key));
          });
          _defineProperty(this, "getInfo_UNSTABLE", ({
            key
          }) => {
            this.checkRefCount_INTERNAL();
            return peekNodeInfo$1(this._store, this._store.getState().currentTree, key);
          });
          _defineProperty(this, "map", (mapper) => {
            this.checkRefCount_INTERNAL();
            const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
            mapper(mutableSnapshot);
            return mutableSnapshot;
          });
          _defineProperty(this, "asyncMap", (mapper) => __async(this, null, function* () {
            this.checkRefCount_INTERNAL();
            const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
            mutableSnapshot.retain();
            yield mapper(mutableSnapshot);
            mutableSnapshot.autoRelease_INTERNAL();
            return mutableSnapshot;
          }));
          this._store = {
            storeID: getNextStoreID$1(),
            parentStoreID,
            getState: () => storeState,
            replaceState: (replacer) => {
              storeState.currentTree = replacer(storeState.currentTree);
            },
            getGraph: (version) => {
              const graphs = storeState.graphsByVersion;
              if (graphs.has(version)) {
                return Recoil_nullthrows(graphs.get(version));
              }
              const newGraph = graph$1();
              graphs.set(version, newGraph);
              return newGraph;
            },
            subscribeToTransactions: () => ({
              release: () => {
              }
            }),
            addTransactionMetadata: () => {
              throw Recoil_err("Cannot subscribe to Snapshots");
            }
          };
          for (const nodeKey of this._store.getState().knownAtoms) {
            initializeNode$1(this._store, nodeKey, "get");
            updateRetainCount$1(this._store, nodeKey, 1);
          }
          this.autoRelease_INTERNAL();
        }
        retain() {
          if (this._refCount <= 0) {
            if (process.env.NODE_ENV !== "production") {
              throw Recoil_err("Snapshot has already been released.");
            } else {
              Recoil_recoverableViolation("Attempt to retain() Snapshot that was already released.");
            }
          }
          this._refCount++;
          let released = false;
          return () => {
            if (!released) {
              released = true;
              this._release();
            }
          };
        }
        /**
         * Release the snapshot on the next tick.  This means the snapshot is retained
         * during the execution of the current function using it.
         */
        autoRelease_INTERNAL() {
          if (!isSSR$1) {
            window.setTimeout(() => this._release(), 10);
          }
        }
        _release() {
          this._refCount--;
          if (this._refCount === 0) {
            this._store.getState().nodeCleanupFunctions.forEach((cleanup) => cleanup());
            this._store.getState().nodeCleanupFunctions.clear();
            if (!Recoil_gkx("recoil_memory_managament_2020")) {
              return;
            }
          } else if (this._refCount < 0) {
            if (process.env.NODE_ENV !== "production") {
              Recoil_recoverableViolation("Snapshot released an extra time.");
            }
          }
        }
        isRetained() {
          return this._refCount > 0;
        }
        checkRefCount_INTERNAL() {
          if (Recoil_gkx("recoil_memory_managament_2020") && this._refCount <= 0) {
            if (process.env.NODE_ENV !== "production") {
              Recoil_recoverableViolation(retainWarning);
            }
          }
        }
        getStore_INTERNAL() {
          this.checkRefCount_INTERNAL();
          return this._store;
        }
        getID() {
          this.checkRefCount_INTERNAL();
          return this._store.getState().currentTree.stateID;
        }
        getStoreID() {
          this.checkRefCount_INTERNAL();
          return this._store.storeID;
        }
        // We want to allow the methods to be destructured and used as accessors
        /* eslint-disable fb-www/extra-arrow-initializer */
        /* eslint-enable fb-www/extra-arrow-initializer */
      };
      function cloneStoreState(store2, treeState, bumpVersion = false) {
        const storeState = store2.getState();
        const version = bumpVersion ? getNextTreeStateVersion$2() : treeState.version;
        return {
          // Always clone the TreeState to isolate stores from accidental mutations.
          // For example, reading a selector from a cloned snapshot shouldn't cache
          // in the original treestate which may cause the original to skip
          // initialization of upstream atoms.
          currentTree: {
            // TODO snapshots shouldn't really have versions because a new version number
            // is always assigned when the snapshot is gone to.
            version: bumpVersion ? version : treeState.version,
            stateID: bumpVersion ? version : treeState.stateID,
            transactionMetadata: __spreadValues({}, treeState.transactionMetadata),
            dirtyAtoms: new Set(treeState.dirtyAtoms),
            atomValues: treeState.atomValues.clone(),
            nonvalidatedAtoms: treeState.nonvalidatedAtoms.clone()
          },
          commitDepth: 0,
          nextTree: null,
          previousTree: null,
          knownAtoms: new Set(storeState.knownAtoms),
          // FIXME here's a copy
          knownSelectors: new Set(storeState.knownSelectors),
          // FIXME here's a copy
          transactionSubscriptions: /* @__PURE__ */ new Map(),
          nodeTransactionSubscriptions: /* @__PURE__ */ new Map(),
          nodeToComponentSubscriptions: /* @__PURE__ */ new Map(),
          queuedComponentCallbacks_DEPRECATED: [],
          suspendedComponentResolvers: /* @__PURE__ */ new Set(),
          graphsByVersion: (/* @__PURE__ */ new Map()).set(version, store2.getGraph(treeState.version)),
          retention: {
            referenceCounts: /* @__PURE__ */ new Map(),
            nodesRetainedByZone: /* @__PURE__ */ new Map(),
            retainablesToCheckForRelease: /* @__PURE__ */ new Set()
          },
          // FIXME here's a copy
          // Create blank cleanup handlers for atoms so snapshots don't re-run
          // atom effects.
          nodeCleanupFunctions: new Map(Recoil_mapIterable(storeState.nodeCleanupFunctions.entries(), ([key]) => [key, () => {
          }]))
        };
      }
      function freshSnapshot(initializeState) {
        const snapshot = new Snapshot(makeEmptyStoreState$1());
        return initializeState != null ? snapshot.map(initializeState) : snapshot;
      }
      var [memoizedCloneSnapshot, invalidateMemoizedSnapshot$2] = memoizeOneWithArgsHashAndInvalidation$1((store2, version) => {
        var _storeState$nextTree;
        const storeState = store2.getState();
        const treeState = version === "latest" ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : Recoil_nullthrows(storeState.previousTree);
        return new Snapshot(cloneStoreState(store2, treeState), store2.storeID);
      }, (store2, version) => {
        var _store$getState$nextT, _store$getState$previ;
        return String(version) + String(store2.storeID) + String((_store$getState$nextT = store2.getState().nextTree) === null || _store$getState$nextT === void 0 ? void 0 : _store$getState$nextT.version) + String(store2.getState().currentTree.version) + String((_store$getState$previ = store2.getState().previousTree) === null || _store$getState$previ === void 0 ? void 0 : _store$getState$previ.version);
      });
      setInvalidateMemoizedSnapshot$1(invalidateMemoizedSnapshot$2);
      function cloneSnapshot(store2, version = "latest") {
        const snapshot = memoizedCloneSnapshot(store2, version);
        if (!snapshot.isRetained()) {
          invalidateMemoizedSnapshot$2();
          return memoizedCloneSnapshot(store2, version);
        }
        return snapshot;
      }
      var MutableSnapshot = class extends Snapshot {
        constructor(snapshot, batch) {
          super(cloneStoreState(snapshot.getStore_INTERNAL(), snapshot.getStore_INTERNAL().getState().currentTree, true), snapshot.getStoreID());
          _defineProperty(this, "_batch", void 0);
          _defineProperty(this, "set", (recoilState, newValueOrUpdater) => {
            this.checkRefCount_INTERNAL();
            const store2 = this.getStore_INTERNAL();
            this._batch(() => {
              updateRetainCount$1(store2, recoilState.key, 1);
              setRecoilValue$1(this.getStore_INTERNAL(), recoilState, newValueOrUpdater);
            });
          });
          _defineProperty(this, "reset", (recoilState) => {
            this.checkRefCount_INTERNAL();
            const store2 = this.getStore_INTERNAL();
            this._batch(() => {
              updateRetainCount$1(store2, recoilState.key, 1);
              setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);
            });
          });
          _defineProperty(this, "setUnvalidatedAtomValues_DEPRECATED", (values) => {
            this.checkRefCount_INTERNAL();
            const store2 = this.getStore_INTERNAL();
            batchUpdates$1(() => {
              for (const [k2, v2] of values.entries()) {
                updateRetainCount$1(store2, k2, 1);
                setUnvalidatedRecoilValue$1(store2, new AbstractRecoilValue$2(k2), v2);
              }
            });
          });
          this._batch = batch;
        }
      };
      var Recoil_Snapshot = {
        Snapshot,
        MutableSnapshot,
        freshSnapshot,
        cloneSnapshot
      };
      var Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;
      var Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;
      var Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;
      var Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;
      var Recoil_Snapshot$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        Snapshot: Recoil_Snapshot_1,
        MutableSnapshot: Recoil_Snapshot_2,
        freshSnapshot: Recoil_Snapshot_3,
        cloneSnapshot: Recoil_Snapshot_4
      });
      function unionSets(...sets) {
        const result = /* @__PURE__ */ new Set();
        for (const set of sets) {
          for (const value of set) {
            result.add(value);
          }
        }
        return result;
      }
      var Recoil_unionSets = unionSets;
      var {
        useRef: useRef4
      } = react;
      function useRefInitOnce(initialValue) {
        const ref = useRef4(initialValue);
        if (ref.current === initialValue && typeof initialValue === "function") {
          ref.current = initialValue();
        }
        return ref;
      }
      var Recoil_useRefInitOnce = useRefInitOnce;
      var {
        getNextTreeStateVersion: getNextTreeStateVersion$3,
        makeEmptyStoreState: makeEmptyStoreState$2
      } = Recoil_State;
      var {
        cleanUpNode: cleanUpNode$2,
        getDownstreamNodes: getDownstreamNodes$2,
        initializeNode: initializeNode$2,
        setNodeValue: setNodeValue$2,
        setUnvalidatedAtomValue_DEPRECATED: setUnvalidatedAtomValue_DEPRECATED$1
      } = Recoil_FunctionalCore;
      var {
        graph: graph$2
      } = Recoil_Graph;
      var {
        cloneGraph: cloneGraph$1
      } = Recoil_Graph;
      var {
        getNextStoreID: getNextStoreID$2
      } = Recoil_Keys;
      var {
        createMutableSource: createMutableSource$1,
        reactMode: reactMode$2
      } = Recoil_ReactMode;
      var {
        applyAtomValueWrites: applyAtomValueWrites$1
      } = Recoil_RecoilValueInterface;
      var {
        releaseScheduledRetainablesNow: releaseScheduledRetainablesNow$1
      } = Recoil_Retention;
      var {
        freshSnapshot: freshSnapshot$1
      } = Recoil_Snapshot$1;
      var {
        useCallback: useCallback2,
        useContext,
        useEffect: useEffect6,
        useMemo: useMemo5,
        useRef: useRef$1,
        useState: useState5
      } = react;
      function notInAContext() {
        throw Recoil_err("This component must be used inside a <RecoilRoot> component.");
      }
      var defaultStore = Object.freeze({
        storeID: getNextStoreID$2(),
        getState: notInAContext,
        replaceState: notInAContext,
        getGraph: notInAContext,
        subscribeToTransactions: notInAContext,
        addTransactionMetadata: notInAContext
      });
      var stateReplacerIsBeingExecuted = false;
      function startNextTreeIfNeeded(store2) {
        if (stateReplacerIsBeingExecuted) {
          throw Recoil_err("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");
        }
        const storeState = store2.getState();
        if (storeState.nextTree === null) {
          if (Recoil_gkx("recoil_memory_managament_2020") && Recoil_gkx("recoil_release_on_cascading_update_killswitch_2021")) {
            if (storeState.commitDepth > 0) {
              releaseScheduledRetainablesNow$1(store2);
            }
          }
          const version = storeState.currentTree.version;
          const nextVersion = getNextTreeStateVersion$3();
          storeState.nextTree = __spreadProps(__spreadValues({}, storeState.currentTree), {
            version: nextVersion,
            stateID: nextVersion,
            dirtyAtoms: /* @__PURE__ */ new Set(),
            transactionMetadata: {}
          });
          storeState.graphsByVersion.set(nextVersion, cloneGraph$1(Recoil_nullthrows(storeState.graphsByVersion.get(version))));
        }
      }
      var AppContext = react.createContext({
        current: defaultStore
      });
      var useStoreRef = () => useContext(AppContext);
      var MutableSourceContext = react.createContext(null);
      function useRecoilMutableSource() {
        const mutableSource = useContext(MutableSourceContext);
        if (mutableSource == null) {
          Recoil_expectationViolation("Attempted to use a Recoil hook outside of a <RecoilRoot>. <RecoilRoot> must be an ancestor of any component that uses Recoil hooks.");
        }
        return mutableSource;
      }
      function notifyComponents(store2, storeState, treeState) {
        const dependentNodes = getDownstreamNodes$2(store2, treeState, treeState.dirtyAtoms);
        for (const key of dependentNodes) {
          const comps = storeState.nodeToComponentSubscriptions.get(key);
          if (comps) {
            for (const [_subID, [_debugName, callback]] of comps) {
              callback(treeState);
            }
          }
        }
      }
      function sendEndOfBatchNotifications(store2) {
        const storeState = store2.getState();
        const treeState = storeState.currentTree;
        const dirtyAtoms = treeState.dirtyAtoms;
        if (dirtyAtoms.size) {
          for (const [key, subscriptions] of storeState.nodeTransactionSubscriptions) {
            if (dirtyAtoms.has(key)) {
              for (const [_, subscription] of subscriptions) {
                subscription(store2);
              }
            }
          }
          for (const [_, subscription] of storeState.transactionSubscriptions) {
            subscription(store2);
          }
          if (!reactMode$2().early || storeState.suspendedComponentResolvers.size > 0) {
            notifyComponents(store2, storeState, treeState);
            storeState.suspendedComponentResolvers.forEach((cb) => cb());
            storeState.suspendedComponentResolvers.clear();
          }
        }
        storeState.queuedComponentCallbacks_DEPRECATED.forEach((cb) => cb(treeState));
        storeState.queuedComponentCallbacks_DEPRECATED.splice(0, storeState.queuedComponentCallbacks_DEPRECATED.length);
      }
      function endBatch(store2) {
        const storeState = store2.getState();
        storeState.commitDepth++;
        try {
          const {
            nextTree
          } = storeState;
          if (nextTree == null) {
            return;
          }
          storeState.previousTree = storeState.currentTree;
          storeState.currentTree = nextTree;
          storeState.nextTree = null;
          sendEndOfBatchNotifications(store2);
          if (storeState.previousTree != null) {
            storeState.graphsByVersion.delete(storeState.previousTree.version);
          } else {
            Recoil_recoverableViolation("Ended batch with no previous state, which is unexpected", "recoil");
          }
          storeState.previousTree = null;
          if (Recoil_gkx("recoil_memory_managament_2020")) {
            if (nextTree == null) {
              releaseScheduledRetainablesNow$1(store2);
            }
          }
        } finally {
          storeState.commitDepth--;
        }
      }
      function Batcher({
        setNotifyBatcherOfChange
      }) {
        const storeRef = useStoreRef();
        const [, setState] = useState5([]);
        setNotifyBatcherOfChange(() => setState({}));
        useEffect6(() => {
          setNotifyBatcherOfChange(() => setState({}));
          return () => {
            setNotifyBatcherOfChange(() => {
            });
          };
        }, [setNotifyBatcherOfChange]);
        useEffect6(() => {
          Recoil_Queue.enqueueExecution("Batcher", () => {
            endBatch(storeRef.current);
          });
        });
        return null;
      }
      if (process.env.NODE_ENV !== "production") {
        if (typeof window !== "undefined" && !window.$recoilDebugStates) {
          window.$recoilDebugStates = [];
        }
      }
      function initialStoreState_DEPRECATED(store2, initializeState) {
        const initial = makeEmptyStoreState$2();
        initializeState({
          set: (atom2, value) => {
            const state = initial.currentTree;
            const writes = setNodeValue$2(store2, state, atom2.key, value);
            const writtenNodes = new Set(writes.keys());
            const nonvalidatedAtoms = state.nonvalidatedAtoms.clone();
            for (const n2 of writtenNodes) {
              nonvalidatedAtoms.delete(n2);
            }
            initial.currentTree = __spreadProps(__spreadValues({}, state), {
              dirtyAtoms: Recoil_unionSets(state.dirtyAtoms, writtenNodes),
              atomValues: applyAtomValueWrites$1(state.atomValues, writes),
              // NB: PLEASE un-export applyAtomValueWrites when deleting this code
              nonvalidatedAtoms
            });
          },
          setUnvalidatedAtomValues: (atomValues) => {
            atomValues.forEach((v2, k2) => {
              initial.currentTree = setUnvalidatedAtomValue_DEPRECATED$1(initial.currentTree, k2, v2);
            });
          }
        });
        return initial;
      }
      function initialStoreState(initializeState) {
        const snapshot = freshSnapshot$1(initializeState);
        const storeState = snapshot.getStore_INTERNAL().getState();
        snapshot.retain();
        storeState.nodeCleanupFunctions.forEach((cleanup) => cleanup());
        storeState.nodeCleanupFunctions.clear();
        return storeState;
      }
      var nextID = 0;
      function RecoilRoot_INTERNAL({
        initializeState_DEPRECATED,
        initializeState,
        store_INTERNAL: storeProp,
        // For use with React "context bridging"
        children
      }) {
        let storeStateRef;
        const getGraph = (version) => {
          const graphs = storeStateRef.current.graphsByVersion;
          if (graphs.has(version)) {
            return Recoil_nullthrows(graphs.get(version));
          }
          const newGraph = graph$2();
          graphs.set(version, newGraph);
          return newGraph;
        };
        const subscribeToTransactions = (callback, key) => {
          if (key == null) {
            const {
              transactionSubscriptions
            } = storeRef.current.getState();
            const id = nextID++;
            transactionSubscriptions.set(id, callback);
            return {
              release: () => {
                transactionSubscriptions.delete(id);
              }
            };
          } else {
            const {
              nodeTransactionSubscriptions
            } = storeRef.current.getState();
            if (!nodeTransactionSubscriptions.has(key)) {
              nodeTransactionSubscriptions.set(key, /* @__PURE__ */ new Map());
            }
            const id = nextID++;
            Recoil_nullthrows(nodeTransactionSubscriptions.get(key)).set(id, callback);
            return {
              release: () => {
                const subs = nodeTransactionSubscriptions.get(key);
                if (subs) {
                  subs.delete(id);
                  if (subs.size === 0) {
                    nodeTransactionSubscriptions.delete(key);
                  }
                }
              }
            };
          }
        };
        const addTransactionMetadata = (metadata) => {
          startNextTreeIfNeeded(storeRef.current);
          for (const k2 of Object.keys(metadata)) {
            Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k2] = metadata[k2];
          }
        };
        const replaceState = (replacer) => {
          startNextTreeIfNeeded(storeRef.current);
          const nextTree = Recoil_nullthrows(storeStateRef.current.nextTree);
          let replaced;
          try {
            stateReplacerIsBeingExecuted = true;
            replaced = replacer(nextTree);
          } finally {
            stateReplacerIsBeingExecuted = false;
          }
          if (replaced === nextTree) {
            return;
          }
          if (process.env.NODE_ENV !== "production") {
            if (typeof window !== "undefined") {
              window.$recoilDebugStates.push(replaced);
            }
          }
          storeStateRef.current.nextTree = replaced;
          if (reactMode$2().early) {
            notifyComponents(storeRef.current, storeStateRef.current, replaced);
          }
          Recoil_nullthrows(notifyBatcherOfChange.current)();
        };
        const notifyBatcherOfChange = useRef$1(null);
        const setNotifyBatcherOfChange = useCallback2((x2) => {
          notifyBatcherOfChange.current = x2;
        }, [notifyBatcherOfChange]);
        const storeRef = Recoil_useRefInitOnce(() => storeProp !== null && storeProp !== void 0 ? storeProp : {
          storeID: getNextStoreID$2(),
          getState: () => storeStateRef.current,
          replaceState,
          getGraph,
          subscribeToTransactions,
          addTransactionMetadata
        });
        if (storeProp != null) {
          storeRef.current = storeProp;
        }
        storeStateRef = Recoil_useRefInitOnce(() => initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(storeRef.current, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$2());
        const mutableSource = useMemo5(() => createMutableSource$1 === null || createMutableSource$1 === void 0 ? void 0 : createMutableSource$1(storeStateRef, () => storeStateRef.current.currentTree.version), [storeStateRef]);
        useEffect6(() => {
          const store2 = storeRef.current;
          for (const atomKey of new Set(store2.getState().knownAtoms)) {
            initializeNode$2(store2, atomKey, "get");
          }
          return () => {
            for (const atomKey of store2.getState().knownAtoms) {
              cleanUpNode$2(store2, atomKey);
            }
          };
        }, [storeRef]);
        return /* @__PURE__ */ react.createElement(AppContext.Provider, {
          value: storeRef
        }, /* @__PURE__ */ react.createElement(MutableSourceContext.Provider, {
          value: mutableSource
        }, /* @__PURE__ */ react.createElement(Batcher, {
          setNotifyBatcherOfChange
        }), children));
      }
      function RecoilRoot(props) {
        const _a2 = props, {
          override
        } = _a2, propsExceptOverride = __objRest(_a2, [
          "override"
        ]);
        const ancestorStoreRef = useStoreRef();
        if (override === false && ancestorStoreRef.current !== defaultStore) {
          return props.children;
        }
        return /* @__PURE__ */ react.createElement(RecoilRoot_INTERNAL, propsExceptOverride);
      }
      function useRecoilStoreID() {
        return useStoreRef().current.storeID;
      }
      var Recoil_RecoilRoot = {
        RecoilRoot,
        useStoreRef,
        useRecoilMutableSource,
        useRecoilStoreID,
        notifyComponents_FOR_TESTING: notifyComponents,
        sendEndOfBatchNotifications_FOR_TESTING: sendEndOfBatchNotifications
      };
      function shallowArrayEqual(a2, b2) {
        if (a2 === b2) {
          return true;
        }
        if (a2.length !== b2.length) {
          return false;
        }
        for (let i2 = 0, l2 = a2.length; i2 < l2; i2++) {
          if (a2[i2] !== b2[i2]) {
            return false;
          }
        }
        return true;
      }
      var Recoil_shallowArrayEqual = shallowArrayEqual;
      var {
        useEffect: useEffect$1,
        useRef: useRef$2
      } = react;
      function usePrevious(value) {
        const ref = useRef$2();
        useEffect$1(() => {
          ref.current = value;
        });
        return ref.current;
      }
      var Recoil_usePrevious = usePrevious;
      var {
        useStoreRef: useStoreRef$1
      } = Recoil_RecoilRoot;
      var {
        SUSPENSE_TIMEOUT_MS: SUSPENSE_TIMEOUT_MS$1
      } = Recoil_Retention;
      var {
        updateRetainCount: updateRetainCount$2
      } = Recoil_Retention;
      var {
        RetentionZone: RetentionZone$3
      } = Recoil_RetentionZone;
      var {
        useEffect: useEffect$2,
        useRef: useRef$3
      } = react;
      var {
        isSSR: isSSR$2
      } = Recoil_Environment;
      function useRetain(toRetain) {
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return;
        }
        return useRetain_ACTUAL(toRetain);
      }
      function useRetain_ACTUAL(toRetain) {
        const array = Array.isArray(toRetain) ? toRetain : [toRetain];
        const retainables = array.map((a2) => a2 instanceof RetentionZone$3 ? a2 : a2.key);
        const storeRef = useStoreRef$1();
        useEffect$2(() => {
          if (!Recoil_gkx("recoil_memory_managament_2020")) {
            return;
          }
          const store2 = storeRef.current;
          if (timeoutID.current && !isSSR$2) {
            window.clearTimeout(timeoutID.current);
            timeoutID.current = null;
          } else {
            for (const r2 of retainables) {
              updateRetainCount$2(store2, r2, 1);
            }
          }
          return () => {
            for (const r2 of retainables) {
              updateRetainCount$2(store2, r2, -1);
            }
          };
        }, [storeRef, ...retainables]);
        const timeoutID = useRef$3();
        const previousRetainables = Recoil_usePrevious(retainables);
        if (!isSSR$2 && (previousRetainables === void 0 || !Recoil_shallowArrayEqual(previousRetainables, retainables))) {
          const store2 = storeRef.current;
          for (const r2 of retainables) {
            updateRetainCount$2(store2, r2, 1);
          }
          if (previousRetainables) {
            for (const r2 of previousRetainables) {
              updateRetainCount$2(store2, r2, -1);
            }
          }
          if (timeoutID.current) {
            window.clearTimeout(timeoutID.current);
          }
          timeoutID.current = window.setTimeout(() => {
            timeoutID.current = null;
            for (const r2 of retainables) {
              updateRetainCount$2(store2, r2, -1);
            }
          }, SUSPENSE_TIMEOUT_MS$1);
        }
      }
      var Recoil_useRetain = useRetain;
      function useComponentName() {
        return "<component name not available>";
      }
      var Recoil_useComponentName = useComponentName;
      var {
        batchUpdates: batchUpdates$2
      } = Recoil_Batching;
      var {
        DEFAULT_VALUE: DEFAULT_VALUE$2
      } = Recoil_Node;
      var {
        currentRendererSupportsUseSyncExternalStore: currentRendererSupportsUseSyncExternalStore$1,
        reactMode: reactMode$3,
        useMutableSource: useMutableSource$1,
        useSyncExternalStore: useSyncExternalStore$1
      } = Recoil_ReactMode;
      var {
        useRecoilMutableSource: useRecoilMutableSource$1,
        useStoreRef: useStoreRef$2
      } = Recoil_RecoilRoot;
      var {
        isRecoilValue: isRecoilValue$2
      } = Recoil_RecoilValue$1;
      var {
        AbstractRecoilValue: AbstractRecoilValue$3,
        getRecoilValueAsLoadable: getRecoilValueAsLoadable$2,
        setRecoilValue: setRecoilValue$2,
        setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$2,
        subscribeToRecoilValue: subscribeToRecoilValue$1
      } = Recoil_RecoilValueInterface;
      var {
        useCallback: useCallback$1,
        useEffect: useEffect$3,
        useMemo: useMemo$1,
        useRef: useRef$4,
        useState: useState$1
      } = react;
      var {
        setByAddingToSet: setByAddingToSet$2
      } = Recoil_CopyOnWrite;
      function handleLoadable(loadable, recoilValue, storeRef) {
        if (loadable.state === "hasValue") {
          return loadable.contents;
        } else if (loadable.state === "loading") {
          const promise = new Promise((resolve) => {
            storeRef.current.getState().suspendedComponentResolvers.add(resolve);
          });
          throw promise;
        } else if (loadable.state === "hasError") {
          throw loadable.contents;
        } else {
          throw Recoil_err(`Invalid value of loadable atom "${recoilValue.key}"`);
        }
      }
      function validateRecoilValue(recoilValue, hookName) {
        if (!isRecoilValue$2(recoilValue)) {
          throw Recoil_err(`Invalid argument to ${hookName}: expected an atom or selector but got ${String(recoilValue)}`);
        }
      }
      function useRecoilInterface_DEPRECATED() {
        const componentName = Recoil_useComponentName();
        const storeRef = useStoreRef$2();
        const [, forceUpdate] = useState$1([]);
        const recoilValuesUsed = useRef$4(/* @__PURE__ */ new Set());
        recoilValuesUsed.current = /* @__PURE__ */ new Set();
        const previousSubscriptions = useRef$4(/* @__PURE__ */ new Set());
        const subscriptions = useRef$4(/* @__PURE__ */ new Map());
        const unsubscribeFrom = useCallback$1((key) => {
          const sub = subscriptions.current.get(key);
          if (sub) {
            sub.release();
            subscriptions.current.delete(key);
          }
        }, [subscriptions]);
        const updateState = useCallback$1((_state, key) => {
          if (subscriptions.current.has(key)) {
            forceUpdate([]);
          }
        }, []);
        useEffect$3(() => {
          const store2 = storeRef.current;
          Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach((key) => {
            if (subscriptions.current.has(key)) {
              Recoil_expectationViolation(`Double subscription to RecoilValue "${key}"`);
              return;
            }
            const sub = subscribeToRecoilValue$1(store2, new AbstractRecoilValue$3(key), (state2) => updateState(state2, key), componentName);
            subscriptions.current.set(key, sub);
            const state = store2.getState();
            if (state.nextTree) {
              store2.getState().queuedComponentCallbacks_DEPRECATED.push(() => {
                updateState(store2.getState(), key);
              });
            } else {
              updateState(store2.getState(), key);
            }
          });
          Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach((key) => {
            unsubscribeFrom(key);
          });
          previousSubscriptions.current = recoilValuesUsed.current;
        });
        useEffect$3(() => {
          const currentSubscriptions = subscriptions.current;
          Recoil_differenceSets(recoilValuesUsed.current, new Set(currentSubscriptions.keys())).forEach((key) => {
            const sub = subscribeToRecoilValue$1(storeRef.current, new AbstractRecoilValue$3(key), (state) => updateState(state, key), componentName);
            currentSubscriptions.set(key, sub);
          });
          return () => currentSubscriptions.forEach((_, key) => unsubscribeFrom(key));
        }, [componentName, storeRef, unsubscribeFrom, updateState]);
        return useMemo$1(() => {
          function useSetRecoilState2(recoilState) {
            if (process.env.NODE_ENV !== "production") {
              validateRecoilValue(recoilState, "useSetRecoilState");
            }
            return (newValueOrUpdater) => {
              setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
            };
          }
          function useResetRecoilState2(recoilState) {
            if (process.env.NODE_ENV !== "production") {
              validateRecoilValue(recoilState, "useResetRecoilState");
            }
            return () => setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);
          }
          function useRecoilValueLoadable2(recoilValue) {
            var _storeState$nextTree;
            if (process.env.NODE_ENV !== "production") {
              validateRecoilValue(recoilValue, "useRecoilValueLoadable");
            }
            if (!recoilValuesUsed.current.has(recoilValue.key)) {
              recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);
            }
            const storeState = storeRef.current.getState();
            return getRecoilValueAsLoadable$2(storeRef.current, recoilValue, reactMode$3().early ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : storeState.currentTree);
          }
          function useRecoilValue2(recoilValue) {
            if (process.env.NODE_ENV !== "production") {
              validateRecoilValue(recoilValue, "useRecoilValue");
            }
            const loadable = useRecoilValueLoadable2(recoilValue);
            return handleLoadable(loadable, recoilValue, storeRef);
          }
          function useRecoilState2(recoilState) {
            if (process.env.NODE_ENV !== "production") {
              validateRecoilValue(recoilState, "useRecoilState");
            }
            return [useRecoilValue2(recoilState), useSetRecoilState2(recoilState)];
          }
          function useRecoilStateLoadable2(recoilState) {
            if (process.env.NODE_ENV !== "production") {
              validateRecoilValue(recoilState, "useRecoilStateLoadable");
            }
            return [useRecoilValueLoadable2(recoilState), useSetRecoilState2(recoilState)];
          }
          return {
            getRecoilValue: useRecoilValue2,
            getRecoilValueLoadable: useRecoilValueLoadable2,
            getRecoilState: useRecoilState2,
            getRecoilStateLoadable: useRecoilStateLoadable2,
            getSetRecoilState: useSetRecoilState2,
            getResetRecoilState: useResetRecoilState2
          };
        }, [recoilValuesUsed, storeRef]);
      }
      var recoilComponentGetRecoilValueCount_FOR_TESTING = {
        current: 0
      };
      function useRecoilValueLoadable_SYNC_EXTERNAL_STORE(recoilValue) {
        const storeRef = useStoreRef$2();
        const componentName = Recoil_useComponentName();
        const getSnapshot = useCallback$1(() => {
          var _storeState$nextTree2;
          if (process.env.NODE_ENV !== "production") {
            recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
          }
          const store2 = storeRef.current;
          const storeState = store2.getState();
          const treeState = reactMode$3().early ? (_storeState$nextTree2 = storeState.nextTree) !== null && _storeState$nextTree2 !== void 0 ? _storeState$nextTree2 : storeState.currentTree : storeState.currentTree;
          const loadable = getRecoilValueAsLoadable$2(store2, recoilValue, treeState);
          return {
            loadable,
            key: recoilValue.key
          };
        }, [storeRef, recoilValue]);
        const memoizePreviousSnapshot = useCallback$1((getState) => {
          let prevState;
          return () => {
            var _prevState, _prevState2;
            const nextState = getState();
            if ((_prevState = prevState) !== null && _prevState !== void 0 && _prevState.loadable.is(nextState.loadable) && ((_prevState2 = prevState) === null || _prevState2 === void 0 ? void 0 : _prevState2.key) === nextState.key) {
              return prevState;
            }
            prevState = nextState;
            return nextState;
          };
        }, []);
        const getMemoizedSnapshot = useMemo$1(() => memoizePreviousSnapshot(getSnapshot), [getSnapshot, memoizePreviousSnapshot]);
        const subscribe = useCallback$1((notify) => {
          const store2 = storeRef.current;
          const subscription = subscribeToRecoilValue$1(store2, recoilValue, notify, componentName);
          return subscription.release;
        }, [storeRef, recoilValue, componentName]);
        return useSyncExternalStore$1(
          subscribe,
          getMemoizedSnapshot,
          // getSnapshot()
          getMemoizedSnapshot
          // getServerSnapshot() for SSR support
        ).loadable;
      }
      function useRecoilValueLoadable_MUTABLE_SOURCE(recoilValue) {
        const storeRef = useStoreRef$2();
        const getLoadable = useCallback$1(() => {
          var _storeState$nextTree3;
          const store2 = storeRef.current;
          const storeState = store2.getState();
          const treeState = reactMode$3().early ? (_storeState$nextTree3 = storeState.nextTree) !== null && _storeState$nextTree3 !== void 0 ? _storeState$nextTree3 : storeState.currentTree : storeState.currentTree;
          return getRecoilValueAsLoadable$2(store2, recoilValue, treeState);
        }, [storeRef, recoilValue]);
        const getLoadableWithTesting = useCallback$1(() => {
          if (process.env.NODE_ENV !== "production") {
            recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
          }
          return getLoadable();
        }, [getLoadable]);
        const componentName = Recoil_useComponentName();
        const subscribe = useCallback$1((_storeState, notify) => {
          const store2 = storeRef.current;
          const subscription = subscribeToRecoilValue$1(store2, recoilValue, () => {
            if (!Recoil_gkx("recoil_suppress_rerender_in_callback")) {
              return notify();
            }
            const newLoadable = getLoadable();
            if (!prevLoadableRef.current.is(newLoadable)) {
              notify();
            }
            prevLoadableRef.current = newLoadable;
          }, componentName);
          return subscription.release;
        }, [storeRef, recoilValue, componentName, getLoadable]);
        const source = useRecoilMutableSource$1();
        if (source == null) {
          throw Recoil_err("Recoil hooks must be used in components contained within a <RecoilRoot> component.");
        }
        const loadable = useMutableSource$1(source, getLoadableWithTesting, subscribe);
        const prevLoadableRef = useRef$4(loadable);
        useEffect$3(() => {
          prevLoadableRef.current = loadable;
        });
        return loadable;
      }
      function useRecoilValueLoadable_TRANSITION_SUPPORT(recoilValue) {
        const storeRef = useStoreRef$2();
        const componentName = Recoil_useComponentName();
        const getLoadable = useCallback$1(() => {
          var _storeState$nextTree4;
          if (process.env.NODE_ENV !== "production") {
            recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
          }
          const store2 = storeRef.current;
          const storeState = store2.getState();
          const treeState = reactMode$3().early ? (_storeState$nextTree4 = storeState.nextTree) !== null && _storeState$nextTree4 !== void 0 ? _storeState$nextTree4 : storeState.currentTree : storeState.currentTree;
          return getRecoilValueAsLoadable$2(store2, recoilValue, treeState);
        }, [storeRef, recoilValue]);
        const getState = useCallback$1(() => ({
          loadable: getLoadable(),
          key: recoilValue.key
        }), [getLoadable, recoilValue.key]);
        const updateState = useCallback$1((prevState) => {
          const nextState = getState();
          return prevState.loadable.is(nextState.loadable) && prevState.key === nextState.key ? prevState : nextState;
        }, [getState]);
        useEffect$3(() => {
          const subscription = subscribeToRecoilValue$1(storeRef.current, recoilValue, (_state) => {
            setState(updateState);
          }, componentName);
          setState(updateState);
          return subscription.release;
        }, [componentName, recoilValue, storeRef, updateState]);
        const [state, setState] = useState$1(getState);
        return state.key !== recoilValue.key ? getState().loadable : state.loadable;
      }
      function useRecoilValueLoadable_LEGACY(recoilValue) {
        const storeRef = useStoreRef$2();
        const [, forceUpdate] = useState$1([]);
        const componentName = Recoil_useComponentName();
        const getLoadable = useCallback$1(() => {
          var _storeState$nextTree5;
          if (process.env.NODE_ENV !== "production") {
            recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
          }
          const store2 = storeRef.current;
          const storeState = store2.getState();
          const treeState = reactMode$3().early ? (_storeState$nextTree5 = storeState.nextTree) !== null && _storeState$nextTree5 !== void 0 ? _storeState$nextTree5 : storeState.currentTree : storeState.currentTree;
          return getRecoilValueAsLoadable$2(store2, recoilValue, treeState);
        }, [storeRef, recoilValue]);
        const loadable = getLoadable();
        const prevLoadableRef = useRef$4(loadable);
        useEffect$3(() => {
          prevLoadableRef.current = loadable;
        });
        useEffect$3(() => {
          const store2 = storeRef.current;
          const storeState = store2.getState();
          const subscription = subscribeToRecoilValue$1(store2, recoilValue, (_state) => {
            var _prevLoadableRef$curr;
            if (!Recoil_gkx("recoil_suppress_rerender_in_callback")) {
              return forceUpdate([]);
            }
            const newLoadable = getLoadable();
            if (!((_prevLoadableRef$curr = prevLoadableRef.current) !== null && _prevLoadableRef$curr !== void 0 && _prevLoadableRef$curr.is(newLoadable))) {
              forceUpdate(newLoadable);
            }
            prevLoadableRef.current = newLoadable;
          }, componentName);
          if (storeState.nextTree) {
            store2.getState().queuedComponentCallbacks_DEPRECATED.push(() => {
              prevLoadableRef.current = null;
              forceUpdate([]);
            });
          } else {
            var _prevLoadableRef$curr2;
            if (!Recoil_gkx("recoil_suppress_rerender_in_callback")) {
              return forceUpdate([]);
            }
            const newLoadable = getLoadable();
            if (!((_prevLoadableRef$curr2 = prevLoadableRef.current) !== null && _prevLoadableRef$curr2 !== void 0 && _prevLoadableRef$curr2.is(newLoadable))) {
              forceUpdate(newLoadable);
            }
            prevLoadableRef.current = newLoadable;
          }
          return subscription.release;
        }, [componentName, getLoadable, recoilValue, storeRef]);
        return loadable;
      }
      function useRecoilValueLoadable(recoilValue) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilValue, "useRecoilValueLoadable");
        }
        if (Recoil_gkx("recoil_memory_managament_2020")) {
          Recoil_useRetain(recoilValue);
        }
        return {
          TRANSITION_SUPPORT: useRecoilValueLoadable_TRANSITION_SUPPORT,
          // Recoil will attemp to detect if `useSyncExternalStore()` is supported with
          // `reactMode()` before calling it.  However, sometimes the host React
          // environment supports it but uses additional React renderers (such as with
          // `react-three-fiber`) which do not.  While this is technically a user issue
          // by using a renderer with React 18+ that doesn't fully support React 18 we
          // don't want to break users if it can be avoided. As the current renderer can
          // change at runtime, we need to dynamically check and fallback if necessary.
          SYNC_EXTERNAL_STORE: currentRendererSupportsUseSyncExternalStore$1() ? useRecoilValueLoadable_SYNC_EXTERNAL_STORE : useRecoilValueLoadable_TRANSITION_SUPPORT,
          MUTABLE_SOURCE: useRecoilValueLoadable_MUTABLE_SOURCE,
          LEGACY: useRecoilValueLoadable_LEGACY
        }[reactMode$3().mode](recoilValue);
      }
      function useRecoilValue(recoilValue) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilValue, "useRecoilValue");
        }
        const storeRef = useStoreRef$2();
        const loadable = useRecoilValueLoadable(recoilValue);
        return handleLoadable(loadable, recoilValue, storeRef);
      }
      function useSetRecoilState(recoilState) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilState, "useSetRecoilState");
        }
        const storeRef = useStoreRef$2();
        return useCallback$1((newValueOrUpdater) => {
          setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
        }, [storeRef, recoilState]);
      }
      function useResetRecoilState(recoilState) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilState, "useResetRecoilState");
        }
        const storeRef = useStoreRef$2();
        return useCallback$1(() => {
          setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);
        }, [storeRef, recoilState]);
      }
      function useRecoilState(recoilState) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilState, "useRecoilState");
        }
        return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];
      }
      function useRecoilStateLoadable(recoilState) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilState, "useRecoilStateLoadable");
        }
        return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];
      }
      function useSetUnvalidatedAtomValues() {
        const storeRef = useStoreRef$2();
        return (values, transactionMetadata = {}) => {
          batchUpdates$2(() => {
            storeRef.current.addTransactionMetadata(transactionMetadata);
            values.forEach((value, key) => setUnvalidatedRecoilValue$2(storeRef.current, new AbstractRecoilValue$3(key), value));
          });
        };
      }
      function useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE(recoilValue) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilValue, "useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE");
          if (!reactMode$3().early) {
            Recoil_recoverableViolation("Attepmt to use a hook with UNSTABLE_TRANSITION_SUPPORT in a rendering mode incompatible with concurrent rendering.  Try enabling the recoil_sync_external_store or recoil_transition_support GKs.");
          }
        }
        if (Recoil_gkx("recoil_memory_managament_2020")) {
          Recoil_useRetain(recoilValue);
        }
        return useRecoilValueLoadable_TRANSITION_SUPPORT(recoilValue);
      }
      function useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(recoilValue) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilValue, "useRecoilValue_TRANSITION_SUPPORT_UNSTABLE");
        }
        const storeRef = useStoreRef$2();
        const loadable = useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE(recoilValue);
        return handleLoadable(loadable, recoilValue, storeRef);
      }
      function useRecoilState_TRANSITION_SUPPORT_UNSTABLE(recoilState) {
        if (process.env.NODE_ENV !== "production") {
          validateRecoilValue(recoilState, "useRecoilState_TRANSITION_SUPPORT_UNSTABLE");
        }
        return [useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(recoilState), useSetRecoilState(recoilState)];
      }
      var Recoil_Hooks = {
        recoilComponentGetRecoilValueCount_FOR_TESTING,
        useRecoilInterface: useRecoilInterface_DEPRECATED,
        useRecoilState,
        useRecoilStateLoadable,
        useRecoilValue,
        useRecoilValueLoadable,
        useResetRecoilState,
        useSetRecoilState,
        useSetUnvalidatedAtomValues,
        useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE,
        useRecoilValue_TRANSITION_SUPPORT_UNSTABLE,
        useRecoilState_TRANSITION_SUPPORT_UNSTABLE
      };
      function filterMap(map, callback) {
        const result = /* @__PURE__ */ new Map();
        for (const [key, value] of map) {
          if (callback(value, key)) {
            result.set(key, value);
          }
        }
        return result;
      }
      var Recoil_filterMap = filterMap;
      function filterSet(set, callback) {
        const result = /* @__PURE__ */ new Set();
        for (const value of set) {
          if (callback(value)) {
            result.add(value);
          }
        }
        return result;
      }
      var Recoil_filterSet = filterSet;
      function mergeMaps(...maps) {
        const result = /* @__PURE__ */ new Map();
        for (let i2 = 0; i2 < maps.length; i2++) {
          const iterator = maps[i2].keys();
          let nextKey;
          while (!(nextKey = iterator.next()).done) {
            result.set(nextKey.value, maps[i2].get(nextKey.value));
          }
        }
        return result;
      }
      var Recoil_mergeMaps = mergeMaps;
      var {
        batchUpdates: batchUpdates$3
      } = Recoil_Batching;
      var {
        DEFAULT_VALUE: DEFAULT_VALUE$3,
        getNode: getNode$4,
        nodes: nodes$1
      } = Recoil_Node;
      var {
        useStoreRef: useStoreRef$3
      } = Recoil_RecoilRoot;
      var {
        AbstractRecoilValue: AbstractRecoilValue$4,
        setRecoilValueLoadable: setRecoilValueLoadable$1
      } = Recoil_RecoilValueInterface;
      var {
        SUSPENSE_TIMEOUT_MS: SUSPENSE_TIMEOUT_MS$2
      } = Recoil_Retention;
      var {
        cloneSnapshot: cloneSnapshot$1
      } = Recoil_Snapshot$1;
      var {
        useCallback: useCallback$2,
        useEffect: useEffect$4,
        useRef: useRef$5,
        useState: useState$2
      } = react;
      var {
        isSSR: isSSR$3
      } = Recoil_Environment;
      function useTransactionSubscription(callback) {
        const storeRef = useStoreRef$3();
        useEffect$4(() => {
          const sub = storeRef.current.subscribeToTransactions(callback);
          return sub.release;
        }, [callback, storeRef]);
      }
      function externallyVisibleAtomValuesInState(state) {
        const atomValues = state.atomValues.toMap();
        const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v2, k2) => {
          const node = getNode$4(k2);
          const persistence = node.persistence_UNSTABLE;
          return persistence != null && persistence.type !== "none" && v2.state === "hasValue";
        }), (v2) => v2.contents);
        return Recoil_mergeMaps(state.nonvalidatedAtoms.toMap(), persistedAtomContentsValues);
      }
      function useTransactionObservation_DEPRECATED(callback) {
        useTransactionSubscription(useCallback$2((store2) => {
          let previousTree = store2.getState().previousTree;
          const currentTree = store2.getState().currentTree;
          if (!previousTree) {
            Recoil_recoverableViolation("Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil");
            previousTree = store2.getState().currentTree;
          }
          const atomValues = externallyVisibleAtomValuesInState(currentTree);
          const previousAtomValues = externallyVisibleAtomValuesInState(previousTree);
          const atomInfo = Recoil_mapMap(nodes$1, (node) => {
            var _node$persistence_UNS, _node$persistence_UNS2, _node$persistence_UNS3, _node$persistence_UNS4;
            return {
              persistence_UNSTABLE: {
                type: (_node$persistence_UNS = (_node$persistence_UNS2 = node.persistence_UNSTABLE) === null || _node$persistence_UNS2 === void 0 ? void 0 : _node$persistence_UNS2.type) !== null && _node$persistence_UNS !== void 0 ? _node$persistence_UNS : "none",
                backButton: (_node$persistence_UNS3 = (_node$persistence_UNS4 = node.persistence_UNSTABLE) === null || _node$persistence_UNS4 === void 0 ? void 0 : _node$persistence_UNS4.backButton) !== null && _node$persistence_UNS3 !== void 0 ? _node$persistence_UNS3 : false
              }
            };
          });
          const modifiedAtoms = Recoil_filterSet(currentTree.dirtyAtoms, (k2) => atomValues.has(k2) || previousAtomValues.has(k2));
          callback({
            atomValues,
            previousAtomValues,
            atomInfo,
            modifiedAtoms,
            transactionMetadata: __spreadValues({}, currentTree.transactionMetadata)
          });
        }, [callback]));
      }
      function useRecoilTransactionObserver(callback) {
        useTransactionSubscription(useCallback$2((store2) => {
          const snapshot = cloneSnapshot$1(store2, "latest");
          const previousSnapshot = cloneSnapshot$1(store2, "previous");
          callback({
            snapshot,
            previousSnapshot
          });
        }, [callback]));
      }
      function useRecoilSnapshot() {
        const storeRef = useStoreRef$3();
        const [snapshot, setSnapshot] = useState$2(() => cloneSnapshot$1(storeRef.current));
        const previousSnapshot = Recoil_usePrevious(snapshot);
        const timeoutID = useRef$5();
        const releaseRef = useRef$5();
        useTransactionSubscription(useCallback$2((store2) => setSnapshot(cloneSnapshot$1(store2)), []));
        useEffect$4(() => {
          const release = snapshot.retain();
          if (timeoutID.current && !isSSR$3) {
            var _releaseRef$current;
            window.clearTimeout(timeoutID.current);
            timeoutID.current = null;
            (_releaseRef$current = releaseRef.current) === null || _releaseRef$current === void 0 ? void 0 : _releaseRef$current.call(releaseRef);
            releaseRef.current = null;
          }
          return () => {
            window.setTimeout(release, 10);
          };
        }, [snapshot]);
        if (previousSnapshot !== snapshot && !isSSR$3) {
          if (timeoutID.current) {
            var _releaseRef$current2;
            window.clearTimeout(timeoutID.current);
            timeoutID.current = null;
            (_releaseRef$current2 = releaseRef.current) === null || _releaseRef$current2 === void 0 ? void 0 : _releaseRef$current2.call(releaseRef);
            releaseRef.current = null;
          }
          releaseRef.current = snapshot.retain();
          timeoutID.current = window.setTimeout(() => {
            var _releaseRef$current3;
            timeoutID.current = null;
            (_releaseRef$current3 = releaseRef.current) === null || _releaseRef$current3 === void 0 ? void 0 : _releaseRef$current3.call(releaseRef);
            releaseRef.current = null;
          }, SUSPENSE_TIMEOUT_MS$2);
        }
        return snapshot;
      }
      function gotoSnapshot(store2, snapshot) {
        var _storeState$nextTree;
        const storeState = store2.getState();
        const prev = (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree;
        const next = snapshot.getStore_INTERNAL().getState().currentTree;
        batchUpdates$3(() => {
          const keysToUpdate = /* @__PURE__ */ new Set();
          for (const keys of [prev.atomValues.keys(), next.atomValues.keys()]) {
            for (const key of keys) {
              var _prev$atomValues$get, _next$atomValues$get;
              if (((_prev$atomValues$get = prev.atomValues.get(key)) === null || _prev$atomValues$get === void 0 ? void 0 : _prev$atomValues$get.contents) !== ((_next$atomValues$get = next.atomValues.get(key)) === null || _next$atomValues$get === void 0 ? void 0 : _next$atomValues$get.contents) && getNode$4(key).shouldRestoreFromSnapshots) {
                keysToUpdate.add(key);
              }
            }
          }
          keysToUpdate.forEach((key) => {
            setRecoilValueLoadable$1(store2, new AbstractRecoilValue$4(key), next.atomValues.has(key) ? Recoil_nullthrows(next.atomValues.get(key)) : DEFAULT_VALUE$3);
          });
          store2.replaceState((state) => __spreadProps(__spreadValues({}, state), {
            stateID: snapshot.getID()
          }));
        });
      }
      function useGotoRecoilSnapshot() {
        const storeRef = useStoreRef$3();
        return useCallback$2((snapshot) => gotoSnapshot(storeRef.current, snapshot), [storeRef]);
      }
      var Recoil_SnapshotHooks = {
        useRecoilSnapshot,
        gotoSnapshot,
        useGotoRecoilSnapshot,
        useRecoilTransactionObserver,
        useTransactionObservation_DEPRECATED,
        useTransactionSubscription_DEPRECATED: useTransactionSubscription
      };
      var {
        peekNodeInfo: peekNodeInfo$2
      } = Recoil_FunctionalCore;
      var {
        useStoreRef: useStoreRef$4
      } = Recoil_RecoilRoot;
      function useGetRecoilValueInfo() {
        const storeRef = useStoreRef$4();
        return ({
          key
        }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);
      }
      var Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;
      var {
        reactMode: reactMode$4
      } = Recoil_ReactMode;
      var {
        RecoilRoot: RecoilRoot$1,
        useStoreRef: useStoreRef$5
      } = Recoil_RecoilRoot;
      var {
        useMemo: useMemo$2
      } = react;
      function useRecoilBridgeAcrossReactRoots() {
        if (reactMode$4().mode === "MUTABLE_SOURCE") {
          console.warn("Warning: There are known issues using useRecoilBridgeAcrossReactRoots() in recoil_mutable_source rendering mode.  Please consider upgrading to recoil_sync_external_store mode.");
        }
        const store2 = useStoreRef$5().current;
        return useMemo$2(() => {
          function RecoilBridge({
            children
          }) {
            return /* @__PURE__ */ react.createElement(RecoilRoot$1, {
              store_INTERNAL: store2
            }, children);
          }
          return RecoilBridge;
        }, [store2]);
      }
      var Recoil_useRecoilBridgeAcrossReactRoots = useRecoilBridgeAcrossReactRoots;
      var {
        loadableWithValue: loadableWithValue$1
      } = Recoil_Loadable$1;
      var {
        initializeNode: initializeNode$3
      } = Recoil_FunctionalCore;
      var {
        DEFAULT_VALUE: DEFAULT_VALUE$4,
        getNode: getNode$5
      } = Recoil_Node;
      var {
        copyTreeState: copyTreeState$1,
        getRecoilValueAsLoadable: getRecoilValueAsLoadable$3,
        invalidateDownstreams: invalidateDownstreams$1,
        writeLoadableToTreeState: writeLoadableToTreeState$1
      } = Recoil_RecoilValueInterface;
      function isAtom(recoilValue) {
        return getNode$5(recoilValue.key).nodeType === "atom";
      }
      var TransactionInterfaceImpl = class {
        constructor(store2, treeState) {
          _defineProperty(this, "_store", void 0);
          _defineProperty(this, "_treeState", void 0);
          _defineProperty(this, "_changes", void 0);
          _defineProperty(this, "get", (recoilValue) => {
            if (this._changes.has(recoilValue.key)) {
              return this._changes.get(recoilValue.key);
            }
            if (!isAtom(recoilValue)) {
              throw Recoil_err("Reading selectors within atomicUpdate is not supported");
            }
            const loadable = getRecoilValueAsLoadable$3(this._store, recoilValue, this._treeState);
            if (loadable.state === "hasValue") {
              return loadable.contents;
            } else if (loadable.state === "hasError") {
              throw loadable.contents;
            } else {
              throw Recoil_err(`Expected Recoil atom ${recoilValue.key} to have a value, but it is in a loading state.`);
            }
          });
          _defineProperty(this, "set", (recoilState, valueOrUpdater) => {
            if (!isAtom(recoilState)) {
              throw Recoil_err("Setting selectors within atomicUpdate is not supported");
            }
            if (typeof valueOrUpdater === "function") {
              const current = this.get(recoilState);
              this._changes.set(recoilState.key, valueOrUpdater(current));
            } else {
              initializeNode$3(this._store, recoilState.key, "set");
              this._changes.set(recoilState.key, valueOrUpdater);
            }
          });
          _defineProperty(this, "reset", (recoilState) => {
            this.set(recoilState, DEFAULT_VALUE$4);
          });
          this._store = store2;
          this._treeState = treeState;
          this._changes = /* @__PURE__ */ new Map();
        }
        // Allow destructing
        // eslint-disable-next-line fb-www/extra-arrow-initializer
        newTreeState_INTERNAL() {
          if (this._changes.size === 0) {
            return this._treeState;
          }
          const newState = copyTreeState$1(this._treeState);
          for (const [k2, v2] of this._changes) {
            writeLoadableToTreeState$1(newState, k2, loadableWithValue$1(v2));
          }
          invalidateDownstreams$1(this._store, newState);
          return newState;
        }
      };
      function atomicUpdater(store2) {
        return (fn) => {
          store2.replaceState((treeState) => {
            const changeset = new TransactionInterfaceImpl(store2, treeState);
            fn(changeset);
            return changeset.newTreeState_INTERNAL();
          });
        };
      }
      var Recoil_AtomicUpdates = {
        atomicUpdater
      };
      var Recoil_AtomicUpdates_1 = Recoil_AtomicUpdates.atomicUpdater;
      var Recoil_AtomicUpdates$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        atomicUpdater: Recoil_AtomicUpdates_1
      });
      function invariant(condition, message) {
        if (!condition) {
          throw new Error(message);
        }
      }
      var invariant_1 = invariant;
      var Recoil_invariant = invariant_1;
      var {
        atomicUpdater: atomicUpdater$1
      } = Recoil_AtomicUpdates$1;
      var {
        batchUpdates: batchUpdates$4
      } = Recoil_Batching;
      var {
        DEFAULT_VALUE: DEFAULT_VALUE$5
      } = Recoil_Node;
      var {
        useStoreRef: useStoreRef$6
      } = Recoil_RecoilRoot;
      var {
        refreshRecoilValue: refreshRecoilValue$1,
        setRecoilValue: setRecoilValue$3
      } = Recoil_RecoilValueInterface;
      var {
        cloneSnapshot: cloneSnapshot$2
      } = Recoil_Snapshot$1;
      var {
        gotoSnapshot: gotoSnapshot$1
      } = Recoil_SnapshotHooks;
      var {
        useCallback: useCallback$3
      } = react;
      var Sentinel = class {
      };
      var SENTINEL = new Sentinel();
      function recoilCallback(store2, fn, args, extraInterface) {
        let ret = SENTINEL;
        let releaseSnapshot;
        batchUpdates$4(() => {
          const errMsg = "useRecoilCallback() expects a function that returns a function: it accepts a function of the type (RecoilInterface) => (Args) => ReturnType and returns a callback function (Args) => ReturnType, where RecoilInterface is an object {snapshot, set, ...} and Args and ReturnType are the argument and return types of the callback you want to create.  Please see the docs at recoiljs.org for details.";
          if (typeof fn !== "function") {
            throw Recoil_err(errMsg);
          }
          const callbackInterface = Recoil_lazyProxy(__spreadProps(__spreadValues({}, extraInterface !== null && extraInterface !== void 0 ? extraInterface : {}), {
            // flowlint-line unclear-type:off
            set: (node, newValue) => setRecoilValue$3(store2, node, newValue),
            reset: (node) => setRecoilValue$3(store2, node, DEFAULT_VALUE$5),
            refresh: (node) => refreshRecoilValue$1(store2, node),
            gotoSnapshot: (snapshot) => gotoSnapshot$1(store2, snapshot),
            transact_UNSTABLE: (transaction) => atomicUpdater$1(store2)(transaction)
          }), {
            snapshot: () => {
              const snapshot = cloneSnapshot$2(store2);
              releaseSnapshot = snapshot.retain();
              return snapshot;
            }
          });
          const callback = fn(callbackInterface);
          if (typeof callback !== "function") {
            throw Recoil_err(errMsg);
          }
          ret = callback(...args);
        });
        !!(ret instanceof Sentinel) ? process.env.NODE_ENV !== "production" ? Recoil_invariant(false, "batchUpdates should return immediately") : Recoil_invariant(false) : void 0;
        if (Recoil_isPromise(ret)) {
          ret.finally(() => {
            var _releaseSnapshot;
            (_releaseSnapshot = releaseSnapshot) === null || _releaseSnapshot === void 0 ? void 0 : _releaseSnapshot();
          });
        } else {
          var _releaseSnapshot2;
          (_releaseSnapshot2 = releaseSnapshot) === null || _releaseSnapshot2 === void 0 ? void 0 : _releaseSnapshot2();
        }
        return ret;
      }
      function useRecoilCallback(fn, deps) {
        const storeRef = useStoreRef$6();
        return useCallback$3(
          // $FlowIssue[incompatible-call]
          (...args) => {
            return recoilCallback(storeRef.current, fn, args);
          },
          deps != null ? [...deps, storeRef] : void 0
          // eslint-disable-line fb-www/react-hooks-deps
        );
      }
      var Recoil_useRecoilCallback = {
        recoilCallback,
        useRecoilCallback
      };
      var {
        useStoreRef: useStoreRef$7
      } = Recoil_RecoilRoot;
      var {
        refreshRecoilValue: refreshRecoilValue$2
      } = Recoil_RecoilValueInterface;
      var {
        useCallback: useCallback$4
      } = react;
      function useRecoilRefresher(recoilValue) {
        const storeRef = useStoreRef$7();
        return useCallback$4(() => {
          const store2 = storeRef.current;
          refreshRecoilValue$2(store2, recoilValue);
        }, [recoilValue, storeRef]);
      }
      var Recoil_useRecoilRefresher = useRecoilRefresher;
      var {
        atomicUpdater: atomicUpdater$2
      } = Recoil_AtomicUpdates$1;
      var {
        useStoreRef: useStoreRef$8
      } = Recoil_RecoilRoot;
      var {
        useMemo: useMemo$3
      } = react;
      function useRecoilTransaction(fn, deps) {
        const storeRef = useStoreRef$8();
        return useMemo$3(
          () => (...args) => {
            const atomicUpdate = atomicUpdater$2(storeRef.current);
            atomicUpdate((transactionInterface) => {
              fn(transactionInterface)(...args);
            });
          },
          deps != null ? [...deps, storeRef] : void 0
          // eslint-disable-line fb-www/react-hooks-deps
        );
      }
      var Recoil_useRecoilTransaction = useRecoilTransaction;
      var WrappedValue = class {
        constructor(value) {
          _defineProperty(this, "value", void 0);
          this.value = value;
        }
      };
      var Recoil_Wrapper = {
        WrappedValue
      };
      var Recoil_Wrapper_1 = Recoil_Wrapper.WrappedValue;
      var Recoil_Wrapper$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        WrappedValue: Recoil_Wrapper_1
      });
      var {
        isFastRefreshEnabled: isFastRefreshEnabled$2
      } = Recoil_ReactMode;
      var ChangedPathError = class extends Error {
      };
      var TreeCache = class {
        // $FlowIssue[unclear-type]
        constructor(options) {
          var _options$onHit, _options$onSet, _options$mapNodeValue;
          _defineProperty(this, "_name", void 0);
          _defineProperty(this, "_numLeafs", void 0);
          _defineProperty(this, "_root", void 0);
          _defineProperty(this, "_onHit", void 0);
          _defineProperty(this, "_onSet", void 0);
          _defineProperty(this, "_mapNodeValue", void 0);
          this._name = options === null || options === void 0 ? void 0 : options.name;
          this._numLeafs = 0;
          this._root = null;
          this._onHit = (_options$onHit = options === null || options === void 0 ? void 0 : options.onHit) !== null && _options$onHit !== void 0 ? _options$onHit : () => {
          };
          this._onSet = (_options$onSet = options === null || options === void 0 ? void 0 : options.onSet) !== null && _options$onSet !== void 0 ? _options$onSet : () => {
          };
          this._mapNodeValue = (_options$mapNodeValue = options === null || options === void 0 ? void 0 : options.mapNodeValue) !== null && _options$mapNodeValue !== void 0 ? _options$mapNodeValue : (val) => val;
        }
        size() {
          return this._numLeafs;
        }
        // $FlowIssue[unclear-type]
        root() {
          return this._root;
        }
        get(getNodeValue, handlers) {
          var _this$getLeafNode;
          return (_this$getLeafNode = this.getLeafNode(getNodeValue, handlers)) === null || _this$getLeafNode === void 0 ? void 0 : _this$getLeafNode.value;
        }
        getLeafNode(getNodeValue, handlers) {
          if (this._root == null) {
            return void 0;
          }
          let node = this._root;
          while (node) {
            handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);
            if (node.type === "leaf") {
              this._onHit(node);
              return node;
            }
            const nodeValue = this._mapNodeValue(getNodeValue(node.nodeKey));
            node = node.branches.get(nodeValue);
          }
          return void 0;
        }
        set(route, value, handlers) {
          const addLeaf = () => {
            var _node2, _node3, _this$_root2, _handlers$onNodeVisit2;
            let node;
            let branchKey;
            for (const [nodeKey, nodeValue] of route) {
              var _node, _handlers$onNodeVisit, _this$_root;
              const root = this._root;
              if ((root === null || root === void 0 ? void 0 : root.type) === "leaf") {
                throw this.invalidCacheError();
              }
              const parent = node;
              node = parent ? parent.branches.get(branchKey) : root;
              node = (_node = node) !== null && _node !== void 0 ? _node : {
                type: "branch",
                nodeKey,
                parent,
                branches: /* @__PURE__ */ new Map(),
                branchKey
              };
              if (node.type !== "branch" || node.nodeKey !== nodeKey) {
                throw this.invalidCacheError();
              }
              parent === null || parent === void 0 ? void 0 : parent.branches.set(branchKey, node);
              handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit = handlers.onNodeVisit) === null || _handlers$onNodeVisit === void 0 ? void 0 : _handlers$onNodeVisit.call(handlers, node);
              branchKey = this._mapNodeValue(nodeValue);
              this._root = (_this$_root = this._root) !== null && _this$_root !== void 0 ? _this$_root : node;
            }
            const oldLeaf = node ? (_node2 = node) === null || _node2 === void 0 ? void 0 : _node2.branches.get(branchKey) : this._root;
            if (oldLeaf != null && (oldLeaf.type !== "leaf" || oldLeaf.branchKey !== branchKey)) {
              throw this.invalidCacheError();
            }
            const leafNode = {
              type: "leaf",
              value,
              parent: node,
              branchKey
            };
            (_node3 = node) === null || _node3 === void 0 ? void 0 : _node3.branches.set(branchKey, leafNode);
            this._root = (_this$_root2 = this._root) !== null && _this$_root2 !== void 0 ? _this$_root2 : leafNode;
            this._numLeafs++;
            this._onSet(leafNode);
            handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit2 = handlers.onNodeVisit) === null || _handlers$onNodeVisit2 === void 0 ? void 0 : _handlers$onNodeVisit2.call(handlers, leafNode);
          };
          try {
            addLeaf();
          } catch (error) {
            if (error instanceof ChangedPathError) {
              this.clear();
              addLeaf();
            } else {
              throw error;
            }
          }
        }
        // Returns true if leaf was actually deleted from the tree
        delete(leaf) {
          const root = this.root();
          if (!root) {
            return false;
          }
          if (leaf === root) {
            this._root = null;
            this._numLeafs = 0;
            return true;
          }
          let node = leaf.parent;
          let branchKey = leaf.branchKey;
          while (node) {
            var _node4;
            node.branches.delete(branchKey);
            if (node === root) {
              if (node.branches.size === 0) {
                this._root = null;
                this._numLeafs = 0;
              } else {
                this._numLeafs--;
              }
              return true;
            }
            if (node.branches.size > 0) {
              break;
            }
            branchKey = (_node4 = node) === null || _node4 === void 0 ? void 0 : _node4.branchKey;
            node = node.parent;
          }
          for (; node !== root; node = node.parent) {
            if (node == null) {
              return false;
            }
          }
          this._numLeafs--;
          return true;
        }
        clear() {
          this._numLeafs = 0;
          this._root = null;
        }
        invalidCacheError() {
          const CHANGED_PATH_ERROR_MESSAGE = isFastRefreshEnabled$2() ? "Possible Fast Refresh module reload detected.  This may also be caused by an selector returning inconsistent values. Resetting cache." : "Invalid cache values.  This happens when selectors do not return consistent values for the same input dependency values.  That may also be caused when using Fast Refresh to change a selector implementation.  Resetting cache.";
          Recoil_recoverableViolation(CHANGED_PATH_ERROR_MESSAGE + (this._name != null ? ` - ${this._name}` : ""));
          throw new ChangedPathError();
        }
      };
      var Recoil_TreeCache = {
        TreeCache
      };
      var Recoil_TreeCache_1 = Recoil_TreeCache.TreeCache;
      var Recoil_TreeCache$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        TreeCache: Recoil_TreeCache_1
      });
      var LRUCache = class {
        constructor(options) {
          var _options$mapKey;
          _defineProperty(this, "_maxSize", void 0);
          _defineProperty(this, "_size", void 0);
          _defineProperty(this, "_head", void 0);
          _defineProperty(this, "_tail", void 0);
          _defineProperty(this, "_map", void 0);
          _defineProperty(this, "_keyMapper", void 0);
          this._maxSize = options.maxSize;
          this._size = 0;
          this._head = null;
          this._tail = null;
          this._map = /* @__PURE__ */ new Map();
          this._keyMapper = (_options$mapKey = options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v2) => v2;
        }
        head() {
          return this._head;
        }
        tail() {
          return this._tail;
        }
        size() {
          return this._size;
        }
        maxSize() {
          return this._maxSize;
        }
        has(key) {
          return this._map.has(this._keyMapper(key));
        }
        get(key) {
          const mappedKey = this._keyMapper(key);
          const node = this._map.get(mappedKey);
          if (!node) {
            return void 0;
          }
          this.set(key, node.value);
          return node.value;
        }
        set(key, val) {
          const mappedKey = this._keyMapper(key);
          const existingNode = this._map.get(mappedKey);
          if (existingNode) {
            this.delete(key);
          }
          const head = this.head();
          const node = {
            key,
            right: head,
            left: null,
            value: val
          };
          if (head) {
            head.left = node;
          } else {
            this._tail = node;
          }
          this._map.set(mappedKey, node);
          this._head = node;
          this._size++;
          this._maybeDeleteLRU();
        }
        _maybeDeleteLRU() {
          if (this.size() > this.maxSize()) {
            this.deleteLru();
          }
        }
        deleteLru() {
          const tail = this.tail();
          if (tail) {
            this.delete(tail.key);
          }
        }
        delete(key) {
          const mappedKey = this._keyMapper(key);
          if (!this._size || !this._map.has(mappedKey)) {
            return;
          }
          const node = Recoil_nullthrows(this._map.get(mappedKey));
          const right = node.right;
          const left = node.left;
          if (right) {
            right.left = node.left;
          }
          if (left) {
            left.right = node.right;
          }
          if (node === this.head()) {
            this._head = right;
          }
          if (node === this.tail()) {
            this._tail = left;
          }
          this._map.delete(mappedKey);
          this._size--;
        }
        clear() {
          this._size = 0;
          this._head = null;
          this._tail = null;
          this._map = /* @__PURE__ */ new Map();
        }
      };
      var Recoil_LRUCache = {
        LRUCache
      };
      var Recoil_LRUCache_1 = Recoil_LRUCache.LRUCache;
      var Recoil_LRUCache$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        LRUCache: Recoil_LRUCache_1
      });
      var {
        LRUCache: LRUCache$1
      } = Recoil_LRUCache$1;
      var {
        TreeCache: TreeCache$1
      } = Recoil_TreeCache$1;
      function treeCacheLRU({
        name,
        maxSize,
        mapNodeValue = (v2) => v2
      }) {
        const lruCache = new LRUCache$1({
          maxSize
        });
        const cache = new TreeCache$1({
          name,
          mapNodeValue,
          onHit: (node) => {
            lruCache.set(node, true);
          },
          onSet: (node) => {
            const lruNode = lruCache.tail();
            lruCache.set(node, true);
            if (lruNode && cache.size() > maxSize) {
              cache.delete(lruNode.key);
            }
          }
        });
        return cache;
      }
      var Recoil_treeCacheLRU = treeCacheLRU;
      var TIME_WARNING_THRESHOLD_MS = 15;
      function stringify(x2, opt, key) {
        if (typeof x2 === "string" && !x2.includes('"') && !x2.includes("\\")) {
          return `"${x2}"`;
        }
        switch (typeof x2) {
          case "undefined":
            return "";
          case "boolean":
            return x2 ? "true" : "false";
          case "number":
          case "symbol":
            return String(x2);
          case "string":
            return JSON.stringify(x2);
          case "function":
            if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {
              throw Recoil_err("Attempt to serialize function in a Recoil cache key");
            }
            return `__FUNCTION(${x2.name})__`;
        }
        if (x2 === null) {
          return "null";
        }
        if (typeof x2 !== "object") {
          var _JSON$stringify;
          return (_JSON$stringify = JSON.stringify(x2)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : "";
        }
        if (Recoil_isPromise(x2)) {
          return "__PROMISE__";
        }
        if (Array.isArray(x2)) {
          return `[${x2.map((v2, i2) => stringify(v2, opt, i2.toString()))}]`;
        }
        if (typeof x2.toJSON === "function") {
          return stringify(x2.toJSON(key), opt, key);
        }
        if (x2 instanceof Map) {
          const obj = {};
          for (const [k2, v2] of x2) {
            obj[typeof k2 === "string" ? k2 : stringify(k2, opt)] = v2;
          }
          return stringify(obj, opt, key);
        }
        if (x2 instanceof Set) {
          return stringify(Array.from(x2).sort((a2, b2) => stringify(a2, opt).localeCompare(stringify(b2, opt))), opt, key);
        }
        if (Symbol !== void 0 && x2[Symbol.iterator] != null && typeof x2[Symbol.iterator] === "function") {
          return stringify(Array.from(x2), opt, key);
        }
        return `{${Object.keys(x2).filter((k2) => x2[k2] !== void 0).sort().map((k2) => `${stringify(k2, opt)}:${stringify(x2[k2], opt, k2)}`).join(",")}}`;
      }
      function stableStringify(x2, opt = {
        allowFunctions: false
      }) {
        if (process.env.NODE_ENV !== "production") {
          if (typeof window !== "undefined") {
            const startTime = window.performance ? window.performance.now() : 0;
            const str = stringify(x2, opt);
            const endTime = window.performance ? window.performance.now() : 0;
            if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {
              console.groupCollapsed(`Recoil: Spent ${endTime - startTime}ms computing a cache key`);
              console.warn(x2, str);
              console.groupEnd();
            }
            return str;
          }
        }
        return stringify(x2, opt);
      }
      var Recoil_stableStringify = stableStringify;
      var {
        TreeCache: TreeCache$2
      } = Recoil_TreeCache$1;
      var defaultPolicy = {
        equality: "reference",
        eviction: "keep-all",
        maxSize: Infinity
      };
      function treeCacheFromPolicy({
        equality = defaultPolicy.equality,
        eviction = defaultPolicy.eviction,
        maxSize = defaultPolicy.maxSize
      } = defaultPolicy, name) {
        const valueMapper = getValueMapper(equality);
        return getTreeCache(eviction, maxSize, valueMapper, name);
      }
      function getValueMapper(equality) {
        switch (equality) {
          case "reference":
            return (val) => val;
          case "value":
            return (val) => Recoil_stableStringify(val);
        }
        throw Recoil_err(`Unrecognized equality policy ${equality}`);
      }
      function getTreeCache(eviction, maxSize, mapNodeValue, name) {
        switch (eviction) {
          case "keep-all":
            return new TreeCache$2({
              name,
              mapNodeValue
            });
          case "lru":
            return Recoil_treeCacheLRU({
              name,
              maxSize: Recoil_nullthrows(maxSize),
              mapNodeValue
            });
          case "most-recent":
            return Recoil_treeCacheLRU({
              name,
              maxSize: 1,
              mapNodeValue
            });
        }
        throw Recoil_err(`Unrecognized eviction policy ${eviction}`);
      }
      var Recoil_treeCacheFromPolicy = treeCacheFromPolicy;
      function isNode3(object) {
        var _ownerDocument, _doc$defaultView;
        if (typeof window === "undefined") {
          return false;
        }
        const doc = object != null ? (_ownerDocument = object.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object : document;
        const defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;
        return !!(object != null && (typeof defaultView.Node === "function" ? object instanceof defaultView.Node : typeof object === "object" && typeof object.nodeType === "number" && typeof object.nodeName === "string"));
      }
      var Recoil_isNode = isNode3;
      var {
        isReactNative: isReactNative$1,
        isWindow: isWindow$1
      } = Recoil_Environment;
      function shouldNotBeFrozen(value) {
        if (value === null || typeof value !== "object") {
          return true;
        }
        switch (typeof value.$$typeof) {
          case "symbol":
            return true;
          case "number":
            return true;
        }
        if (value["@@__IMMUTABLE_ITERABLE__@@"] != null || value["@@__IMMUTABLE_KEYED__@@"] != null || value["@@__IMMUTABLE_INDEXED__@@"] != null || value["@@__IMMUTABLE_ORDERED__@@"] != null || value["@@__IMMUTABLE_RECORD__@@"] != null) {
          return true;
        }
        if (Recoil_isNode(value)) {
          return true;
        }
        if (Recoil_isPromise(value)) {
          return true;
        }
        if (value instanceof Error) {
          return true;
        }
        if (ArrayBuffer.isView(value)) {
          return true;
        }
        if (!isReactNative$1 && isWindow$1(value)) {
          return true;
        }
        return false;
      }
      function deepFreezeValue(value) {
        if (typeof value !== "object" || shouldNotBeFrozen(value)) {
          return;
        }
        Object.freeze(value);
        for (const key in value) {
          if (Object.prototype.hasOwnProperty.call(value, key)) {
            const prop = value[key];
            if (typeof prop === "object" && prop != null && !Object.isFrozen(prop)) {
              deepFreezeValue(prop);
            }
          }
        }
        Object.seal(value);
      }
      var Recoil_deepFreezeValue = deepFreezeValue;
      function startPerfBlock(_id) {
        return () => null;
      }
      var Recoil_PerformanceTimings = {
        startPerfBlock
      };
      var {
        isLoadable: isLoadable$1,
        loadableWithError: loadableWithError$1,
        loadableWithPromise: loadableWithPromise$1,
        loadableWithValue: loadableWithValue$2
      } = Recoil_Loadable$1;
      var {
        WrappedValue: WrappedValue$1
      } = Recoil_Wrapper$1;
      var {
        getNodeLoadable: getNodeLoadable$2,
        peekNodeLoadable: peekNodeLoadable$1,
        setNodeValue: setNodeValue$3
      } = Recoil_FunctionalCore;
      var {
        saveDepsToStore: saveDepsToStore$1
      } = Recoil_Graph;
      var {
        DEFAULT_VALUE: DEFAULT_VALUE$6,
        getConfigDeletionHandler: getConfigDeletionHandler$1,
        getNode: getNode$6,
        registerNode: registerNode$1
      } = Recoil_Node;
      var {
        isRecoilValue: isRecoilValue$3
      } = Recoil_RecoilValue$1;
      var {
        markRecoilValueModified: markRecoilValueModified$1
      } = Recoil_RecoilValueInterface;
      var {
        retainedByOptionWithDefault: retainedByOptionWithDefault$1
      } = Recoil_Retention;
      var {
        recoilCallback: recoilCallback$1
      } = Recoil_useRecoilCallback;
      var {
        startPerfBlock: startPerfBlock$1
      } = Recoil_PerformanceTimings;
      var Canceled = class {
      };
      var CANCELED = new Canceled();
      var dependencyStack = [];
      var waitingStores = /* @__PURE__ */ new Map();
      var getNewExecutionID = (() => {
        let executionID = 0;
        return () => executionID++;
      })();
      function selector(options) {
        let recoilValue = null;
        const {
          key,
          get,
          cachePolicy_UNSTABLE: cachePolicy
        } = options;
        const set = options.set != null ? options.set : void 0;
        if (process.env.NODE_ENV !== "production") {
          if (typeof key !== "string") {
            throw Recoil_err("A key option with a unique string value must be provided when creating a selector.");
          }
          if (typeof get !== "function") {
            throw Recoil_err("Selectors must specify a get callback option to get the selector value.");
          }
        }
        const discoveredDependencyNodeKeys = /* @__PURE__ */ new Set();
        const cache = Recoil_treeCacheFromPolicy(cachePolicy !== null && cachePolicy !== void 0 ? cachePolicy : {
          equality: "reference",
          eviction: "keep-all"
        }, key);
        const retainedBy = retainedByOptionWithDefault$1(options.retainedBy_UNSTABLE);
        const executionInfoMap = /* @__PURE__ */ new Map();
        let liveStoresCount = 0;
        function selectorIsLive() {
          return !Recoil_gkx("recoil_memory_managament_2020") || liveStoresCount > 0;
        }
        function selectorInit(store2) {
          store2.getState().knownSelectors.add(key);
          liveStoresCount++;
          return () => {
            liveStoresCount--;
          };
        }
        function selectorShouldDeleteConfigOnRelease() {
          return getConfigDeletionHandler$1(key) !== void 0 && !selectorIsLive();
        }
        function resolveAsync(store2, state, executionID, loadable, depValues) {
          setCache(state, loadable, depValues);
          notifyStoresOfResolvedAsync(store2, executionID);
        }
        function notifyStoresOfResolvedAsync(store2, executionID) {
          if (isLatestExecution(store2, executionID)) {
            clearExecutionInfo(store2);
          }
          notifyWaitingStores(executionID, true);
        }
        function notifyStoresOfNewAsyncDep(store2, executionID) {
          if (isLatestExecution(store2, executionID)) {
            const executionInfo = Recoil_nullthrows(getExecutionInfo(store2));
            executionInfo.stateVersions.clear();
            notifyWaitingStores(executionID, false);
          }
        }
        function notifyWaitingStores(executionID, clearWaitlist) {
          const stores = waitingStores.get(executionID);
          if (stores != null) {
            for (const waitingStore of stores) {
              markRecoilValueModified$1(waitingStore, Recoil_nullthrows(recoilValue));
            }
            if (clearWaitlist) {
              waitingStores.delete(executionID);
            }
          }
        }
        function markStoreWaitingForResolvedAsync(store2, executionID) {
          let stores = waitingStores.get(executionID);
          if (stores == null) {
            waitingStores.set(executionID, stores = /* @__PURE__ */ new Set());
          }
          stores.add(store2);
        }
        function wrapResultPromise(store2, promise, state, depValues, executionID, loadingDepsState) {
          return promise.then((value) => {
            if (!selectorIsLive()) {
              clearExecutionInfo(store2);
              throw CANCELED;
            }
            const loadable = loadableWithValue$2(value);
            resolveAsync(store2, state, executionID, loadable, depValues);
            return value;
          }).catch((errorOrPromise) => {
            if (!selectorIsLive()) {
              clearExecutionInfo(store2);
              throw CANCELED;
            }
            if (Recoil_isPromise(errorOrPromise)) {
              return wrapPendingDependencyPromise(store2, errorOrPromise, state, depValues, executionID, loadingDepsState);
            }
            const loadable = loadableWithError$1(errorOrPromise);
            resolveAsync(store2, state, executionID, loadable, depValues);
            throw errorOrPromise;
          });
        }
        function wrapPendingDependencyPromise(store2, promise, state, existingDeps, executionID, loadingDepsState) {
          return promise.then((resolvedDep) => {
            if (!selectorIsLive()) {
              clearExecutionInfo(store2);
              throw CANCELED;
            }
            if (loadingDepsState.loadingDepKey != null && loadingDepsState.loadingDepPromise === promise) {
              state.atomValues.set(loadingDepsState.loadingDepKey, loadableWithValue$2(resolvedDep));
            } else {
              store2.getState().knownSelectors.forEach((nodeKey) => {
                state.atomValues.delete(nodeKey);
              });
            }
            const cachedLoadable = getLoadableFromCacheAndUpdateDeps(store2, state);
            if (cachedLoadable && cachedLoadable.state !== "loading") {
              if (isLatestExecution(store2, executionID) || getExecutionInfo(store2) == null) {
                notifyStoresOfResolvedAsync(store2, executionID);
              }
              if (cachedLoadable.state === "hasValue") {
                return cachedLoadable.contents;
              } else {
                throw cachedLoadable.contents;
              }
            }
            if (!isLatestExecution(store2, executionID)) {
              const executionInfo = getInProgressExecutionInfo(store2, state);
              if (executionInfo != null) {
                return executionInfo.loadingLoadable.contents;
              }
            }
            const [loadable, depValues] = evaluateSelectorGetter(store2, state, executionID);
            if (loadable.state !== "loading") {
              resolveAsync(store2, state, executionID, loadable, depValues);
            }
            if (loadable.state === "hasError") {
              throw loadable.contents;
            }
            return loadable.contents;
          }).catch((error) => {
            if (error instanceof Canceled) {
              throw CANCELED;
            }
            if (!selectorIsLive()) {
              clearExecutionInfo(store2);
              throw CANCELED;
            }
            const loadable = loadableWithError$1(error);
            resolveAsync(store2, state, executionID, loadable, existingDeps);
            throw error;
          });
        }
        function updateDeps(store2, state, deps, executionID) {
          var _store$getState, _store$getState$curre, _store$getState2, _store$getState2$next;
          if (isLatestExecution(store2, executionID) || state.version === ((_store$getState = store2.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$curre = _store$getState.currentTree) === null || _store$getState$curre === void 0 ? void 0 : _store$getState$curre.version) || state.version === ((_store$getState2 = store2.getState()) === null || _store$getState2 === void 0 ? void 0 : (_store$getState2$next = _store$getState2.nextTree) === null || _store$getState2$next === void 0 ? void 0 : _store$getState2$next.version)) {
            var _store$getState$nextT, _store$getState3, _store$getState3$next;
            saveDepsToStore$1(key, deps, store2, (_store$getState$nextT = (_store$getState3 = store2.getState()) === null || _store$getState3 === void 0 ? void 0 : (_store$getState3$next = _store$getState3.nextTree) === null || _store$getState3$next === void 0 ? void 0 : _store$getState3$next.version) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store2.getState().currentTree.version);
          }
          for (const nodeKey of deps) {
            discoveredDependencyNodeKeys.add(nodeKey);
          }
        }
        function evaluateSelectorGetter(store2, state, executionID) {
          const endPerfBlock = startPerfBlock$1(key);
          let duringSynchronousExecution = true;
          let duringAsynchronousExecution = true;
          const finishEvaluation = () => {
            endPerfBlock();
            duringAsynchronousExecution = false;
          };
          let result;
          let resultIsError = false;
          let loadable;
          const loadingDepsState = {
            loadingDepKey: null,
            loadingDepPromise: null
          };
          const depValues = /* @__PURE__ */ new Map();
          function getRecoilValue({
            key: depKey
          }) {
            const depLoadable = getNodeLoadable$2(store2, state, depKey);
            depValues.set(depKey, depLoadable);
            if (!duringSynchronousExecution) {
              updateDeps(store2, state, new Set(depValues.keys()), executionID);
              notifyStoresOfNewAsyncDep(store2, executionID);
            }
            switch (depLoadable.state) {
              case "hasValue":
                return depLoadable.contents;
              case "hasError":
                throw depLoadable.contents;
              case "loading":
                loadingDepsState.loadingDepKey = depKey;
                loadingDepsState.loadingDepPromise = depLoadable.contents;
                throw depLoadable.contents;
            }
            throw Recoil_err("Invalid Loadable state");
          }
          const getCallback = (fn) => {
            return (...args) => {
              if (duringAsynchronousExecution) {
                throw Recoil_err("Callbacks from getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can work with Recoil state without a subscription.");
              }
              !(recoilValue != null) ? process.env.NODE_ENV !== "production" ? Recoil_invariant(false, "Recoil Value can never be null") : Recoil_invariant(false) : void 0;
              return recoilCallback$1(
                store2,
                fn,
                args,
                {
                  node: recoilValue
                }
                // flowlint-line unclear-type:off
              );
            };
          };
          try {
            result = get({
              get: getRecoilValue,
              getCallback
            });
            result = isRecoilValue$3(result) ? getRecoilValue(result) : result;
            if (isLoadable$1(result)) {
              if (result.state === "hasError") {
                resultIsError = true;
              }
              result = result.contents;
            }
            if (Recoil_isPromise(result)) {
              result = wrapResultPromise(store2, result, state, depValues, executionID, loadingDepsState).finally(finishEvaluation);
            } else {
              finishEvaluation();
            }
            result = result instanceof WrappedValue$1 ? result.value : result;
          } catch (errorOrDepPromise) {
            result = errorOrDepPromise;
            if (Recoil_isPromise(result)) {
              result = wrapPendingDependencyPromise(store2, result, state, depValues, executionID, loadingDepsState).finally(finishEvaluation);
            } else {
              resultIsError = true;
              finishEvaluation();
            }
          }
          if (resultIsError) {
            loadable = loadableWithError$1(result);
          } else if (Recoil_isPromise(result)) {
            loadable = loadableWithPromise$1(result);
          } else {
            loadable = loadableWithValue$2(result);
          }
          duringSynchronousExecution = false;
          updateExecutionInfoDepValues(store2, executionID, depValues);
          updateDeps(store2, state, new Set(depValues.keys()), executionID);
          return [loadable, depValues];
        }
        function getLoadableFromCacheAndUpdateDeps(store2, state) {
          let cachedLoadable = state.atomValues.get(key);
          if (cachedLoadable != null) {
            return cachedLoadable;
          }
          const depsAfterCacheLookup = /* @__PURE__ */ new Set();
          try {
            cachedLoadable = cache.get((nodeKey) => {
              !(typeof nodeKey === "string") ? process.env.NODE_ENV !== "production" ? Recoil_invariant(false, "Cache nodeKey is type string") : Recoil_invariant(false) : void 0;
              return getNodeLoadable$2(store2, state, nodeKey).contents;
            }, {
              onNodeVisit: (node) => {
                if (node.type === "branch" && node.nodeKey !== key) {
                  depsAfterCacheLookup.add(node.nodeKey);
                }
              }
            });
          } catch (error) {
            throw Recoil_err(`Problem with cache lookup for selector "${key}": ${error.message}`);
          }
          if (cachedLoadable) {
            var _getExecutionInfo;
            state.atomValues.set(key, cachedLoadable);
            updateDeps(store2, state, depsAfterCacheLookup, (_getExecutionInfo = getExecutionInfo(store2)) === null || _getExecutionInfo === void 0 ? void 0 : _getExecutionInfo.executionID);
          }
          return cachedLoadable;
        }
        function getSelectorLoadableAndUpdateDeps(store2, state) {
          const cachedVal = getLoadableFromCacheAndUpdateDeps(store2, state);
          if (cachedVal != null) {
            clearExecutionInfo(store2);
            return cachedVal;
          }
          const inProgressExecutionInfo = getInProgressExecutionInfo(store2, state);
          if (inProgressExecutionInfo != null) {
            var _inProgressExecutionI;
            if (((_inProgressExecutionI = inProgressExecutionInfo.loadingLoadable) === null || _inProgressExecutionI === void 0 ? void 0 : _inProgressExecutionI.state) === "loading") {
              markStoreWaitingForResolvedAsync(store2, inProgressExecutionInfo.executionID);
            }
            return inProgressExecutionInfo.loadingLoadable;
          }
          const newExecutionID = getNewExecutionID();
          const [loadable, newDepValues] = evaluateSelectorGetter(store2, state, newExecutionID);
          if (loadable.state === "loading") {
            setExecutionInfo(store2, newExecutionID, loadable, newDepValues, state);
            markStoreWaitingForResolvedAsync(store2, newExecutionID);
          } else {
            clearExecutionInfo(store2);
            setCache(state, loadable, newDepValues);
          }
          return loadable;
        }
        function getInProgressExecutionInfo(store2, state) {
          const pendingExecutions = Recoil_concatIterables([executionInfoMap.has(store2) ? [Recoil_nullthrows(executionInfoMap.get(store2))] : [], Recoil_mapIterable(Recoil_filterIterable(executionInfoMap, ([s2]) => s2 !== store2), ([, execInfo]) => execInfo)]);
          function anyDepChanged(execDepValues) {
            for (const [depKey, execLoadable] of execDepValues) {
              if (!getNodeLoadable$2(store2, state, depKey).is(execLoadable)) {
                return true;
              }
            }
            return false;
          }
          for (const execInfo of pendingExecutions) {
            if (
              // If this execution was already checked to be valid with this version
              // of state, then let's use it!
              execInfo.stateVersions.get(state.version) || // If the deps for the execution match our current state, then it's valid
              !anyDepChanged(execInfo.depValuesDiscoveredSoFarDuringAsyncWork)
            ) {
              execInfo.stateVersions.set(state.version, true);
              return execInfo;
            } else {
              execInfo.stateVersions.set(state.version, false);
            }
          }
          return void 0;
        }
        function getExecutionInfo(store2) {
          return executionInfoMap.get(store2);
        }
        function setExecutionInfo(store2, newExecutionID, loadable, depValues, state) {
          executionInfoMap.set(store2, {
            depValuesDiscoveredSoFarDuringAsyncWork: depValues,
            executionID: newExecutionID,
            loadingLoadable: loadable,
            stateVersions: /* @__PURE__ */ new Map([[state.version, true]])
          });
        }
        function updateExecutionInfoDepValues(store2, executionID, depValues) {
          if (isLatestExecution(store2, executionID)) {
            const executionInfo = getExecutionInfo(store2);
            if (executionInfo != null) {
              executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;
            }
          }
        }
        function clearExecutionInfo(store2) {
          executionInfoMap.delete(store2);
        }
        function isLatestExecution(store2, executionID) {
          var _getExecutionInfo2;
          return executionID === ((_getExecutionInfo2 = getExecutionInfo(store2)) === null || _getExecutionInfo2 === void 0 ? void 0 : _getExecutionInfo2.executionID);
        }
        function depValuesToDepRoute(depValues) {
          return Array.from(depValues.entries()).map(([depKey, valLoadable]) => [depKey, valLoadable.contents]);
        }
        function setCache(state, loadable, depValues) {
          if (process.env.NODE_ENV !== "production") {
            if (loadable.state !== "loading" && Boolean(options.dangerouslyAllowMutability) === false) {
              Recoil_deepFreezeValue(loadable.contents);
            }
          }
          state.atomValues.set(key, loadable);
          try {
            cache.set(depValuesToDepRoute(depValues), loadable);
          } catch (error) {
            throw Recoil_err(`Problem with setting cache for selector "${key}": ${error.message}`);
          }
        }
        function detectCircularDependencies(fn) {
          if (dependencyStack.includes(key)) {
            const message = `Recoil selector has circular dependencies: ${dependencyStack.slice(dependencyStack.indexOf(key)).join(" \u2192 ")}`;
            return loadableWithError$1(Recoil_err(message));
          }
          dependencyStack.push(key);
          try {
            return fn();
          } finally {
            dependencyStack.pop();
          }
        }
        function selectorPeek(store2, state) {
          const cachedLoadable = state.atomValues.get(key);
          if (cachedLoadable != null) {
            return cachedLoadable;
          }
          return cache.get((nodeKey) => {
            var _peekNodeLoadable;
            !(typeof nodeKey === "string") ? process.env.NODE_ENV !== "production" ? Recoil_invariant(false, "Cache nodeKey is type string") : Recoil_invariant(false) : void 0;
            return (_peekNodeLoadable = peekNodeLoadable$1(store2, state, nodeKey)) === null || _peekNodeLoadable === void 0 ? void 0 : _peekNodeLoadable.contents;
          });
        }
        function selectorGet(store2, state) {
          return detectCircularDependencies(() => getSelectorLoadableAndUpdateDeps(store2, state));
        }
        function invalidateSelector(state) {
          state.atomValues.delete(key);
        }
        function clearSelectorCache(store2, treeState) {
          !(recoilValue != null) ? process.env.NODE_ENV !== "production" ? Recoil_invariant(false, "Recoil Value can never be null") : Recoil_invariant(false) : void 0;
          for (const nodeKey of discoveredDependencyNodeKeys) {
            var _node$clearCache;
            const node = getNode$6(nodeKey);
            (_node$clearCache = node.clearCache) === null || _node$clearCache === void 0 ? void 0 : _node$clearCache.call(node, store2, treeState);
          }
          discoveredDependencyNodeKeys.clear();
          invalidateSelector(treeState);
          cache.clear();
          markRecoilValueModified$1(store2, recoilValue);
        }
        if (set != null) {
          const selectorSet = (store2, state, newValue) => {
            let syncSelectorSetFinished = false;
            const writes = /* @__PURE__ */ new Map();
            function getRecoilValue({
              key: depKey
            }) {
              if (syncSelectorSetFinished) {
                throw Recoil_err("Recoil: Async selector sets are not currently supported.");
              }
              const loadable = getNodeLoadable$2(store2, state, depKey);
              if (loadable.state === "hasValue") {
                return loadable.contents;
              } else if (loadable.state === "loading") {
                const msg = `Getting value of asynchronous atom or selector "${depKey}" in a pending state while setting selector "${key}" is not yet supported.`;
                Recoil_recoverableViolation(msg);
                throw Recoil_err(msg);
              } else {
                throw loadable.contents;
              }
            }
            function setRecoilState(recoilState, valueOrUpdater) {
              if (syncSelectorSetFinished) {
                const msg = "Recoil: Async selector sets are not currently supported.";
                Recoil_recoverableViolation(msg);
                throw Recoil_err(msg);
              }
              const setValue = typeof valueOrUpdater === "function" ? (
                // cast to any because we can't restrict type S from being a function itself without losing support for opaque types
                // flowlint-next-line unclear-type:off
                valueOrUpdater(getRecoilValue(recoilState))
              ) : valueOrUpdater;
              const upstreamWrites = setNodeValue$3(store2, state, recoilState.key, setValue);
              upstreamWrites.forEach((v2, k2) => writes.set(k2, v2));
            }
            function resetRecoilState(recoilState) {
              setRecoilState(recoilState, DEFAULT_VALUE$6);
            }
            const ret = set({
              set: setRecoilState,
              get: getRecoilValue,
              reset: resetRecoilState
            }, newValue);
            if (ret !== void 0) {
              throw Recoil_isPromise(ret) ? Recoil_err("Recoil: Async selector sets are not currently supported.") : Recoil_err("Recoil: selector set should be a void function.");
            }
            syncSelectorSetFinished = true;
            return writes;
          };
          return recoilValue = registerNode$1({
            key,
            nodeType: "selector",
            peek: selectorPeek,
            get: selectorGet,
            set: selectorSet,
            init: selectorInit,
            invalidate: invalidateSelector,
            clearCache: clearSelectorCache,
            shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
            dangerouslyAllowMutability: options.dangerouslyAllowMutability,
            shouldRestoreFromSnapshots: false,
            retainedBy
          });
        } else {
          return recoilValue = registerNode$1({
            key,
            nodeType: "selector",
            peek: selectorPeek,
            get: selectorGet,
            init: selectorInit,
            invalidate: invalidateSelector,
            clearCache: clearSelectorCache,
            shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
            dangerouslyAllowMutability: options.dangerouslyAllowMutability,
            shouldRestoreFromSnapshots: false,
            retainedBy
          });
        }
      }
      selector.value = (value) => new WrappedValue$1(value);
      var Recoil_selector = selector;
      var {
        isLoadable: isLoadable$2,
        loadableWithError: loadableWithError$2,
        loadableWithPromise: loadableWithPromise$2,
        loadableWithValue: loadableWithValue$3
      } = Recoil_Loadable$1;
      var {
        WrappedValue: WrappedValue$2
      } = Recoil_Wrapper$1;
      var {
        peekNodeInfo: peekNodeInfo$3
      } = Recoil_FunctionalCore;
      var {
        DEFAULT_VALUE: DEFAULT_VALUE$7,
        DefaultValue: DefaultValue$2,
        getConfigDeletionHandler: getConfigDeletionHandler$2,
        registerNode: registerNode$2,
        setConfigDeletionHandler: setConfigDeletionHandler$1
      } = Recoil_Node;
      var {
        isRecoilValue: isRecoilValue$4
      } = Recoil_RecoilValue$1;
      var {
        getRecoilValueAsLoadable: getRecoilValueAsLoadable$4,
        markRecoilValueModified: markRecoilValueModified$2,
        setRecoilValue: setRecoilValue$4,
        setRecoilValueLoadable: setRecoilValueLoadable$2
      } = Recoil_RecoilValueInterface;
      var {
        retainedByOptionWithDefault: retainedByOptionWithDefault$2
      } = Recoil_Retention;
      var unwrap = (x2) => x2 instanceof WrappedValue$2 ? x2.value : x2;
      function baseAtom(options) {
        const {
          key,
          persistence_UNSTABLE: persistence
        } = options;
        const retainedBy = retainedByOptionWithDefault$2(options.retainedBy_UNSTABLE);
        let liveStoresCount = 0;
        function unwrapPromise(promise) {
          return loadableWithPromise$2(promise.then((value) => {
            defaultLoadable = loadableWithValue$3(value);
            return value;
          }).catch((error) => {
            defaultLoadable = loadableWithError$2(error);
            throw error;
          }));
        }
        let defaultLoadable = Recoil_isPromise(options.default) ? unwrapPromise(options.default) : isLoadable$2(options.default) ? options.default.state === "loading" ? unwrapPromise(options.default.contents) : options.default : loadableWithValue$3(unwrap(options.default));
        maybeFreezeValueOrPromise(defaultLoadable.contents);
        let cachedAnswerForUnvalidatedValue = void 0;
        const cleanupEffectsByStore = /* @__PURE__ */ new Map();
        function maybeFreezeValueOrPromise(valueOrPromise) {
          if (process.env.NODE_ENV !== "production") {
            if (options.dangerouslyAllowMutability !== true) {
              if (Recoil_isPromise(valueOrPromise)) {
                return valueOrPromise.then((value) => {
                  Recoil_deepFreezeValue(value);
                  return value;
                });
              } else {
                Recoil_deepFreezeValue(valueOrPromise);
                return valueOrPromise;
              }
            }
          }
          return valueOrPromise;
        }
        function wrapPendingPromise(store2, promise) {
          const wrappedPromise = promise.then((value) => {
            var _store$getState$nextT, _state$atomValues$get;
            const state = (_store$getState$nextT = store2.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store2.getState().currentTree;
            if (((_state$atomValues$get = state.atomValues.get(key)) === null || _state$atomValues$get === void 0 ? void 0 : _state$atomValues$get.contents) === wrappedPromise) {
              setRecoilValue$4(store2, node, value);
            }
            return value;
          }).catch((error) => {
            var _store$getState$nextT2, _state$atomValues$get2;
            const state = (_store$getState$nextT2 = store2.getState().nextTree) !== null && _store$getState$nextT2 !== void 0 ? _store$getState$nextT2 : store2.getState().currentTree;
            if (((_state$atomValues$get2 = state.atomValues.get(key)) === null || _state$atomValues$get2 === void 0 ? void 0 : _state$atomValues$get2.contents) === wrappedPromise) {
              setRecoilValueLoadable$2(store2, node, loadableWithError$2(error));
            }
            throw error;
          });
          return wrappedPromise;
        }
        function initAtom(store2, initState, trigger) {
          var _options$effects;
          liveStoresCount++;
          const cleanupAtom = () => {
            var _cleanupEffectsByStor;
            liveStoresCount--;
            (_cleanupEffectsByStor = cleanupEffectsByStore.get(store2)) === null || _cleanupEffectsByStor === void 0 ? void 0 : _cleanupEffectsByStor.forEach((cleanup) => cleanup());
            cleanupEffectsByStore.delete(store2);
          };
          store2.getState().knownAtoms.add(key);
          if (defaultLoadable.state === "loading") {
            const notifyDefaultSubscribers = () => {
              var _store$getState$nextT3;
              const state = (_store$getState$nextT3 = store2.getState().nextTree) !== null && _store$getState$nextT3 !== void 0 ? _store$getState$nextT3 : store2.getState().currentTree;
              if (!state.atomValues.has(key)) {
                markRecoilValueModified$2(store2, node);
              }
            };
            defaultLoadable.contents.finally(notifyDefaultSubscribers);
          }
          const effects = (_options$effects = options.effects) !== null && _options$effects !== void 0 ? _options$effects : options.effects_UNSTABLE;
          if (effects != null) {
            let getLoadable = function(recoilValue) {
              if (isDuringInit && recoilValue.key === key) {
                const retValue = initValue;
                return retValue instanceof DefaultValue$2 ? peekAtom(store2, initState) : Recoil_isPromise(retValue) ? loadableWithPromise$2(retValue.then((v2) => v2 instanceof DefaultValue$2 ? (
                  // Cast T to S
                  defaultLoadable.toPromise()
                ) : v2)) : loadableWithValue$3(retValue);
              }
              return getRecoilValueAsLoadable$4(store2, recoilValue);
            }, getPromise = function(recoilValue) {
              return getLoadable(recoilValue).toPromise();
            }, getInfo_UNSTABLE = function(recoilValue) {
              var _store$getState$nextT4;
              const info = peekNodeInfo$3(store2, (_store$getState$nextT4 = store2.getState().nextTree) !== null && _store$getState$nextT4 !== void 0 ? _store$getState$nextT4 : store2.getState().currentTree, recoilValue.key);
              return isDuringInit && recoilValue.key === key && !(initValue instanceof DefaultValue$2) ? __spreadProps(__spreadValues({}, info), {
                isSet: true,
                loadable: getLoadable(recoilValue)
              }) : info;
            };
            let initValue = DEFAULT_VALUE$7;
            let isDuringInit = true;
            let isInitError = false;
            let pendingSetSelf = null;
            const setSelf = (effect) => (valueOrUpdater) => {
              if (isDuringInit) {
                const currentLoadable = getLoadable(node);
                const currentValue = currentLoadable.state === "hasValue" ? currentLoadable.contents : DEFAULT_VALUE$7;
                initValue = typeof valueOrUpdater === "function" ? (
                  // cast to any because we can't restrict T from being a function without losing support for opaque types
                  valueOrUpdater(currentValue)
                ) : valueOrUpdater;
                if (Recoil_isPromise(initValue)) {
                  initValue = initValue.then((value) => {
                    pendingSetSelf = {
                      effect,
                      value
                    };
                    return value;
                  });
                }
              } else {
                if (Recoil_isPromise(valueOrUpdater)) {
                  throw Recoil_err("Setting atoms to async values is not implemented.");
                }
                if (typeof valueOrUpdater !== "function") {
                  pendingSetSelf = {
                    effect,
                    value: unwrap(valueOrUpdater)
                  };
                }
                setRecoilValue$4(store2, node, typeof valueOrUpdater === "function" ? (currentValue) => {
                  const newValue = unwrap(
                    // cast to any because we can't restrict T from being a function without losing support for opaque types
                    valueOrUpdater(currentValue)
                    // flowlint-line unclear-type:off
                  );
                  pendingSetSelf = {
                    effect,
                    value: newValue
                  };
                  return newValue;
                } : unwrap(valueOrUpdater));
              }
            };
            const resetSelf = (effect) => () => setSelf(effect)(DEFAULT_VALUE$7);
            const onSet = (effect) => (handler) => {
              var _cleanupEffectsByStor2;
              const {
                release
              } = store2.subscribeToTransactions((currentStore) => {
                var _currentTree$atomValu;
                let {
                  currentTree,
                  previousTree
                } = currentStore.getState();
                if (!previousTree) {
                  Recoil_recoverableViolation("Transaction subscribers notified without a next tree being present -- this is a bug in Recoil");
                  previousTree = currentTree;
                }
                const newLoadable = (_currentTree$atomValu = currentTree.atomValues.get(key)) !== null && _currentTree$atomValu !== void 0 ? _currentTree$atomValu : defaultLoadable;
                if (newLoadable.state === "hasValue") {
                  var _previousTree$atomVal, _pendingSetSelf, _pendingSetSelf2, _pendingSetSelf3;
                  const newValue = newLoadable.contents;
                  const oldLoadable = (_previousTree$atomVal = previousTree.atomValues.get(key)) !== null && _previousTree$atomVal !== void 0 ? _previousTree$atomVal : defaultLoadable;
                  const oldValue = oldLoadable.state === "hasValue" ? oldLoadable.contents : DEFAULT_VALUE$7;
                  if (((_pendingSetSelf = pendingSetSelf) === null || _pendingSetSelf === void 0 ? void 0 : _pendingSetSelf.effect) !== effect || ((_pendingSetSelf2 = pendingSetSelf) === null || _pendingSetSelf2 === void 0 ? void 0 : _pendingSetSelf2.value) !== newValue) {
                    handler(newValue, oldValue, !currentTree.atomValues.has(key));
                  } else if (((_pendingSetSelf3 = pendingSetSelf) === null || _pendingSetSelf3 === void 0 ? void 0 : _pendingSetSelf3.effect) === effect) {
                    pendingSetSelf = null;
                  }
                }
              }, key);
              cleanupEffectsByStore.set(store2, [...(_cleanupEffectsByStor2 = cleanupEffectsByStore.get(store2)) !== null && _cleanupEffectsByStor2 !== void 0 ? _cleanupEffectsByStor2 : [], release]);
            };
            for (const effect of effects) {
              try {
                const cleanup = effect({
                  node,
                  storeID: store2.storeID,
                  parentStoreID_UNSTABLE: store2.parentStoreID,
                  trigger,
                  setSelf: setSelf(effect),
                  resetSelf: resetSelf(effect),
                  onSet: onSet(effect),
                  getPromise,
                  getLoadable,
                  getInfo_UNSTABLE
                });
                if (cleanup != null) {
                  var _cleanupEffectsByStor3;
                  cleanupEffectsByStore.set(store2, [...(_cleanupEffectsByStor3 = cleanupEffectsByStore.get(store2)) !== null && _cleanupEffectsByStor3 !== void 0 ? _cleanupEffectsByStor3 : [], cleanup]);
                }
              } catch (error) {
                initValue = error;
                isInitError = true;
              }
            }
            isDuringInit = false;
            if (!(initValue instanceof DefaultValue$2)) {
              var _store$getState$nextT5;
              const initLoadable = isInitError ? loadableWithError$2(initValue) : Recoil_isPromise(initValue) ? loadableWithPromise$2(wrapPendingPromise(store2, initValue)) : loadableWithValue$3(unwrap(initValue));
              maybeFreezeValueOrPromise(initLoadable.contents);
              initState.atomValues.set(key, initLoadable);
              (_store$getState$nextT5 = store2.getState().nextTree) === null || _store$getState$nextT5 === void 0 ? void 0 : _store$getState$nextT5.atomValues.set(key, initLoadable);
            }
          }
          return cleanupAtom;
        }
        function peekAtom(_store, state) {
          var _ref, _state$atomValues$get3;
          return (_ref = (_state$atomValues$get3 = state.atomValues.get(key)) !== null && _state$atomValues$get3 !== void 0 ? _state$atomValues$get3 : cachedAnswerForUnvalidatedValue) !== null && _ref !== void 0 ? _ref : defaultLoadable;
        }
        function getAtom(_store, state) {
          if (state.atomValues.has(key)) {
            return Recoil_nullthrows(state.atomValues.get(key));
          } else if (state.nonvalidatedAtoms.has(key)) {
            if (cachedAnswerForUnvalidatedValue != null) {
              return cachedAnswerForUnvalidatedValue;
            }
            if (persistence == null) {
              Recoil_expectationViolation(`Tried to restore a persisted value for atom ${key} but it has no persistence settings.`);
              return defaultLoadable;
            }
            const nonvalidatedValue = state.nonvalidatedAtoms.get(key);
            const validatorResult = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$7);
            const validatedValueLoadable = validatorResult instanceof DefaultValue$2 ? defaultLoadable : loadableWithValue$3(validatorResult);
            cachedAnswerForUnvalidatedValue = validatedValueLoadable;
            return cachedAnswerForUnvalidatedValue;
          } else {
            return defaultLoadable;
          }
        }
        function invalidateAtom() {
          cachedAnswerForUnvalidatedValue = void 0;
        }
        function setAtom(_store, state, newValue) {
          if (state.atomValues.has(key)) {
            const existing = Recoil_nullthrows(state.atomValues.get(key));
            if (existing.state === "hasValue" && newValue === existing.contents) {
              return /* @__PURE__ */ new Map();
            }
          } else if (!state.nonvalidatedAtoms.has(key) && newValue instanceof DefaultValue$2) {
            return /* @__PURE__ */ new Map();
          }
          maybeFreezeValueOrPromise(newValue);
          cachedAnswerForUnvalidatedValue = void 0;
          return (/* @__PURE__ */ new Map()).set(key, loadableWithValue$3(newValue));
        }
        function shouldDeleteConfigOnReleaseAtom() {
          return getConfigDeletionHandler$2(key) !== void 0 && liveStoresCount <= 0;
        }
        const node = registerNode$2({
          key,
          nodeType: "atom",
          peek: peekAtom,
          get: getAtom,
          set: setAtom,
          init: initAtom,
          invalidate: invalidateAtom,
          shouldDeleteConfigOnRelease: shouldDeleteConfigOnReleaseAtom,
          dangerouslyAllowMutability: options.dangerouslyAllowMutability,
          persistence_UNSTABLE: options.persistence_UNSTABLE ? {
            type: options.persistence_UNSTABLE.type,
            backButton: options.persistence_UNSTABLE.backButton
          } : void 0,
          shouldRestoreFromSnapshots: true,
          retainedBy
        });
        return node;
      }
      function atom(options) {
        if (process.env.NODE_ENV !== "production") {
          if (typeof options.key !== "string") {
            throw Recoil_err("A key option with a unique string value must be provided when creating an atom.");
          }
        }
        const restOptions = __objRest(options, []);
        const optionsDefault = "default" in options ? (
          // $FlowIssue[incompatible-type] No way to refine in Flow that property is not defined
          options.default
        ) : new Promise(() => {
        });
        if (isRecoilValue$4(optionsDefault)) {
          return atomWithFallback(__spreadProps(__spreadValues({}, restOptions), {
            default: optionsDefault
            // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,
          }));
        } else {
          return baseAtom(__spreadProps(__spreadValues({}, restOptions), {
            default: optionsDefault
          }));
        }
      }
      function atomWithFallback(options) {
        const base = atom(__spreadProps(__spreadValues({}, options), {
          default: DEFAULT_VALUE$7,
          persistence_UNSTABLE: options.persistence_UNSTABLE === void 0 ? void 0 : __spreadProps(__spreadValues({}, options.persistence_UNSTABLE), {
            validator: (storedValue) => storedValue instanceof DefaultValue$2 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$7)
          }),
          // TODO Hack for now.
          effects: options.effects,
          // flowlint-line unclear-type: off
          effects_UNSTABLE: options.effects_UNSTABLE
          // flowlint-line unclear-type: off
        }));
        const sel = Recoil_selector({
          key: `${options.key}__withFallback`,
          get: ({
            get
          }) => {
            const baseValue = get(base);
            return baseValue instanceof DefaultValue$2 ? options.default : baseValue;
          },
          set: ({
            set
          }, newValue) => set(base, newValue),
          // This selector does not need to cache as it is a wrapper selector
          // and the selector within the wrapper selector will have a cache
          // option by default
          cachePolicy_UNSTABLE: {
            eviction: "most-recent"
          },
          dangerouslyAllowMutability: options.dangerouslyAllowMutability
        });
        setConfigDeletionHandler$1(sel.key, getConfigDeletionHandler$2(options.key));
        return sel;
      }
      atom.value = (value) => new WrappedValue$2(value);
      var Recoil_atom = atom;
      var MapCache = class {
        constructor(options) {
          var _options$mapKey;
          _defineProperty(this, "_map", void 0);
          _defineProperty(this, "_keyMapper", void 0);
          this._map = /* @__PURE__ */ new Map();
          this._keyMapper = (_options$mapKey = options === null || options === void 0 ? void 0 : options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v2) => v2;
        }
        size() {
          return this._map.size;
        }
        has(key) {
          return this._map.has(this._keyMapper(key));
        }
        get(key) {
          return this._map.get(this._keyMapper(key));
        }
        set(key, val) {
          this._map.set(this._keyMapper(key), val);
        }
        delete(key) {
          this._map.delete(this._keyMapper(key));
        }
        clear() {
          this._map.clear();
        }
      };
      var Recoil_MapCache = {
        MapCache
      };
      var Recoil_MapCache_1 = Recoil_MapCache.MapCache;
      var Recoil_MapCache$1 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        MapCache: Recoil_MapCache_1
      });
      var {
        LRUCache: LRUCache$2
      } = Recoil_LRUCache$1;
      var {
        MapCache: MapCache$1
      } = Recoil_MapCache$1;
      var defaultPolicy$1 = {
        equality: "reference",
        eviction: "none",
        maxSize: Infinity
      };
      function cacheFromPolicy({
        equality = defaultPolicy$1.equality,
        eviction = defaultPolicy$1.eviction,
        maxSize = defaultPolicy$1.maxSize
      } = defaultPolicy$1) {
        const valueMapper = getValueMapper$1(equality);
        const cache = getCache(eviction, maxSize, valueMapper);
        return cache;
      }
      function getValueMapper$1(equality) {
        switch (equality) {
          case "reference":
            return (val) => val;
          case "value":
            return (val) => Recoil_stableStringify(val);
        }
        throw Recoil_err(`Unrecognized equality policy ${equality}`);
      }
      function getCache(eviction, maxSize, mapKey) {
        switch (eviction) {
          case "keep-all":
            return new MapCache$1({
              mapKey
            });
          case "lru":
            return new LRUCache$2({
              mapKey,
              maxSize: Recoil_nullthrows(maxSize)
            });
          case "most-recent":
            return new LRUCache$2({
              mapKey,
              maxSize: 1
            });
        }
        throw Recoil_err(`Unrecognized eviction policy ${eviction}`);
      }
      var Recoil_cacheFromPolicy = cacheFromPolicy;
      var {
        setConfigDeletionHandler: setConfigDeletionHandler$2
      } = Recoil_Node;
      function atomFamily(options) {
        var _options$cachePolicyF, _options$cachePolicyF2;
        const atomCache = Recoil_cacheFromPolicy({
          equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : "value",
          eviction: "keep-all"
        });
        return (params) => {
          var _stableStringify, _options$effects;
          const cachedAtom = atomCache.get(params);
          if (cachedAtom != null) {
            return cachedAtom;
          }
          const _a2 = options, {
            cachePolicyForParams_UNSTABLE
          } = _a2, atomOptions = __objRest(_a2, [
            "cachePolicyForParams_UNSTABLE"
          ]);
          const optionsDefault = "default" in options ? (
            // $FlowIssue[incompatible-type] No way to refine in Flow that property is not defined
            options.default
          ) : new Promise(() => {
          });
          const newAtom = Recoil_atom(__spreadProps(__spreadValues({}, atomOptions), {
            key: `${options.key}__${(_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : "void"}`,
            default: typeof optionsDefault === "function" ? (
              // The default was parameterized
              // Flow doesn't know that T isn't a function, so we need to case to any
              // $FlowIssue[incompatible-use]
              optionsDefault(params)
            ) : (
              // Default may be a static value, promise, or RecoilValue
              optionsDefault
            ),
            retainedBy_UNSTABLE: typeof options.retainedBy_UNSTABLE === "function" ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE,
            effects: typeof options.effects === "function" ? options.effects(params) : typeof options.effects_UNSTABLE === "function" ? options.effects_UNSTABLE(params) : (_options$effects = options.effects) !== null && _options$effects !== void 0 ? _options$effects : options.effects_UNSTABLE
            // prettier-ignore
            // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS: mapScopeRules(
            // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS,
            // @fb-only: params,
            // @fb-only: ),
          }));
          atomCache.set(params, newAtom);
          setConfigDeletionHandler$2(newAtom.key, () => {
            atomCache.delete(params);
          });
          return newAtom;
        };
      }
      var Recoil_atomFamily = atomFamily;
      var {
        setConfigDeletionHandler: setConfigDeletionHandler$3
      } = Recoil_Node;
      var nextIndex = 0;
      function selectorFamily(options) {
        var _options$cachePolicyF, _options$cachePolicyF2;
        const selectorCache = Recoil_cacheFromPolicy({
          equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : "value",
          eviction: "keep-all"
        });
        return (params) => {
          var _stableStringify;
          let cachedSelector;
          try {
            cachedSelector = selectorCache.get(params);
          } catch (error) {
            throw Recoil_err(`Problem with cache lookup for selector ${options.key}: ${error.message}`);
          }
          if (cachedSelector != null) {
            return cachedSelector;
          }
          const myKey = `${options.key}__selectorFamily/${(_stableStringify = Recoil_stableStringify(params, {
            // It is possible to use functions in parameters if the user uses
            // a cache with reference equality thanks to the incrementing index.
            allowFunctions: true
          })) !== null && _stableStringify !== void 0 ? _stableStringify : "void"}/${nextIndex++}`;
          const myGet = (callbacks) => options.get(params)(callbacks);
          const myCachePolicy = options.cachePolicy_UNSTABLE;
          const retainedBy = typeof options.retainedBy_UNSTABLE === "function" ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE;
          let newSelector;
          if (options.set != null) {
            const set = options.set;
            const mySet = (callbacks, newValue) => set(params)(callbacks, newValue);
            newSelector = Recoil_selector({
              key: myKey,
              get: myGet,
              set: mySet,
              cachePolicy_UNSTABLE: myCachePolicy,
              dangerouslyAllowMutability: options.dangerouslyAllowMutability,
              retainedBy_UNSTABLE: retainedBy
            });
          } else {
            newSelector = Recoil_selector({
              key: myKey,
              get: myGet,
              cachePolicy_UNSTABLE: myCachePolicy,
              dangerouslyAllowMutability: options.dangerouslyAllowMutability,
              retainedBy_UNSTABLE: retainedBy
            });
          }
          selectorCache.set(params, newSelector);
          setConfigDeletionHandler$3(newSelector.key, () => {
            selectorCache.delete(params);
          });
          return newSelector;
        };
      }
      var Recoil_selectorFamily = selectorFamily;
      var constantSelector = Recoil_selectorFamily({
        key: "__constant",
        get: (constant) => () => constant,
        cachePolicyForParams_UNSTABLE: {
          equality: "reference"
        }
      });
      function constSelector(constant) {
        return constantSelector(constant);
      }
      var Recoil_constSelector = constSelector;
      var throwingSelector = Recoil_selectorFamily({
        key: "__error",
        get: (message) => () => {
          throw Recoil_err(message);
        },
        // TODO Why?
        cachePolicyForParams_UNSTABLE: {
          equality: "reference"
        }
      });
      function errorSelector(message) {
        return throwingSelector(message);
      }
      var Recoil_errorSelector = errorSelector;
      function readOnlySelector(atom2) {
        return atom2;
      }
      var Recoil_readOnlySelector = readOnlySelector;
      var {
        loadableWithError: loadableWithError$3,
        loadableWithPromise: loadableWithPromise$3,
        loadableWithValue: loadableWithValue$4
      } = Recoil_Loadable$1;
      function concurrentRequests(getRecoilValue, deps) {
        const results = Array(deps.length).fill(void 0);
        const exceptions = Array(deps.length).fill(void 0);
        for (const [i2, dep] of deps.entries()) {
          try {
            results[i2] = getRecoilValue(dep);
          } catch (e2) {
            exceptions[i2] = e2;
          }
        }
        return [results, exceptions];
      }
      function isError(exp) {
        return exp != null && !Recoil_isPromise(exp);
      }
      function unwrapDependencies(dependencies) {
        return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map((key) => dependencies[key]);
      }
      function wrapResults(dependencies, results) {
        return Array.isArray(dependencies) ? results : (
          // Object.getOwnPropertyNames() has consistent key ordering with ES6
          Object.getOwnPropertyNames(dependencies).reduce((out, key, idx) => __spreadProps(__spreadValues({}, out), {
            [key]: results[idx]
          }), {})
        );
      }
      function wrapLoadables(dependencies, results, exceptions) {
        const output = exceptions.map((exception, idx) => exception == null ? loadableWithValue$4(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));
        return wrapResults(dependencies, output);
      }
      function combineAsyncResultsWithSyncResults(syncResults, asyncResults) {
        return asyncResults.map((result, idx) => (
          /**
           * it's important we use === undefined as opposed to == null, because the
           * resolved value of the async promise could be `null`, in which case we
           * don't want to use syncResults[idx], which would be undefined. If async
           * promise resolves to `undefined`, that's ok because `syncResults[idx]`
           * will also be `undefined`. That's a little hacky, but it works.
           */
          result === void 0 ? syncResults[idx] : result
        ));
      }
      var waitForNone = Recoil_selectorFamily({
        key: "__waitForNone",
        get: (dependencies) => ({
          get
        }) => {
          const deps = unwrapDependencies(dependencies);
          const [results, exceptions] = concurrentRequests(get, deps);
          return wrapLoadables(dependencies, results, exceptions);
        },
        dangerouslyAllowMutability: true
      });
      var waitForAny = Recoil_selectorFamily({
        key: "__waitForAny",
        get: (dependencies) => ({
          get
        }) => {
          const deps = unwrapDependencies(dependencies);
          const [results, exceptions] = concurrentRequests(get, deps);
          if (exceptions.some((exp) => !Recoil_isPromise(exp))) {
            return wrapLoadables(dependencies, results, exceptions);
          }
          return new Promise((resolve) => {
            for (const [i2, exp] of exceptions.entries()) {
              if (Recoil_isPromise(exp)) {
                exp.then((result) => {
                  results[i2] = result;
                  exceptions[i2] = void 0;
                  resolve(wrapLoadables(dependencies, results, exceptions));
                }).catch((error) => {
                  exceptions[i2] = error;
                  resolve(wrapLoadables(dependencies, results, exceptions));
                });
              }
            }
          });
        },
        dangerouslyAllowMutability: true
      });
      var waitForAll = Recoil_selectorFamily({
        key: "__waitForAll",
        get: (dependencies) => ({
          get
        }) => {
          const deps = unwrapDependencies(dependencies);
          const [results, exceptions] = concurrentRequests(get, deps);
          if (exceptions.every((exp) => exp == null)) {
            return wrapResults(dependencies, results);
          }
          const error = exceptions.find(isError);
          if (error != null) {
            throw error;
          }
          return Promise.all(exceptions).then((exceptionResults) => wrapResults(dependencies, combineAsyncResultsWithSyncResults(results, exceptionResults)));
        },
        dangerouslyAllowMutability: true
      });
      var waitForAllSettled = Recoil_selectorFamily({
        key: "__waitForAllSettled",
        get: (dependencies) => ({
          get
        }) => {
          const deps = unwrapDependencies(dependencies);
          const [results, exceptions] = concurrentRequests(get, deps);
          if (exceptions.every((exp) => !Recoil_isPromise(exp))) {
            return wrapLoadables(dependencies, results, exceptions);
          }
          return Promise.all(exceptions.map((exp, i2) => Recoil_isPromise(exp) ? exp.then((result) => {
            results[i2] = result;
            exceptions[i2] = void 0;
          }).catch((error) => {
            results[i2] = void 0;
            exceptions[i2] = error;
          }) : null)).then(() => wrapLoadables(dependencies, results, exceptions));
        },
        dangerouslyAllowMutability: true
      });
      var noWait = Recoil_selectorFamily({
        key: "__noWait",
        get: (dependency) => ({
          get
        }) => {
          try {
            return Recoil_selector.value(loadableWithValue$4(get(dependency)));
          } catch (exception) {
            return Recoil_selector.value(Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));
          }
        },
        dangerouslyAllowMutability: true
      });
      var Recoil_WaitFor = {
        waitForNone,
        waitForAny,
        waitForAll,
        waitForAllSettled,
        noWait
      };
      var {
        RecoilLoadable
      } = Recoil_Loadable$1;
      var {
        DefaultValue: DefaultValue$3
      } = Recoil_Node;
      var {
        RecoilRoot: RecoilRoot$2,
        useRecoilStoreID: useRecoilStoreID$1
      } = Recoil_RecoilRoot;
      var {
        isRecoilValue: isRecoilValue$5
      } = Recoil_RecoilValue$1;
      var {
        retentionZone: retentionZone$1
      } = Recoil_RetentionZone;
      var {
        freshSnapshot: freshSnapshot$2
      } = Recoil_Snapshot$1;
      var {
        useRecoilState: useRecoilState$1,
        useRecoilState_TRANSITION_SUPPORT_UNSTABLE: useRecoilState_TRANSITION_SUPPORT_UNSTABLE$1,
        useRecoilStateLoadable: useRecoilStateLoadable$1,
        useRecoilValue: useRecoilValue$1,
        useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: useRecoilValue_TRANSITION_SUPPORT_UNSTABLE$1,
        useRecoilValueLoadable: useRecoilValueLoadable$1,
        useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE$1,
        useResetRecoilState: useResetRecoilState$1,
        useSetRecoilState: useSetRecoilState$1
      } = Recoil_Hooks;
      var {
        useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
        useRecoilSnapshot: useRecoilSnapshot$1,
        useRecoilTransactionObserver: useRecoilTransactionObserver$1
      } = Recoil_SnapshotHooks;
      var {
        useRecoilCallback: useRecoilCallback$1
      } = Recoil_useRecoilCallback;
      var {
        noWait: noWait$1,
        waitForAll: waitForAll$1,
        waitForAllSettled: waitForAllSettled$1,
        waitForAny: waitForAny$1,
        waitForNone: waitForNone$1
      } = Recoil_WaitFor;
      var Recoil_index = {
        // Types
        DefaultValue: DefaultValue$3,
        isRecoilValue: isRecoilValue$5,
        RecoilLoadable,
        // Global Recoil environment settiongs
        RecoilEnv: Recoil_RecoilEnv,
        // Recoil Root
        RecoilRoot: RecoilRoot$2,
        useRecoilStoreID: useRecoilStoreID$1,
        useRecoilBridgeAcrossReactRoots_UNSTABLE: Recoil_useRecoilBridgeAcrossReactRoots,
        // Atoms/Selectors
        atom: Recoil_atom,
        selector: Recoil_selector,
        // Convenience Atoms/Selectors
        atomFamily: Recoil_atomFamily,
        selectorFamily: Recoil_selectorFamily,
        constSelector: Recoil_constSelector,
        errorSelector: Recoil_errorSelector,
        readOnlySelector: Recoil_readOnlySelector,
        // Concurrency Helpers for Atoms/Selectors
        noWait: noWait$1,
        waitForNone: waitForNone$1,
        waitForAny: waitForAny$1,
        waitForAll: waitForAll$1,
        waitForAllSettled: waitForAllSettled$1,
        // Hooks for Atoms/Selectors
        useRecoilValue: useRecoilValue$1,
        useRecoilValueLoadable: useRecoilValueLoadable$1,
        useRecoilState: useRecoilState$1,
        useRecoilStateLoadable: useRecoilStateLoadable$1,
        useSetRecoilState: useSetRecoilState$1,
        useResetRecoilState: useResetRecoilState$1,
        useGetRecoilValueInfo_UNSTABLE: Recoil_useGetRecoilValueInfo,
        useRecoilRefresher_UNSTABLE: Recoil_useRecoilRefresher,
        useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE$1,
        useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: useRecoilValue_TRANSITION_SUPPORT_UNSTABLE$1,
        useRecoilState_TRANSITION_SUPPORT_UNSTABLE: useRecoilState_TRANSITION_SUPPORT_UNSTABLE$1,
        // Hooks for complex operations
        useRecoilCallback: useRecoilCallback$1,
        useRecoilTransaction_UNSTABLE: Recoil_useRecoilTransaction,
        // Snapshots
        useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
        useRecoilSnapshot: useRecoilSnapshot$1,
        useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,
        snapshot_UNSTABLE: freshSnapshot$2,
        // Memory Management
        useRetain: Recoil_useRetain,
        retentionZone: retentionZone$1
      };
      var Recoil_index_1 = Recoil_index.DefaultValue;
      var Recoil_index_2 = Recoil_index.isRecoilValue;
      var Recoil_index_3 = Recoil_index.RecoilLoadable;
      var Recoil_index_4 = Recoil_index.RecoilEnv;
      var Recoil_index_5 = Recoil_index.RecoilRoot;
      var Recoil_index_6 = Recoil_index.useRecoilStoreID;
      var Recoil_index_7 = Recoil_index.useRecoilBridgeAcrossReactRoots_UNSTABLE;
      var Recoil_index_8 = Recoil_index.atom;
      var Recoil_index_9 = Recoil_index.selector;
      var Recoil_index_10 = Recoil_index.atomFamily;
      var Recoil_index_11 = Recoil_index.selectorFamily;
      var Recoil_index_12 = Recoil_index.constSelector;
      var Recoil_index_13 = Recoil_index.errorSelector;
      var Recoil_index_14 = Recoil_index.readOnlySelector;
      var Recoil_index_15 = Recoil_index.noWait;
      var Recoil_index_16 = Recoil_index.waitForNone;
      var Recoil_index_17 = Recoil_index.waitForAny;
      var Recoil_index_18 = Recoil_index.waitForAll;
      var Recoil_index_19 = Recoil_index.waitForAllSettled;
      var Recoil_index_20 = Recoil_index.useRecoilValue;
      var Recoil_index_21 = Recoil_index.useRecoilValueLoadable;
      var Recoil_index_22 = Recoil_index.useRecoilState;
      var Recoil_index_23 = Recoil_index.useRecoilStateLoadable;
      var Recoil_index_24 = Recoil_index.useSetRecoilState;
      var Recoil_index_25 = Recoil_index.useResetRecoilState;
      var Recoil_index_26 = Recoil_index.useGetRecoilValueInfo_UNSTABLE;
      var Recoil_index_27 = Recoil_index.useRecoilRefresher_UNSTABLE;
      var Recoil_index_28 = Recoil_index.useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE;
      var Recoil_index_29 = Recoil_index.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE;
      var Recoil_index_30 = Recoil_index.useRecoilState_TRANSITION_SUPPORT_UNSTABLE;
      var Recoil_index_31 = Recoil_index.useRecoilCallback;
      var Recoil_index_32 = Recoil_index.useRecoilTransaction_UNSTABLE;
      var Recoil_index_33 = Recoil_index.useGotoRecoilSnapshot;
      var Recoil_index_34 = Recoil_index.useRecoilSnapshot;
      var Recoil_index_35 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;
      var Recoil_index_36 = Recoil_index.snapshot_UNSTABLE;
      var Recoil_index_37 = Recoil_index.useRetain;
      var Recoil_index_38 = Recoil_index.retentionZone;
      exports.DefaultValue = Recoil_index_1;
      exports.RecoilEnv = Recoil_index_4;
      exports.RecoilLoadable = Recoil_index_3;
      exports.RecoilRoot = Recoil_index_5;
      exports.atom = Recoil_index_8;
      exports.atomFamily = Recoil_index_10;
      exports.constSelector = Recoil_index_12;
      exports.default = Recoil_index;
      exports.errorSelector = Recoil_index_13;
      exports.isRecoilValue = Recoil_index_2;
      exports.noWait = Recoil_index_15;
      exports.readOnlySelector = Recoil_index_14;
      exports.retentionZone = Recoil_index_38;
      exports.selector = Recoil_index_9;
      exports.selectorFamily = Recoil_index_11;
      exports.snapshot_UNSTABLE = Recoil_index_36;
      exports.useGetRecoilValueInfo_UNSTABLE = Recoil_index_26;
      exports.useGotoRecoilSnapshot = Recoil_index_33;
      exports.useRecoilBridgeAcrossReactRoots_UNSTABLE = Recoil_index_7;
      exports.useRecoilCallback = Recoil_index_31;
      exports.useRecoilRefresher_UNSTABLE = Recoil_index_27;
      exports.useRecoilSnapshot = Recoil_index_34;
      exports.useRecoilState = Recoil_index_22;
      exports.useRecoilStateLoadable = Recoil_index_23;
      exports.useRecoilState_TRANSITION_SUPPORT_UNSTABLE = Recoil_index_30;
      exports.useRecoilStoreID = Recoil_index_6;
      exports.useRecoilTransactionObserver_UNSTABLE = Recoil_index_35;
      exports.useRecoilTransaction_UNSTABLE = Recoil_index_32;
      exports.useRecoilValue = Recoil_index_20;
      exports.useRecoilValueLoadable = Recoil_index_21;
      exports.useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE = Recoil_index_28;
      exports.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE = Recoil_index_29;
      exports.useResetRecoilState = Recoil_index_25;
      exports.useRetain = Recoil_index_37;
      exports.useSetRecoilState = Recoil_index_24;
      exports.waitForAll = Recoil_index_18;
      exports.waitForAllSettled = Recoil_index_19;
      exports.waitForAny = Recoil_index_17;
      exports.waitForNone = Recoil_index_16;
    }
  });

  // ../assets/node_modules/lodash.throttle/index.js
  var require_lodash = __commonJS({
    "../assets/node_modules/lodash.throttle/index.js"(exports, module) {
      var FUNC_ERROR_TEXT = "Expected a function";
      var NAN = 0 / 0;
      var symbolTag = "[object Symbol]";
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      var now = function() {
        return root.Date.now();
      };
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
          return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = throttle;
    }
  });

  // ../assets/node_modules/@daily-co/daily-react-hooks/dist/daily-react-hooks.cjs.production.min.js
  var require_daily_react_hooks_cjs_production_min = __commonJS({
    "../assets/node_modules/@daily-co/daily-react-hooks/dist/daily-react-hooks.cjs.production.min.js"(exports) {
      "use strict";
      function e2(e3) {
        return e3 && "object" == typeof e3 && "default" in e3 ? e3.default : e3;
      }
      Object.defineProperty(exports, "__esModule", { value: true });
      var n2 = e2(require_daily_iframe());
      var t2 = require_react();
      var r2 = e2(t2);
      var i2 = require_cjs();
      var o2 = e2(require_lodash());
      function a2(e3, n3, t3, r3, i3, o3, a3) {
        try {
          var u3 = e3[o3](a3), c4 = u3.value;
        } catch (e4) {
          return void t3(e4);
        }
        u3.done ? n3(c4) : Promise.resolve(c4).then(r3, i3);
      }
      function u2(e3) {
        return function() {
          var n3 = this, t3 = arguments;
          return new Promise(function(r3, i3) {
            var o3 = e3.apply(n3, t3);
            function u3(e4) {
              a2(o3, r3, i3, u3, c4, "next", e4);
            }
            function c4(e4) {
              a2(o3, r3, i3, u3, c4, "throw", e4);
            }
            u3(void 0);
          });
        };
      }
      function c3() {
        return (c3 = Object.assign || function(e3) {
          for (var n3 = 1; n3 < arguments.length; n3++) {
            var t3 = arguments[n3];
            for (var r3 in t3)
              Object.prototype.hasOwnProperty.call(t3, r3) && (e3[r3] = t3[r3]);
          }
          return e3;
        }).apply(this, arguments);
      }
      function l2(e3, n3) {
        (null == n3 || n3 > e3.length) && (n3 = e3.length);
        for (var t3 = 0, r3 = new Array(n3); t3 < n3; t3++)
          r3[t3] = e3[t3];
        return r3;
      }
      var s2 = t2.createContext(null);
      var d2 = t2.createContext({ refreshDevices: function() {
        return Promise.resolve();
      } });
      var f2 = function() {
        return t2.useContext(s2);
      };
      var v2 = t2.createContext({ on: function() {
      }, off: function() {
      } });
      var p2 = 0;
      var g2 = function() {
        return p2++;
      };
      var m2 = function(e3, n3) {
        var r3 = t2.useContext(v2), i3 = r3.off, o3 = r3.on, a3 = t2.useState(false), u3 = a3[0], c4 = a3[1], l3 = t2.useRef(0), s3 = t2.useMemo(function() {
          return g2();
        }, []);
        t2.useEffect(function() {
          if (e3 && !u3) {
            if (l3.current > 1e5)
              return console.error("useDailyEvent called with potentially non-memoized event callback or due to too many re-renders.\n        Memoize using useCallback to avoid re-render loop or reduce the amount of state transitions the callback depends on.\n        Passed callback for '" + e3 + "' event is NOT registered.", n3), void c4(true);
            l3.current++;
            var t3 = setTimeout(function() {
              l3.current = 0;
            }, 50);
            return o3(e3, n3, s3), function() {
              clearTimeout(t3), i3(e3, s3);
            };
          }
        }, [n3, e3, s3, u3, i3, o3]);
      };
      var k2 = i2.atom({ key: "general-camera-state", default: "pending" });
      var b2 = i2.atom({ key: "general-microphone-state", default: "pending" });
      var y2 = i2.atom({ key: "camera-devices", default: [] });
      var h2 = i2.atom({ key: "microphone-devices", default: [] });
      var R2 = i2.atom({ key: "speaker-devices", default: [] });
      var S2 = function(e3) {
        var n3 = e3.children, o3 = f2(), a3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return u2(function* () {
            var e5, t3, r3, i3;
            if (void 0 !== (null == (e5 = navigator) || null == (t3 = e5.mediaDevices) ? void 0 : t3.getUserMedia) && void 0 !== (null == (r3 = navigator) || null == (i3 = r3.mediaDevices) ? void 0 : i3.enumerateDevices)) {
              if (o3)
                try {
                  var a4 = (yield o3.enumerateDevices()).devices, u3 = a4.filter(function(e6) {
                    return "videoinput" === e6.kind && "" !== e6.deviceId;
                  }), c4 = a4.filter(function(e6) {
                    return "audioinput" === e6.kind && "" !== e6.deviceId;
                  }), l4 = a4.filter(function(e6) {
                    return "audiooutput" === e6.kind && "" !== e6.deviceId;
                  }), s3 = yield o3.getInputDevices(), d3 = s3.camera, f3 = s3.mic, v3 = s3.speaker, p3 = function(e6, n5, t4) {
                    var r4, i4;
                    return { device: n5, selected: "deviceId" in e6 && n5.deviceId === e6.deviceId, state: null != (r4 = null == (i4 = t4.find(function(e7) {
                      return e7.device.deviceId === n5.deviceId;
                    })) ? void 0 : i4.state) ? r4 : "granted" };
                  }, g3 = function(e6, n5) {
                    return "default" === e6.device.deviceId ? -1 : "default" === n5.device.deviceId ? 1 : e6.device.label < n5.device.label ? -1 : e6.device.label > n5.device.label ? 1 : 0;
                  };
                  n4(function(e6) {
                    var n5 = e6.set;
                    n5(y2, function(e7) {
                      return u3.filter(Boolean).map(function(n6) {
                        return p3(d3, n6, e7);
                      }).sort(g3);
                    }), n5(h2, function(e7) {
                      return c4.filter(Boolean).map(function(n6) {
                        return p3(f3, n6, e7);
                      }).sort(g3);
                    }), n5(R2, function(e7) {
                      return l4.filter(Boolean).map(function(n6) {
                        return p3(v3, n6, e7);
                      }).sort(g3);
                    });
                  });
                } catch (e6) {
                  n4(function(e7) {
                    var n5 = e7.set;
                    n5(k2, "not-supported"), n5(b2, "not-supported");
                  });
                }
            } else
              n4(function(e6) {
                var n5 = e6.set;
                n5(k2, "not-supported"), n5(b2, "not-supported");
              });
          });
        }, [o3]), l3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.set, t3 = e4.snapshot, r3 = e4.transact_UNSTABLE;
          return u2(function* () {
            var e5, i3, u3, l4, s3, d3, f3, v3, p3, g3, m3, R3;
            if (o3) {
              var S3 = yield t3.getPromise(k2), C3 = yield t3.getPromise(b2), T3 = o3.participants().local.tracks, E3 = "pending" === S3 && "interrupted" === T3.video.state, A3 = "pending" === C3 && "interrupted" === T3.audio.state;
              (null == (e5 = T3.audio) || null == (i3 = e5.blocked) ? void 0 : i3.byDeviceInUse) ? r3(function(e6) {
                var n5 = e6.set;
                n5(b2, "in-use"), n5(h2, function(e7) {
                  return e7.map(function(e8) {
                    return e8.selected ? c3({}, e8, { state: "in-use" }) : e8;
                  });
                });
              }) : (null == (u3 = T3.audio) || null == (l4 = u3.blocked) ? void 0 : l4.byDeviceMissing) ? n4(b2, "not-found") : (null == (s3 = T3.audio) || null == (d3 = s3.blocked) ? void 0 : d3.byPermissions) ? n4(b2, "blocked") : A3 || r3(function(e6) {
                var n5 = e6.set;
                n5(b2, "granted"), n5(h2, function(e7) {
                  return e7.map(function(e8) {
                    return e8.selected ? c3({}, e8, { state: "granted" }) : e8;
                  });
                });
              }), (null == (f3 = T3.video) || null == (v3 = f3.blocked) ? void 0 : v3.byDeviceInUse) ? r3(function(e6) {
                var n5 = e6.set;
                n5(k2, "in-use"), n5(y2, function(e7) {
                  return e7.map(function(e8) {
                    return e8.selected ? c3({}, e8, { state: "in-use" }) : e8;
                  });
                });
              }) : (null == (p3 = T3.video) || null == (g3 = p3.blocked) ? void 0 : g3.byDeviceMissing) ? n4(k2, "not-found") : (null == (m3 = T3.video) || null == (R3 = m3.blocked) ? void 0 : R3.byPermissions) ? n4(k2, "blocked") : E3 || r3(function(e6) {
                var n5 = e6.set;
                n5(k2, "granted"), n5(y2, function(e7) {
                  return e7.map(function(e8) {
                    return e8.selected ? c3({}, e8, { state: "granted" }) : e8;
                  });
                });
              }), a3();
            }
          });
        }, [o3, a3]);
        return m2("participant-updated", t2.useCallback(function(e4) {
          e4.participant.local && l3();
        }, [l3])), m2("available-devices-updated", a3), m2("selected-devices-updated", a3), m2("camera-error", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set, t3 = e4.transact_UNSTABLE;
          return function(e5) {
            var r3 = e5.error, i3 = e5.errorMsg, o4 = i3.audioOk, a4 = i3.errorMsg, u3 = i3.videoOk;
            switch (null == r3 ? void 0 : r3.type) {
              case "cam-in-use":
                n4(k2, "in-use");
                break;
              case "mic-in-use":
                n4(b2, "in-use");
                break;
              case "cam-mic-in-use":
                t3(function(e6) {
                  var n5 = e6.set;
                  n5(k2, "in-use"), n5(b2, "in-use");
                });
                break;
              default:
                switch (a4) {
                  case "devices error":
                    t3(function(e6) {
                      var n5 = e6.set;
                      u3 || n5(k2, "not-found"), o4 || n5(b2, "not-found");
                    });
                    break;
                  case "not allowed":
                    t3(function(e6) {
                      var n5 = e6.set;
                      n5(k2, "blocked"), n5(b2, "blocked");
                    }), l3();
                }
            }
          };
        }, [l3])), m2("error", i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return function(e5) {
            switch (e5.errorMsg) {
              case "not allowed":
                n4(function(e6) {
                  var n5 = e6.set;
                  n5(k2, "blocked"), n5(b2, "blocked");
                }), l3();
            }
          };
        }, [l3])), m2("started-camera", i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return function() {
            n4(function(e5) {
              var n5 = e5.set;
              n5(k2, "granted"), n5(b2, "granted");
            }), l3();
          };
        }, [l3])), r2.createElement(d2.Provider, { value: { refreshDevices: a3 } }, n3);
      };
      var C2 = function(e3, n3, r3) {
        void 0 === r3 && (r3 = 100);
        var i3 = t2.useContext(v2), a3 = i3.off, u3 = i3.on, c4 = t2.useMemo(function() {
          return g2();
        }, []), l3 = t2.useRef([]), s3 = t2.useMemo(function() {
          return o2(function() {
            0 !== l3.current.length && (n3(l3.current), l3.current = []);
          }, r3, { trailing: true });
        }, [n3, r3]);
        t2.useEffect(function() {
          if (e3)
            return u3(e3, function(e4) {
              l3.current.push(e4), setTimeout(s3, 0);
            }, c4), function() {
              a3(e3, c4);
            };
        }, [s3, e3, c4, a3, u3]);
      };
      var T2 = i2.atom({ key: "local-id", default: "" });
      var E2 = i2.atom({ key: "participants-objects", default: [] });
      var A2 = i2.selectorFamily({ key: "participant", get: function(e3) {
        return function(n3) {
          var t3;
          return null != (t3 = (0, n3.get)(E2).find(function(n4) {
            return n4.session_id === e3;
          })) ? t3 : null;
        };
      } });
      var I2 = i2.selectorFamily({ key: "participant-property", get: function(e3) {
        var n3 = e3.id, t3 = e3.properties;
        return function(e4) {
          var r3, i3;
          return i3 = null != (r3 = (0, e4.get)(E2).find(function(e5) {
            return e5.session_id === n3;
          })) ? r3 : null, t3.map(function(e5) {
            return function(e6, n4) {
              return String(n4).split(".").filter(function(e7) {
                return e7.length;
              }).reduce(function(e7, n5) {
                return e7 && e7[n5];
              }, e6);
            }(i3, e5);
          });
        };
      } });
      var P2 = function(e3) {
        var n3 = e3.children, o3 = f2();
        m2("active-speaker-change", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set, t3 = e4.snapshot;
          return function() {
            var e5 = u2(function* (e6) {
              var r3 = e6.activeSpeaker.peerId, i3 = yield t3.getPromise(A2(r3));
              !i3 && o3 && (i3 = o3.participants()[r3]), i3 && n4(E2, function(e7) {
                return [].concat(e7).map(function(e8) {
                  return e8.session_id === r3 ? c3({}, e8, { last_active: /* @__PURE__ */ new Date() }) : e8;
                });
              });
            });
            return function(n5) {
              return e5.apply(this, arguments);
            };
          }();
        }, [o3]));
        var a3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function() {
            var e5 = u2(function* (e6) {
              n4(T2, e6.local.session_id), n4(E2, Object.values(e6));
            });
            return function(n5) {
              return e5.apply(this, arguments);
            };
          }();
        }, []);
        t2.useEffect(function() {
          if (o3) {
            var e4 = setInterval(function() {
              var n4 = o3.participants();
              "local" in n4 && (a3(n4), clearInterval(e4));
            }, 100);
            return function() {
              clearInterval(e4);
            };
          }
        }, [o3, a3]);
        var l3 = t2.useCallback(function() {
          if (o3) {
            var e4 = null == o3 ? void 0 : o3.participants();
            e4.local && a3(e4);
          }
        }, [o3, a3]);
        return m2("started-camera", l3), m2("access-state-updated", l3), m2("joining-meeting", l3), m2("joined-meeting", t2.useCallback(function(e4) {
          a3(e4.participants);
        }, [a3])), C2("participant-joined", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function() {
            var e5 = u2(function* (e6) {
              e6.length && n4(E2, function(n5) {
                return [].concat(n5, e6.map(function(e7) {
                  return e7.participant;
                })).filter(function(e7, n6, t3) {
                  return t3.findIndex(function(n7) {
                    return n7.session_id === e7.session_id;
                  }) == n6;
                });
              });
            });
            return function(n5) {
              return e5.apply(this, arguments);
            };
          }();
        }, [])), C2("participant-updated", i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return function(e5) {
            n4(function(n5) {
              var t3 = n5.set;
              e5.forEach(function(e6) {
                var n6 = e6.participant;
                t3(E2, function(e7) {
                  return [].concat(e7).map(function(e8) {
                    return e8.session_id === n6.session_id ? n6 : e8;
                  });
                });
              });
            });
          };
        }, [])), C2("participant-left", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(E2, function(n5) {
              return [].concat(n5).filter(function(n6) {
                return !e5.some(function(e6) {
                  return e6.participant.session_id === n6.session_id;
                });
              });
            });
          };
        }, [])), m2("left-meeting", i2.useRecoilCallback(function(e4) {
          var n4 = e4.reset;
          return function() {
            n4(T2), n4(E2);
          };
        }, [])), r2.createElement(r2.Fragment, null, n3);
      };
      var _ = i2.atom({ key: "room", default: null });
      var w2 = function(e3) {
        var n3 = e3.children, t3 = f2(), o3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return u2(function* () {
            if (t3 && "left-meeting" !== t3.meetingState()) {
              var e5 = yield t3.room();
              return e5 && "id" in e5 && n4(_, e5), e5;
            }
          });
        }, [t3]);
        return m2("access-state-updated", o3), r2.createElement(r2.Fragment, null, n3);
      };
      var x2 = function(e3, n3) {
        var r3 = void 0 === n3 ? {} : n3, o3 = r3.onParticipantLeft, a3 = r3.onParticipantUpdated, u3 = i2.useRecoilValue(A2(e3));
        return C2("participant-updated", t2.useCallback(function(n4) {
          var t3 = n4.filter(function(n5) {
            return n5.participant.session_id === e3;
          });
          t3.length && t3.forEach(function(e4) {
            setTimeout(function() {
              return null == a3 ? void 0 : a3(e4);
            }, 0);
          });
        }, [a3, e3])), C2("participant-left", t2.useCallback(function(n4) {
          if (n4.filter(function(n5) {
            return n5.participant.session_id === e3;
          }).length) {
            var t3 = n4[n4.length - 1];
            setTimeout(function() {
              return null == o3 ? void 0 : o3(t3);
            }, 0);
          }
        }, [o3, e3])), u3;
      };
      var L2 = i2.atom({ key: "active-id", default: "" });
      var D2 = function(e3, n3) {
        var t3 = i2.useRecoilValue(I2({ id: e3, properties: Array.isArray(n3) ? n3 : [n3] }));
        return Array.isArray(n3) ? t3 : t3[0];
      };
      var j2 = function(e3, n3) {
        void 0 === n3 && (n3 = "video");
        var t3 = D2(e3, "tracks." + n3);
        return t3 ? c3({}, t3, { isOff: "blocked" === t3.state || "off" === t3.state }) : { isOff: true, persistentTrack: void 0, state: "off", subscribed: false };
      };
      var O2 = i2.atom({ key: "input-settings", default: null });
      var V2 = i2.atom({ key: "input-settings-error", default: null });
      var M2 = i2.atom({ key: "live-streaming", default: { errorMsg: void 0, isLiveStreaming: false, layout: void 0 } });
      var B2 = function() {
        return i2.useRecoilValue(T2) || null;
      };
      var U2 = i2.atom({ key: "topology", default: "none" });
      var N2 = i2.atom({ key: "networkQuality", default: 100 });
      var q2 = i2.atom({ key: "networkThreshold", default: "good" });
      var F2 = Boolean;
      var W2 = function() {
        return 0;
      };
      var z2 = function(e3) {
        var n3 = void 0 === e3 ? { filter: F2, sort: W2 } : e3, r3 = n3.filter, o3 = void 0 === r3 ? F2 : r3, a3 = n3.onActiveSpeakerChange, c4 = n3.onParticipantJoined, l3 = n3.onParticipantLeft, s3 = n3.onParticipantUpdated, d3 = n3.sort, f3 = void 0 === d3 ? W2 : d3, v3 = i2.useRecoilValue(E2), p3 = t2.useMemo(function() {
          var e4, n4 = F2;
          switch (o3) {
            case "local":
              n4 = function(e5) {
                return e5.local;
              };
              break;
            case "owner":
              n4 = function(e5) {
                return e5.owner;
              };
              break;
            case "record":
              n4 = function(e5) {
                return e5.record;
              };
              break;
            case "remote":
              n4 = function(e5) {
                return !e5.local;
              };
              break;
            case "screen":
              n4 = function(e5) {
                return e5.screen;
              };
              break;
            default:
              n4 = o3;
          }
          switch (f3) {
            case "joined_at":
            case "session_id":
            case "user_id":
            case "user_name":
              e4 = function(e5, n5) {
                var t3 = e5[f3], r4 = n5[f3];
                if (void 0 !== t3 || void 0 !== r4) {
                  if (void 0 === t3)
                    return -1;
                  if (void 0 === r4)
                    return 1;
                  if (t3 > r4)
                    return 1;
                  if (t3 < r4)
                    return -1;
                }
                return 0;
              };
              break;
            default:
              e4 = f3;
          }
          return v3.filter(n4).sort(e4).map(function(e5) {
            return e5.session_id;
          }).filter(Boolean);
        }, [v3, o3, f3]);
        return C2("participant-joined", t2.useCallback(function(e4) {
          e4.length && e4.forEach(function(e5) {
            return setTimeout(function() {
              return null == c4 ? void 0 : c4(e5);
            }, 0);
          });
        }, [c4])), C2("participant-updated", t2.useCallback(function(e4) {
          e4.length && e4.forEach(function(e5) {
            return setTimeout(function() {
              return null == s3 ? void 0 : s3(e5);
            }, 0);
          });
        }, [s3])), C2("active-speaker-change", t2.useCallback(function() {
          var e4 = u2(function* (e5) {
            e5.length && e5.forEach(function(e6) {
              return setTimeout(function() {
                return null == a3 ? void 0 : a3(e6);
              }, 0);
            });
          });
          return function(n4) {
            return e4.apply(this, arguments);
          };
        }(), [a3])), C2("participant-left", t2.useCallback(function(e4) {
          e4.length && e4.forEach(function(e5) {
            return setTimeout(function() {
              return null == l3 ? void 0 : l3(e5);
            }, 0);
          });
        }, [l3])), p3;
      };
      var Q = i2.atomFamily({ key: "participant-receive-settings", default: {} });
      var J2 = i2.atom({ key: "recording", default: { isLocalParticipantRecorded: false, isRecording: false } });
      var $2 = function() {
        return i2.useRecoilValue(_);
      };
      var G2 = i2.atom({ key: "transcription", default: { isTranscriptionEnabled: false, isTranscribing: false, model: "general", language: "en", transcriptions: [] } });
      var H2 = i2.atom({ key: "waiting-participants", default: [] });
      var K = i2.atomFamily({ key: "waiting-participant", default: { awaitingAccess: { level: "full" }, id: "", name: "" } });
      var X = i2.selector({ key: "waitingParticipantsSelector", get: function(e3) {
        var n3 = e3.get;
        return n3(H2).map(function(e4) {
          return n3(K(e4));
        });
      } });
      exports.DailyProvider = function(e3) {
        var o3 = e3.children, a3 = function(e4, n3) {
          if (null == e4)
            return {};
          var t3, r3, i3 = {}, o4 = Object.keys(e4);
          for (r3 = 0; r3 < o4.length; r3++)
            n3.indexOf(t3 = o4[r3]) >= 0 || (i3[t3] = e4[t3]);
          return i3;
        }(e3, ["children"]), u3 = t2.useState("callObject" in a3 ? a3.callObject : null), c4 = u3[0], d3 = u3[1], f3 = t2.useRef({});
        t2.useEffect(function() {
          var e4;
          if ("callObject" in a3) {
            var n3 = (null == c4 ? void 0 : c4._callFrameId) !== (null == a3 || null == (e4 = a3.callObject) ? void 0 : e4._callFrameId);
            a3.callObject ? (n3 || !c4 && a3.callObject) && d3(a3.callObject) : d3(null);
          }
        }, [c4, a3]);
        var p3 = t2.useCallback(function(e4) {
          if ("action" in e4)
            for (var n3, t3 = function(e5, n4) {
              var t4 = "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
              if (t4)
                return (t4 = t4.call(e5)).next.bind(t4);
              if (Array.isArray(e5) || (t4 = function(e6, n5) {
                if (e6) {
                  if ("string" == typeof e6)
                    return l2(e6, void 0);
                  var t5 = Object.prototype.toString.call(e6).slice(8, -1);
                  return "Object" === t5 && e6.constructor && (t5 = e6.constructor.name), "Map" === t5 || "Set" === t5 ? Array.from(e6) : "Arguments" === t5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t5) ? l2(e6, void 0) : void 0;
                }
              }(e5))) {
                t4 && (e5 = t4);
                var r4 = 0;
                return function() {
                  return r4 >= e5.length ? { done: true } : { done: false, value: e5[r4++] };
                };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }(null != (r3 = null == (i3 = f3.current) || null == (o4 = i3[e4.action]) ? void 0 : o4.values()) ? r3 : []); !(n3 = t3()).done; ) {
              var r3, i3, o4;
              (0, n3.value)(e4);
            }
        }, []), g3 = t2.useCallback(function(e4) {
          e4 && Object.keys(f3.current).forEach(function(n3) {
            e4.off(n3, p3).on(n3, p3);
          });
        }, [p3]);
        t2.useEffect(function() {
          if (!c4) {
            if ("callObject" in a3)
              return d3(a3.callObject), void g3(a3.callObject);
            var e4 = n2.createCallObject(a3);
            d3(e4), g3(e4);
          }
        }, [c4, g3, a3]);
        var m3 = t2.useCallback(function(e4, n3, t3) {
          var r3, i3;
          f3.current[e4] || (f3.current[e4] = /* @__PURE__ */ new Map(), c4 && c4.off(e4, p3).on(e4, p3)), (null == (r3 = f3.current[e4]) ? void 0 : r3.has(t3)) || null == (i3 = f3.current[e4]) || i3.set(t3, n3);
        }, [c4, p3]), k3 = t2.useCallback(function(e4, n3) {
          var t3, r3;
          null == (t3 = f3.current[e4]) || t3.delete(n3), 0 === (null == (r3 = f3.current[e4]) ? void 0 : r3.size) && (null == c4 || c4.off(e4, p3), delete f3.current[e4]);
        }, [c4, p3]);
        return r2.createElement(i2.RecoilRoot, null, r2.createElement(s2.Provider, { value: c4 }, r2.createElement(v2.Provider, { value: { on: m3, off: k3 } }, r2.createElement(w2, null, r2.createElement(P2, null, r2.createElement(S2, null, o3))))));
      }, exports.useActiveParticipant = function(e3) {
        var n3 = void 0 === e3 ? {} : e3, r3 = n3.ignoreLocal, o3 = void 0 !== r3 && r3, a3 = n3.onActiveSpeakerChange, u3 = f2(), c4 = i2.useRecoilValue(L2), l3 = t2.useState(""), s3 = l3[1], d3 = x2(l3[0]);
        return t2.useEffect(function() {
          var e4;
          if (u3) {
            var n4 = null == u3 || null == (e4 = u3.participants()) ? void 0 : e4.local;
            o3 && c4 === (null == n4 ? void 0 : n4.session_id) || s3(c4);
          }
        }, [u3, o3, c4]), m2("active-speaker-change", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(L2, e5.activeSpeaker.peerId), setTimeout(function() {
              return null == a3 ? void 0 : a3(e5);
            }, 0);
          };
        }, [a3])), d3;
      }, exports.useAppMessage = function(e3) {
        var n3 = (void 0 === e3 ? {} : e3).onAppMessage, r3 = f2(), i3 = t2.useCallback(function(e4, n4) {
          void 0 === n4 && (n4 = "*"), r3 && r3.sendAppMessage(e4, n4);
        }, [r3]), o3 = t2.useCallback(function(e4) {
          null == n3 || n3(e4, i3);
        }, [n3, i3]);
        return m2("app-message", o3), i3;
      }, exports.useAudioTrack = function(e3) {
        return j2(e3, "audio");
      }, exports.useDaily = f2, exports.useDailyEvent = m2, exports.useDevices = function() {
        var e3 = f2(), n3 = i2.useRecoilValue(k2), r3 = i2.useRecoilValue(b2), o3 = i2.useRecoilValue(y2), a3 = i2.useRecoilValue(h2), c4 = i2.useRecoilValue(R2), l3 = t2.useContext(d2).refreshDevices, s3 = t2.useCallback(function() {
          var n4 = u2(function* (n5) {
            yield null == e3 ? void 0 : e3.setInputDevicesAsync({ audioDeviceId: null, videoDeviceId: n5 });
          });
          return function(e4) {
            return n4.apply(this, arguments);
          };
        }(), [e3]), v3 = t2.useCallback(function() {
          var n4 = u2(function* (n5) {
            yield null == e3 ? void 0 : e3.setInputDevicesAsync({ audioDeviceId: n5, videoDeviceId: null });
          });
          return function(e4) {
            return n4.apply(this, arguments);
          };
        }(), [e3]), p3 = t2.useCallback(function() {
          var n4 = u2(function* (n5) {
            yield null == e3 ? void 0 : e3.setOutputDeviceAsync({ outputDeviceId: n5 });
          });
          return function(e4) {
            return n4.apply(this, arguments);
          };
        }(), [e3]);
        return { cameras: o3, camState: n3, hasCamError: ["blocked", "in-use", "not-found"].includes(n3), hasMicError: ["blocked", "in-use", "not-found"].includes(r3), microphones: a3, micState: r3, refreshDevices: l3, setCamera: s3, setMicrophone: v3, setSpeaker: p3, speakers: c4 };
      }, exports.useInputSettings = function(e3) {
        var n3 = void 0 === e3 ? {} : e3, r3 = n3.onError, o3 = n3.onInputSettingsUpdated, a3 = i2.useRecoilValue(O2), u3 = i2.useRecoilValue(V2), c4 = f2(), l3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(O2, e5);
          };
        }, []);
        return t2.useEffect(function() {
          c4 && c4.getInputSettings().then(l3);
        }, [c4, l3]), m2("input-settings-updated", t2.useCallback(function(e4) {
          l3(e4.inputSettings), setTimeout(function() {
            return null == o3 ? void 0 : o3(e4);
          }, 0);
        }, [o3, l3])), m2("nonfatal-error", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            "input-settings-error" === e5.type && (n4(V2, e5.errorMsg), setTimeout(function() {
              return null == r3 ? void 0 : r3(e5);
            }, 0));
          };
        }, [r3])), { errorMsg: u3, inputSettings: a3, updateInputSettings: t2.useCallback(function(e4) {
          null == c4 || c4.updateInputSettings(e4);
        }, [c4]) };
      }, exports.useLiveStreaming = function(e3) {
        var n3 = void 0 === e3 ? {} : e3, r3 = n3.onLiveStreamingError, o3 = n3.onLiveStreamingStarted, a3 = n3.onLiveStreamingStopped, u3 = f2(), l3 = i2.useRecoilValue(M2);
        return m2("live-streaming-started", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(M2, { isLiveStreaming: true, layout: null == e5 ? void 0 : e5.layout }), setTimeout(function() {
              return null == o3 ? void 0 : o3(e5);
            }, 0);
          };
        }, [o3])), m2("live-streaming-stopped", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(M2, function(e6) {
              return c3({}, e6, { isLiveStreaming: false, layout: void 0 });
            }), setTimeout(function() {
              return null == a3 ? void 0 : a3(e5);
            }, 0);
          };
        }, [a3])), m2("live-streaming-error", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(M2, function(n5) {
              return c3({}, n5, { errorMsg: e5.errorMsg });
            }), setTimeout(function() {
              return null == r3 ? void 0 : r3(e5);
            }, 0);
          };
        }, [r3])), c3({}, l3, { startLiveStreaming: t2.useCallback(function(e4) {
          u3 && u3.startLiveStreaming(e4);
        }, [u3]), stopLiveStreaming: t2.useCallback(function() {
          u3 && u3.stopLiveStreaming();
        }, [u3]), updateLiveStreaming: t2.useCallback(function(e4) {
          u3 && u3.updateLiveStreaming({ layout: e4.layout });
        }, [u3]) });
      }, exports.useLocalParticipant = function() {
        var e3 = i2.useRecoilValue(T2);
        return x2(e3);
      }, exports.useLocalSessionId = B2, exports.useMediaTrack = j2, exports.useNetwork = function(e3) {
        var n3 = void 0 === e3 ? {} : e3, r3 = n3.onNetworkConnection, o3 = n3.onNetworkQualityChange, a3 = f2(), c4 = i2.useRecoilValue(U2), l3 = i2.useRecoilValue(N2), s3 = i2.useRecoilValue(q2), d3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return u2(function* () {
            if (a3) {
              var e5 = yield a3.getNetworkTopology();
              e5 && "none" !== (null == e5 ? void 0 : e5.topology) && n4(U2, e5.topology);
            }
          });
        }, [a3]), v3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return function(e5) {
            n4(function(n5) {
              var t3 = n5.set;
              switch (e5.event) {
                case "connected":
                  "peer-to-peer" === e5.type && t3(U2, "peer"), "sfu" === e5.type && t3(U2, "sfu");
              }
            }), setTimeout(function() {
              return null == r3 ? void 0 : r3(e5);
            }, 0);
          };
        }, [r3]), p3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return function(e5) {
            n4(function(n5) {
              var t3 = n5.set;
              t3(N2, function(n6) {
                return n6 !== e5.quality ? e5.quality : n6;
              }), t3(q2, function(n6) {
                return n6 !== e5.threshold ? e5.threshold : n6;
              });
            }), setTimeout(function() {
              return null == o3 ? void 0 : o3(e5);
            }, 0);
          };
        }, [o3]);
        return m2("joined-meeting", d3), m2("network-connection", v3), m2("network-quality-change", p3), t2.useEffect(function() {
          a3 && !c4 && d3();
        }, [a3, d3, c4]), { getStats: t2.useCallback(u2(function* () {
          var e4 = yield null == a3 ? void 0 : a3.getNetworkStats();
          return null == e4 ? void 0 : e4.stats;
        }), [a3]), quality: l3, threshold: s3, topology: c4 };
      }, exports.useParticipant = x2, exports.useParticipantIds = z2, exports.useParticipantProperty = D2, exports.useReceiveSettings = function(e3) {
        var n3 = void 0 === e3 ? {} : e3, r3 = n3.id, o3 = void 0 === r3 ? "base" : r3, a3 = n3.onReceiveSettingsUpdated, u3 = i2.useRecoilValue(Q("base")), l3 = i2.useRecoilValue(Q(o3)), s3 = f2();
        m2("receive-settings-updated", i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return function(e5) {
            n4(function(n5) {
              for (var t3 = n5.reset, r4 = n5.set, i3 = c3({}, e5.receiveSettings), a4 = 0, u4 = Object.entries(i3); a4 < u4.length; a4++) {
                var l4 = u4[a4], s4 = l4[1];
                r4(Q(l4[0]), s4);
              }
              o3 in i3 || t3(Q(o3));
            }), setTimeout(function() {
              return null == a3 ? void 0 : a3(e5);
            }, 0);
          };
        }, [o3, a3]));
        var d3 = t2.useCallback(function(e4) {
          s3 && "joined-meeting" === s3.meetingState() && (null == s3 || null == s3.updateReceiveSettings || s3.updateReceiveSettings(e4));
        }, [s3]);
        return { receiveSettings: "base" === o3 || 0 === Object.keys(l3).length ? u3 : l3, updateReceiveSettings: d3 };
      }, exports.useRecording = function(e3) {
        var n3 = void 0 === e3 ? {} : e3, r3 = n3.onRecordingData, o3 = n3.onRecordingError, a3 = n3.onRecordingStarted, u3 = n3.onRecordingStopped, l3 = f2(), s3 = i2.useRecoilValue(J2), d3 = i2.useSetRecoilState(J2), v3 = B2(), p3 = z2({ filter: "record" });
        return t2.useEffect(function() {
          var e4 = p3.length > 0, n4 = p3.includes(null != v3 ? v3 : "local");
          d3(function(t3) {
            return c3({}, t3, { isLocalParticipantRecorded: "local" !== (null == t3 ? void 0 : t3.type) && (null == t3 ? void 0 : t3.type) ? t3.isLocalParticipantRecorded : e4, isRecording: "local" !== (null == t3 ? void 0 : t3.type) && (null == t3 ? void 0 : t3.type) ? t3.isRecording : e4, local: "local" !== (null == t3 ? void 0 : t3.type) && (null == t3 ? void 0 : t3.type) || !e4 ? null == t3 ? void 0 : t3.local : n4, type: e4 ? "local" : null == t3 ? void 0 : t3.type });
          });
        }, [v3, p3, d3]), m2("recording-started", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            var t3 = true;
            switch (e5.type) {
              case "cloud-beta":
              case "cloud":
                var r4;
                v3 && "single-participant" === (null == (r4 = e5.layout) ? void 0 : r4.preset) && e5.layout.session_id !== v3 && (t3 = false);
            }
            n4(J2, { error: false, isLocalParticipantRecorded: t3, isRecording: true, layout: null == e5 ? void 0 : e5.layout, local: null == e5 ? void 0 : e5.local, recordingId: null == e5 ? void 0 : e5.recordingId, recordingStartedDate: /* @__PURE__ */ new Date(), startedBy: null == e5 ? void 0 : e5.startedBy, type: null == e5 ? void 0 : e5.type }), setTimeout(function() {
              return null == a3 ? void 0 : a3(e5);
            }, 0);
          };
        }, [v3, a3])), m2("recording-stopped", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(J2, function(e6) {
              return c3({}, e6, { isLocalParticipantRecorded: false, isRecording: false });
            }), setTimeout(function() {
              return null == u3 ? void 0 : u3(e5);
            }, 0);
          };
        }, [u3])), m2("recording-error", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(J2, function(e6) {
              return c3({}, e6, { error: true, isLocalParticipantRecorded: false, isRecording: false });
            }), setTimeout(function() {
              return null == o3 ? void 0 : o3(e5);
            }, 0);
          };
        }, [o3])), m2("recording-data", t2.useCallback(function(e4) {
          null == r3 || r3(e4);
        }, [r3])), c3({}, s3, { startRecording: t2.useCallback(function(e4) {
          l3 && l3.startRecording(e4);
        }, [l3]), stopRecording: t2.useCallback(function() {
          l3 && l3.stopRecording();
        }, [l3]), updateRecording: t2.useCallback(function(e4) {
          l3 && l3.updateRecording(e4);
        }, [l3]) });
      }, exports.useRoom = $2, exports.useScreenAudioTrack = function(e3) {
        return j2(e3, "screenAudio");
      }, exports.useScreenShare = function(e3) {
        var n3 = void 0 === e3 ? {} : e3, r3 = n3.onLocalScreenShareStarted, i3 = n3.onLocalScreenShareStopped, o3 = f2(), a3 = t2.useCallback(function(e4) {
          null == o3 || o3.startScreenShare(e4);
        }, [o3]), u3 = t2.useCallback(function() {
          null == o3 || o3.stopScreenShare();
        }, [o3]);
        m2("local-screen-share-started", t2.useCallback(function() {
          return null == r3 ? void 0 : r3();
        }, [r3])), m2("local-screen-share-stopped", t2.useCallback(function() {
          return null == i3 ? void 0 : i3();
        }, [i3]));
        var c4 = z2({ filter: "screen" }), l3 = t2.useMemo(function() {
          return c4.map(function(e4) {
            var n4, t3 = Object.values(null != (n4 = null == o3 || null == o3.participants ? void 0 : o3.participants()) ? n4 : {}).find(function(n5) {
              return n5.session_id === e4;
            });
            if (t3)
              return { local: t3.local, screenAudio: t3.tracks.screenAudio, screenVideo: t3.tracks.screenVideo, screenId: e4 + "-screen", session_id: e4 };
          }).filter(function(e4) {
            return !!e4;
          });
        }, [o3, c4]);
        return { isSharingScreen: l3.some(function(e4) {
          return e4.local;
        }), screens: l3, startScreenShare: a3, stopScreenShare: u3 };
      }, exports.useScreenVideoTrack = function(e3) {
        return j2(e3, "screenVideo");
      }, exports.useThrottledDailyEvent = C2, exports.useTranscription = function(e3) {
        var n3, r3 = void 0 === e3 ? {} : e3, o3 = r3.onTranscriptionAppData, a3 = r3.onTranscriptionError, u3 = r3.onTranscriptionStarted, l3 = r3.onTranscriptionStopped, s3 = f2(), d3 = i2.useRecoilValue(G2), v3 = i2.useSetRecoilState(G2), p3 = $2();
        return t2.useEffect(function() {
          var e4;
          (null == p3 || null == (e4 = p3.domainConfig) ? void 0 : e4.enable_transcription) && v3(function(e5) {
            return c3({}, e5, { isTranscriptionEnabled: true });
          });
        }, [null == p3 || null == (n3 = p3.domainConfig) ? void 0 : n3.enable_transcription, v3]), m2("transcription-started", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(G2, { isTranscriptionEnabled: true, error: false, isTranscribing: true, model: e5.model, language: e5.language, transcriptionStartDate: /* @__PURE__ */ new Date(), startedBy: e5.startedBy, transcriptions: [] }), setTimeout(function() {
              return null == u3 ? void 0 : u3(e5);
            }, 0);
          };
        }, [u3])), m2("transcription-stopped", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(G2, function(n5) {
              return c3({}, n5, { updatedBy: null == e5 ? void 0 : e5.updatedBy, isTranscribing: false });
            }), setTimeout(function() {
              return null == l3 ? void 0 : l3(e5);
            }, 0);
          };
        }, [l3])), m2("transcription-error", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(G2, function(e6) {
              return c3({}, e6, { error: true, isTranscribing: false });
            }), setTimeout(function() {
              return null == a3 ? void 0 : a3(e5);
            }, 0);
          };
        }, [a3])), m2("app-message", i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            var t3;
            "transcription" === (null == e5 ? void 0 : e5.fromId) && (null == e5 || null == (t3 = e5.data) ? void 0 : t3.is_final) && (n4(G2, function(n5) {
              return c3({}, n5, { isTranscribing: true, transcriptions: [].concat(n5.transcriptions, [e5.data]) });
            }), setTimeout(function() {
              return null == o3 ? void 0 : o3(e5);
            }, 0));
          };
        }, [o3])), c3({}, d3, { startTranscription: t2.useCallback(function(e4) {
          s3 && s3.startTranscription(e4);
        }, [s3]), stopTranscription: t2.useCallback(function() {
          s3 && s3.stopTranscription();
        }, [s3]) });
      }, exports.useVideoTrack = function(e3) {
        return j2(e3, "video");
      }, exports.useWaitingParticipants = function(e3) {
        var n3 = void 0 === e3 ? {} : e3, r3 = n3.onWaitingParticipantAdded, o3 = n3.onWaitingParticipantRemoved, a3 = n3.onWaitingParticipantUpdated, u3 = f2(), c4 = i2.useRecoilValue(X), l3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return function(e5) {
            n4(function(n5) {
              var t3 = n5.set;
              t3(H2, function(n6) {
                return n6.includes(e5.participant.id) ? n6 : [].concat(n6, [e5.participant.id]);
              }), t3(K(e5.participant.id), e5.participant);
            }), setTimeout(function() {
              return null == r3 ? void 0 : r3(e5);
            }, 0);
          };
        }, [r3]), s3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.transact_UNSTABLE;
          return function(e5) {
            n4(function(n5) {
              var t3 = n5.reset;
              (0, n5.set)(H2, function(n6) {
                return n6.filter(function(n7) {
                  return n7 !== e5.participant.id;
                });
              }), t3(K(e5.participant.id));
            }), setTimeout(function() {
              return null == o3 ? void 0 : o3(e5);
            }, 0);
          };
        }, [o3]), d3 = i2.useRecoilCallback(function(e4) {
          var n4 = e4.set;
          return function(e5) {
            n4(K(e5.participant.id), e5.participant), setTimeout(function() {
              return null == a3 ? void 0 : a3(e5);
            }, 0);
          };
        }, [a3]);
        m2("waiting-participant-added", l3), m2("waiting-participant-removed", s3), m2("waiting-participant-updated", d3);
        var v3 = t2.useCallback(function(e4, n4) {
          "*" !== e4 ? null == u3 || u3.updateWaitingParticipant(e4, { grantRequestedAccess: n4 }) : null == u3 || u3.updateWaitingParticipants({ "*": { grantRequestedAccess: n4 } });
        }, [u3]);
        return { waitingParticipants: c4, grantAccess: t2.useCallback(function(e4) {
          v3(e4, true);
        }, [v3]), denyAccess: t2.useCallback(function(e4) {
          v3(e4, false);
        }, [v3]) };
      };
    }
  });

  // ../assets/node_modules/@daily-co/daily-react-hooks/dist/daily-react-hooks.cjs.development.js
  var require_daily_react_hooks_cjs_development = __commonJS({
    "../assets/node_modules/@daily-co/daily-react-hooks/dist/daily-react-hooks.cjs.development.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var DailyIframe2 = _interopDefault(require_daily_iframe());
      var React7 = require_react();
      var React__default = _interopDefault(React7);
      var recoil = require_cjs();
      var throttle = _interopDefault(require_lodash());
      function asyncGeneratorStep(gen, resolve, reject2, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject2(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function() {
          var self2 = this, args = arguments;
          return new Promise(function(resolve, reject2) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject2, _next, _throw, "next", value);
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject2, _next, _throw, "throw", err);
            }
            _next(void 0);
          });
        };
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = arguments[i2];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i2;
        for (i2 = 0; i2 < sourceKeys.length; i2++) {
          key = sourceKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _unsupportedIterableToArray(o2, minLen) {
        if (!o2)
          return;
        if (typeof o2 === "string")
          return _arrayLikeToArray(o2, minLen);
        var n2 = Object.prototype.toString.call(o2).slice(8, -1);
        if (n2 === "Object" && o2.constructor)
          n2 = o2.constructor.name;
        if (n2 === "Map" || n2 === "Set")
          return Array.from(o2);
        if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
          return _arrayLikeToArray(o2, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
          arr2[i2] = arr[i2];
        return arr2;
      }
      function _createForOfIteratorHelperLoose(o2, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
        if (it)
          return (it = it.call(o2)).next.bind(it);
        if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i2 = 0;
          return function() {
            if (i2 >= o2.length)
              return {
                done: true
              };
            return {
              done: false,
              value: o2[i2++]
            };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var DailyContext = /* @__PURE__ */ React7.createContext(null);
      var DailyDevicesContext = /* @__PURE__ */ React7.createContext({
        refreshDevices: function refreshDevices() {
          return Promise.resolve();
        }
      });
      var useDaily = function useDaily2() {
        var daily = React7.useContext(DailyContext);
        return daily;
      };
      var DailyEventContext = /* @__PURE__ */ React7.createContext({
        on: function on() {
        },
        off: function off() {
        }
      });
      var uniqueCounter = 0;
      var getUnique = function getUnique2() {
        return uniqueCounter++;
      };
      var useDailyEvent = function useDailyEvent2(ev, callback) {
        var _useContext = React7.useContext(DailyEventContext), off = _useContext.off, on = _useContext.on;
        var _useState = React7.useState(false), isBlocked = _useState[0], setIsBlocked = _useState[1];
        var reassignCount = React7.useRef(0);
        var eventId = React7.useMemo(function() {
          return getUnique();
        }, []);
        React7.useEffect(function() {
          if (!ev || isBlocked)
            return;
          if (reassignCount.current > 1e5) {
            console.error("useDailyEvent called with potentially non-memoized event callback or due to too many re-renders.\n        Memoize using useCallback to avoid re-render loop or reduce the amount of state transitions the callback depends on.\n        Passed callback for '" + ev + "' event is NOT registered.", callback);
            setIsBlocked(true);
            return;
          }
          reassignCount.current++;
          var timeout = setTimeout(function() {
            reassignCount.current = 0;
          }, 50);
          on(ev, callback, eventId);
          return function() {
            clearTimeout(timeout);
            off(ev, eventId);
          };
        }, [callback, ev, eventId, isBlocked, off, on]);
      };
      var generalCameraState = /* @__PURE__ */ recoil.atom({
        key: "general-camera-state",
        "default": "pending"
      });
      var generalMicrophoneState = /* @__PURE__ */ recoil.atom({
        key: "general-microphone-state",
        "default": "pending"
      });
      var cameraDevicesState = /* @__PURE__ */ recoil.atom({
        key: "camera-devices",
        "default": []
      });
      var microphoneDevicesState = /* @__PURE__ */ recoil.atom({
        key: "microphone-devices",
        "default": []
      });
      var speakerDevicesState = /* @__PURE__ */ recoil.atom({
        key: "speaker-devices",
        "default": []
      });
      var DailyDevices = function DailyDevices2(_ref) {
        var children = _ref.children;
        var daily = useDaily();
        var refreshDevices = recoil.useRecoilCallback(function(_ref2) {
          var transact_UNSTABLE = _ref2.transact_UNSTABLE;
          return /* @__PURE__ */ _asyncToGenerator(function* () {
            var _navigator, _navigator$mediaDevic, _navigator2, _navigator2$mediaDevi;
            if (typeof ((_navigator = navigator) == null ? void 0 : (_navigator$mediaDevic = _navigator.mediaDevices) == null ? void 0 : _navigator$mediaDevic.getUserMedia) === "undefined" || typeof ((_navigator2 = navigator) == null ? void 0 : (_navigator2$mediaDevi = _navigator2.mediaDevices) == null ? void 0 : _navigator2$mediaDevi.enumerateDevices) === "undefined") {
              transact_UNSTABLE(function(_ref4) {
                var set = _ref4.set;
                set(generalCameraState, "not-supported");
                set(generalMicrophoneState, "not-supported");
              });
              return;
            }
            if (!daily)
              return;
            try {
              var _yield$daily$enumerat = yield daily.enumerateDevices(), devices = _yield$daily$enumerat.devices;
              var cams = devices.filter(function(d2) {
                return d2.kind === "videoinput" && d2.deviceId !== "";
              });
              var mics = devices.filter(function(d2) {
                return d2.kind === "audioinput" && d2.deviceId !== "";
              });
              var speakers = devices.filter(function(d2) {
                return d2.kind === "audiooutput" && d2.deviceId !== "";
              });
              var _yield$daily$getInput = yield daily.getInputDevices(), camera = _yield$daily$getInput.camera, mic = _yield$daily$getInput.mic, speaker = _yield$daily$getInput.speaker;
              var mapDevice = function mapDevice2(device, d2, prevDevices) {
                var _prevDevices$find$sta, _prevDevices$find;
                return {
                  device: d2,
                  selected: "deviceId" in device && d2.deviceId === device.deviceId,
                  state: (_prevDevices$find$sta = (_prevDevices$find = prevDevices.find(function(p2) {
                    return p2.device.deviceId === d2.deviceId;
                  })) == null ? void 0 : _prevDevices$find.state) != null ? _prevDevices$find$sta : "granted"
                };
              };
              var sortDeviceByLabel = function sortDeviceByLabel2(a2, b2) {
                if (a2.device.deviceId === "default")
                  return -1;
                if (b2.device.deviceId === "default")
                  return 1;
                if (a2.device.label < b2.device.label)
                  return -1;
                if (a2.device.label > b2.device.label)
                  return 1;
                return 0;
              };
              transact_UNSTABLE(function(_ref5) {
                var set = _ref5.set;
                set(cameraDevicesState, function(prevCams) {
                  return cams.filter(Boolean).map(function(d2) {
                    return mapDevice(camera, d2, prevCams);
                  }).sort(sortDeviceByLabel);
                });
                set(microphoneDevicesState, function(prevMics) {
                  return mics.filter(Boolean).map(function(d2) {
                    return mapDevice(mic, d2, prevMics);
                  }).sort(sortDeviceByLabel);
                });
                set(speakerDevicesState, function(prevSpeakers) {
                  return speakers.filter(Boolean).map(function(d2) {
                    return mapDevice(speaker, d2, prevSpeakers);
                  }).sort(sortDeviceByLabel);
                });
              });
            } catch (e2) {
              transact_UNSTABLE(function(_ref6) {
                var set = _ref6.set;
                set(generalCameraState, "not-supported");
                set(generalMicrophoneState, "not-supported");
              });
            }
          });
        }, [daily]);
        var updateDeviceStates = recoil.useRecoilCallback(function(_ref7) {
          var set = _ref7.set, snapshot = _ref7.snapshot, transact_UNSTABLE = _ref7.transact_UNSTABLE;
          return /* @__PURE__ */ _asyncToGenerator(function* () {
            var _tracks$audio, _tracks$audio$blocked, _tracks$audio2, _tracks$audio2$blocke, _tracks$audio3, _tracks$audio3$blocke, _tracks$video, _tracks$video$blocked, _tracks$video2, _tracks$video2$blocke, _tracks$video3, _tracks$video3$blocke;
            if (!daily)
              return;
            var currentCamState = yield snapshot.getPromise(generalCameraState);
            var currentMicState = yield snapshot.getPromise(generalMicrophoneState);
            var tracks = daily.participants().local.tracks;
            var awaitingCamAccess = currentCamState === "pending" && tracks.video.state === "interrupted";
            var awaitingMicAccess = currentMicState === "pending" && tracks.audio.state === "interrupted";
            if ((_tracks$audio = tracks.audio) == null ? void 0 : (_tracks$audio$blocked = _tracks$audio.blocked) == null ? void 0 : _tracks$audio$blocked.byDeviceInUse) {
              transact_UNSTABLE(function(_ref9) {
                var set2 = _ref9.set;
                set2(generalMicrophoneState, "in-use");
                set2(microphoneDevicesState, function(mics) {
                  return mics.map(function(m2) {
                    return m2.selected ? _extends({}, m2, {
                      state: "in-use"
                    }) : m2;
                  });
                });
              });
            } else if ((_tracks$audio2 = tracks.audio) == null ? void 0 : (_tracks$audio2$blocke = _tracks$audio2.blocked) == null ? void 0 : _tracks$audio2$blocke.byDeviceMissing) {
              set(generalMicrophoneState, "not-found");
            } else if ((_tracks$audio3 = tracks.audio) == null ? void 0 : (_tracks$audio3$blocke = _tracks$audio3.blocked) == null ? void 0 : _tracks$audio3$blocke.byPermissions) {
              set(generalMicrophoneState, "blocked");
            } else if (!awaitingMicAccess) {
              transact_UNSTABLE(function(_ref10) {
                var set2 = _ref10.set;
                set2(generalMicrophoneState, "granted");
                set2(microphoneDevicesState, function(mics) {
                  return mics.map(function(m2) {
                    return m2.selected ? _extends({}, m2, {
                      state: "granted"
                    }) : m2;
                  });
                });
              });
            }
            if ((_tracks$video = tracks.video) == null ? void 0 : (_tracks$video$blocked = _tracks$video.blocked) == null ? void 0 : _tracks$video$blocked.byDeviceInUse) {
              transact_UNSTABLE(function(_ref11) {
                var set2 = _ref11.set;
                set2(generalCameraState, "in-use");
                set2(cameraDevicesState, function(cams) {
                  return cams.map(function(m2) {
                    return m2.selected ? _extends({}, m2, {
                      state: "in-use"
                    }) : m2;
                  });
                });
              });
            } else if ((_tracks$video2 = tracks.video) == null ? void 0 : (_tracks$video2$blocke = _tracks$video2.blocked) == null ? void 0 : _tracks$video2$blocke.byDeviceMissing) {
              set(generalCameraState, "not-found");
            } else if ((_tracks$video3 = tracks.video) == null ? void 0 : (_tracks$video3$blocke = _tracks$video3.blocked) == null ? void 0 : _tracks$video3$blocke.byPermissions) {
              set(generalCameraState, "blocked");
            } else if (!awaitingCamAccess) {
              transact_UNSTABLE(function(_ref12) {
                var set2 = _ref12.set;
                set2(generalCameraState, "granted");
                set2(cameraDevicesState, function(cams) {
                  return cams.map(function(m2) {
                    return m2.selected ? _extends({}, m2, {
                      state: "granted"
                    }) : m2;
                  });
                });
              });
            }
            refreshDevices();
          });
        }, [daily, refreshDevices]);
        useDailyEvent("participant-updated", React7.useCallback(function(ev) {
          if (!ev.participant.local)
            return;
          updateDeviceStates();
        }, [updateDeviceStates]));
        useDailyEvent("available-devices-updated", refreshDevices);
        useDailyEvent("selected-devices-updated", refreshDevices);
        useDailyEvent("camera-error", recoil.useRecoilCallback(function(_ref13) {
          var set = _ref13.set, transact_UNSTABLE = _ref13.transact_UNSTABLE;
          return function(_ref14) {
            var error = _ref14.error, _ref14$errorMsg = _ref14.errorMsg, audioOk = _ref14$errorMsg.audioOk, errorMsg = _ref14$errorMsg.errorMsg, videoOk = _ref14$errorMsg.videoOk;
            switch (error == null ? void 0 : error.type) {
              case "cam-in-use":
                set(generalCameraState, "in-use");
                break;
              case "mic-in-use":
                set(generalMicrophoneState, "in-use");
                break;
              case "cam-mic-in-use":
                transact_UNSTABLE(function(_ref15) {
                  var set2 = _ref15.set;
                  set2(generalCameraState, "in-use");
                  set2(generalMicrophoneState, "in-use");
                });
                break;
              default:
                switch (errorMsg) {
                  case "devices error":
                    transact_UNSTABLE(function(_ref16) {
                      var set2 = _ref16.set;
                      if (!videoOk)
                        set2(generalCameraState, "not-found");
                      if (!audioOk)
                        set2(generalMicrophoneState, "not-found");
                    });
                    break;
                  case "not allowed": {
                    transact_UNSTABLE(function(_ref17) {
                      var set2 = _ref17.set;
                      set2(generalCameraState, "blocked");
                      set2(generalMicrophoneState, "blocked");
                    });
                    updateDeviceStates();
                    break;
                  }
                }
                break;
            }
          };
        }, [updateDeviceStates]));
        useDailyEvent("error", recoil.useRecoilCallback(function(_ref18) {
          var transact_UNSTABLE = _ref18.transact_UNSTABLE;
          return function(_ref19) {
            var errorMsg = _ref19.errorMsg;
            switch (errorMsg) {
              case "not allowed": {
                transact_UNSTABLE(function(_ref20) {
                  var set = _ref20.set;
                  set(generalCameraState, "blocked");
                  set(generalMicrophoneState, "blocked");
                });
                updateDeviceStates();
                break;
              }
            }
          };
        }, [updateDeviceStates]));
        useDailyEvent("started-camera", recoil.useRecoilCallback(function(_ref21) {
          var transact_UNSTABLE = _ref21.transact_UNSTABLE;
          return function() {
            transact_UNSTABLE(function(_ref22) {
              var set = _ref22.set;
              set(generalCameraState, "granted");
              set(generalMicrophoneState, "granted");
            });
            updateDeviceStates();
          };
        }, [updateDeviceStates]));
        return React__default.createElement(DailyDevicesContext.Provider, {
          value: {
            refreshDevices
          }
        }, children);
      };
      var useThrottledDailyEvent = function useThrottledDailyEvent2(ev, callback, throttleTimeout) {
        if (throttleTimeout === void 0) {
          throttleTimeout = 100;
        }
        var _useContext = React7.useContext(DailyEventContext), off = _useContext.off, on = _useContext.on;
        var eventId = React7.useMemo(function() {
          return getUnique();
        }, []);
        var throttledEvents = React7.useRef([]);
        var emitEvents = React7.useMemo(function() {
          return throttle(function() {
            if (throttledEvents.current.length === 0)
              return;
            callback(throttledEvents.current);
            throttledEvents.current = [];
          }, throttleTimeout, {
            trailing: true
          });
        }, [callback, throttleTimeout]);
        React7.useEffect(function() {
          if (!ev)
            return;
          var addEvent = function addEvent2(ev2) {
            throttledEvents.current.push(ev2);
            setTimeout(emitEvents, 0);
          };
          on(ev, addEvent, eventId);
          return function() {
            off(ev, eventId);
          };
        }, [emitEvents, ev, eventId, off, on]);
      };
      var resolvePath = function resolvePath2(participant, path) {
        return String(path).split(".").filter(function(key) {
          return key.length;
        }).reduce(function(p2, key) {
          return p2 && p2[key];
        }, participant);
      };
      var resolveParticipantPaths = function resolveParticipantPaths2(participant, paths) {
        return paths.map(function(path) {
          return resolvePath(participant, path);
        });
      };
      var localIdState = /* @__PURE__ */ recoil.atom({
        key: "local-id",
        "default": ""
      });
      var participantsState = /* @__PURE__ */ recoil.atom({
        key: "participants-objects",
        "default": []
      });
      var participantState = /* @__PURE__ */ recoil.selectorFamily({
        key: "participant",
        get: function get(id) {
          return function(_ref) {
            var _participants$find;
            var get2 = _ref.get;
            var participants = get2(participantsState);
            return (_participants$find = participants.find(function(p2) {
              return p2.session_id === id;
            })) != null ? _participants$find : null;
          };
        }
      });
      var participantPropertyState = /* @__PURE__ */ recoil.selectorFamily({
        key: "participant-property",
        get: function get(_ref2) {
          var id = _ref2.id, properties = _ref2.properties;
          return function(_ref3) {
            var _participants$find2;
            var get2 = _ref3.get;
            var participants = get2(participantsState);
            var participant = (_participants$find2 = participants.find(function(p2) {
              return p2.session_id === id;
            })) != null ? _participants$find2 : null;
            return resolveParticipantPaths(participant, properties);
          };
        }
      });
      var DailyParticipants = function DailyParticipants2(_ref4) {
        var children = _ref4.children;
        var daily = useDaily();
        useDailyEvent("active-speaker-change", recoil.useRecoilCallback(function(_ref5) {
          var set = _ref5.set, snapshot = _ref5.snapshot;
          return /* @__PURE__ */ function() {
            var _ref6 = _asyncToGenerator(function* (ev) {
              var sessionId = ev.activeSpeaker.peerId;
              var participant = yield snapshot.getPromise(participantState(sessionId));
              if (!participant && daily) {
                participant = daily.participants()[sessionId];
              }
              if (!participant)
                return;
              set(participantsState, function(prev) {
                return [].concat(prev).map(function(p2) {
                  return p2.session_id === sessionId ? _extends({}, p2, {
                    last_active: /* @__PURE__ */ new Date()
                  }) : p2;
                });
              });
            });
            return function(_x) {
              return _ref6.apply(this, arguments);
            };
          }();
        }, [daily]));
        var initParticipants = recoil.useRecoilCallback(function(_ref7) {
          var set = _ref7.set;
          return /* @__PURE__ */ function() {
            var _ref8 = _asyncToGenerator(function* (participants) {
              set(localIdState, participants.local.session_id);
              set(participantsState, Object.values(participants));
            });
            return function(_x2) {
              return _ref8.apply(this, arguments);
            };
          }();
        }, []);
        React7.useEffect(function() {
          if (!daily)
            return;
          var interval = setInterval(function() {
            var participants = daily.participants();
            if (!("local" in participants))
              return;
            initParticipants(participants);
            clearInterval(interval);
          }, 100);
          return function() {
            clearInterval(interval);
          };
        }, [daily, initParticipants]);
        var handleInitEvent = React7.useCallback(function() {
          if (!daily)
            return;
          var participants = daily == null ? void 0 : daily.participants();
          if (!participants.local)
            return;
          initParticipants(participants);
        }, [daily, initParticipants]);
        useDailyEvent("started-camera", handleInitEvent);
        useDailyEvent("access-state-updated", handleInitEvent);
        useDailyEvent("joining-meeting", handleInitEvent);
        useDailyEvent("joined-meeting", React7.useCallback(function(ev) {
          initParticipants(ev.participants);
        }, [initParticipants]));
        useThrottledDailyEvent("participant-joined", recoil.useRecoilCallback(function(_ref9) {
          var set = _ref9.set;
          return /* @__PURE__ */ function() {
            var _ref10 = _asyncToGenerator(function* (evts) {
              if (!evts.length)
                return;
              set(participantsState, function(prev) {
                return [].concat(prev, evts.map(function(_ref11) {
                  var participant = _ref11.participant;
                  return participant;
                })).filter(function(participant, idx, arr) {
                  return arr.findIndex(function(p2) {
                    return p2.session_id === participant.session_id;
                  }) == idx;
                });
              });
            });
            return function(_x3) {
              return _ref10.apply(this, arguments);
            };
          }();
        }, []));
        useThrottledDailyEvent("participant-updated", recoil.useRecoilCallback(function(_ref12) {
          var transact_UNSTABLE = _ref12.transact_UNSTABLE;
          return function(evts) {
            transact_UNSTABLE(function(_ref13) {
              var set = _ref13.set;
              evts.forEach(function(_ref14) {
                var participant = _ref14.participant;
                set(participantsState, function(prev) {
                  return [].concat(prev).map(function(p2) {
                    return p2.session_id === participant.session_id ? participant : p2;
                  });
                });
              });
            });
          };
        }, []));
        useThrottledDailyEvent("participant-left", recoil.useRecoilCallback(function(_ref15) {
          var set = _ref15.set;
          return function(evts) {
            set(participantsState, function(prev) {
              return [].concat(prev).filter(function(p2) {
                return !evts.some(function(ev) {
                  return ev.participant.session_id === p2.session_id;
                });
              });
            });
          };
        }, []));
        useDailyEvent("left-meeting", recoil.useRecoilCallback(function(_ref16) {
          var reset = _ref16.reset;
          return function() {
            reset(localIdState);
            reset(participantsState);
          };
        }, []));
        return React__default.createElement(React__default.Fragment, null, children);
      };
      var roomState = /* @__PURE__ */ recoil.atom({
        key: "room",
        "default": null
      });
      var DailyRoom = function DailyRoom2(_ref) {
        var children = _ref.children;
        var daily = useDaily();
        var updateRoom = recoil.useRecoilCallback(function(_ref2) {
          var set = _ref2.set;
          return /* @__PURE__ */ _asyncToGenerator(function* () {
            if (!daily || daily.meetingState() === "left-meeting")
              return;
            var room = yield daily.room();
            if (room && "id" in room) {
              set(roomState, room);
            }
            return room;
          });
        }, [daily]);
        useDailyEvent("access-state-updated", updateRoom);
        return React__default.createElement(React__default.Fragment, null, children);
      };
      var DailyProvider2 = function DailyProvider3(_ref) {
        var children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["children"]);
        var _useState = React7.useState("callObject" in props ? props.callObject : null), callObject = _useState[0], setCallObject = _useState[1];
        var eventsMap = React7.useRef({});
        React7.useEffect(function() {
          var _props$callObject;
          if (!("callObject" in props))
            return;
          var callFrameIdChanged = (
            // TODO: Replace _callFrameId check with something "official".
            // @ts-ignore
            (callObject == null ? void 0 : callObject._callFrameId) !== (props == null ? void 0 : (_props$callObject = props.callObject) == null ? void 0 : _props$callObject._callFrameId)
          );
          var callObjectNullified = !props.callObject;
          var callObjectCreated = !callObject && props.callObject;
          if (callObjectNullified) {
            setCallObject(null);
          } else if (callFrameIdChanged || callObjectCreated) {
            setCallObject(props.callObject);
          }
        }, [callObject, props]);
        var handleEvent = React7.useCallback(function(ev) {
          if (!("action" in ev))
            return;
          var event = ev.action;
          for (var _iterator = _createForOfIteratorHelperLoose((_eventsMap$current$ev = (_eventsMap$current = eventsMap.current) == null ? void 0 : (_eventsMap$current$ev2 = _eventsMap$current[event]) == null ? void 0 : _eventsMap$current$ev2.values()) != null ? _eventsMap$current$ev : []), _step; !(_step = _iterator()).done; ) {
            var _eventsMap$current$ev, _eventsMap$current, _eventsMap$current$ev2;
            var cb = _step.value;
            cb(ev);
          }
        }, []);
        var initEventHandlers = React7.useCallback(function(daily) {
          if (!daily)
            return;
          Object.keys(eventsMap.current).forEach(function(event) {
            daily.off(event, handleEvent).on(event, handleEvent);
          });
        }, [handleEvent]);
        React7.useEffect(function() {
          if (callObject)
            return;
          if ("callObject" in props) {
            setCallObject(props.callObject);
            initEventHandlers(props.callObject);
            return;
          }
          var co = DailyIframe2.createCallObject(props);
          setCallObject(co);
          initEventHandlers(co);
        }, [callObject, initEventHandlers, props]);
        var on = React7.useCallback(function(ev, cb, key) {
          var _eventsMap$current$ev3;
          if (!eventsMap.current[ev]) {
            eventsMap.current[ev] = /* @__PURE__ */ new Map();
            if (callObject) {
              callObject.off(ev, handleEvent).on(ev, handleEvent);
            }
          }
          if (!((_eventsMap$current$ev3 = eventsMap.current[ev]) == null ? void 0 : _eventsMap$current$ev3.has(key))) {
            var _eventsMap$current$ev4;
            (_eventsMap$current$ev4 = eventsMap.current[ev]) == null ? void 0 : _eventsMap$current$ev4.set(key, cb);
          }
        }, [callObject, handleEvent]);
        var off = React7.useCallback(function(ev, key) {
          var _eventsMap$current$ev5, _eventsMap$current$ev6;
          (_eventsMap$current$ev5 = eventsMap.current[ev]) == null ? void 0 : _eventsMap$current$ev5["delete"](key);
          if (((_eventsMap$current$ev6 = eventsMap.current[ev]) == null ? void 0 : _eventsMap$current$ev6.size) === 0) {
            callObject == null ? void 0 : callObject.off(ev, handleEvent);
            delete eventsMap.current[ev];
          }
        }, [callObject, handleEvent]);
        return React__default.createElement(recoil.RecoilRoot, null, React__default.createElement(DailyContext.Provider, {
          value: callObject
        }, React__default.createElement(DailyEventContext.Provider, {
          value: {
            on,
            off
          }
        }, React__default.createElement(DailyRoom, null, React__default.createElement(DailyParticipants, null, React__default.createElement(DailyDevices, null, children))))));
      };
      var useParticipant = function useParticipant2(sessionId, _temp) {
        var _ref = _temp === void 0 ? {} : _temp, onParticipantLeft = _ref.onParticipantLeft, onParticipantUpdated = _ref.onParticipantUpdated;
        var participant = recoil.useRecoilValue(participantState(sessionId));
        useThrottledDailyEvent("participant-updated", React7.useCallback(function(evts) {
          var filteredEvts = evts.filter(function(ev) {
            return ev.participant.session_id === sessionId;
          });
          if (!filteredEvts.length)
            return;
          filteredEvts.forEach(function(ev) {
            setTimeout(function() {
              return onParticipantUpdated == null ? void 0 : onParticipantUpdated(ev);
            }, 0);
          });
        }, [onParticipantUpdated, sessionId]));
        useThrottledDailyEvent("participant-left", React7.useCallback(function(evts) {
          var filteredEvts = evts.filter(function(ev2) {
            return ev2.participant.session_id === sessionId;
          });
          if (!filteredEvts.length)
            return;
          var ev = evts[evts.length - 1];
          setTimeout(function() {
            return onParticipantLeft == null ? void 0 : onParticipantLeft(ev);
          }, 0);
        }, [onParticipantLeft, sessionId]));
        return participant;
      };
      var activeIdState = /* @__PURE__ */ recoil.atom({
        key: "active-id",
        "default": ""
      });
      var useActiveParticipant = function useActiveParticipant2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$ignoreLocal = _ref.ignoreLocal, ignoreLocal = _ref$ignoreLocal === void 0 ? false : _ref$ignoreLocal, onActiveSpeakerChange = _ref.onActiveSpeakerChange;
        var daily = useDaily();
        var recentActiveId = recoil.useRecoilValue(activeIdState);
        var _useState = React7.useState(""), activeId = _useState[0], setActiveId = _useState[1];
        var activeParticipant = useParticipant(activeId);
        React7.useEffect(function() {
          var _daily$participants;
          if (!daily)
            return;
          var local = daily == null ? void 0 : (_daily$participants = daily.participants()) == null ? void 0 : _daily$participants.local;
          if (ignoreLocal && recentActiveId === (local == null ? void 0 : local.session_id))
            return;
          setActiveId(recentActiveId);
        }, [daily, ignoreLocal, recentActiveId]);
        useDailyEvent("active-speaker-change", recoil.useRecoilCallback(function(_ref2) {
          var set = _ref2.set;
          return function(ev) {
            set(activeIdState, ev.activeSpeaker.peerId);
            setTimeout(function() {
              return onActiveSpeakerChange == null ? void 0 : onActiveSpeakerChange(ev);
            }, 0);
          };
        }, [onActiveSpeakerChange]));
        return activeParticipant;
      };
      var useAppMessage = function useAppMessage2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, onAppMessage = _ref.onAppMessage;
        var daily = useDaily();
        var sendAppMessage = React7.useCallback(function(data, to) {
          if (to === void 0) {
            to = "*";
          }
          if (!daily)
            return;
          daily.sendAppMessage(data, to);
        }, [daily]);
        var handleAppMessage = React7.useCallback(function(ev) {
          onAppMessage == null ? void 0 : onAppMessage(ev, sendAppMessage);
        }, [onAppMessage, sendAppMessage]);
        useDailyEvent("app-message", handleAppMessage);
        return sendAppMessage;
      };
      var useParticipantProperty = function useParticipantProperty2(participantId, propertyPaths) {
        var participantProperties = recoil.useRecoilValue(participantPropertyState({
          id: participantId,
          properties: Array.isArray(propertyPaths) ? propertyPaths : [propertyPaths]
        }));
        return Array.isArray(propertyPaths) ? participantProperties : participantProperties[0];
      };
      var useMediaTrack2 = function useMediaTrack3(participantId, type) {
        if (type === void 0) {
          type = "video";
        }
        var trackState = useParticipantProperty(participantId, "tracks." + type);
        if (!trackState)
          return {
            isOff: true,
            persistentTrack: void 0,
            state: "off",
            subscribed: false
          };
        return _extends({}, trackState, {
          isOff: trackState.state === "blocked" || trackState.state === "off"
        });
      };
      var useAudioTrack = function useAudioTrack2(participantId) {
        return useMediaTrack2(participantId, "audio");
      };
      var useDevices = function useDevices2() {
        var daily = useDaily();
        var camState = recoil.useRecoilValue(generalCameraState);
        var micState = recoil.useRecoilValue(generalMicrophoneState);
        var camDevices = recoil.useRecoilValue(cameraDevicesState);
        var micDevices = recoil.useRecoilValue(microphoneDevicesState);
        var speakerDevices = recoil.useRecoilValue(speakerDevicesState);
        var _useContext = React7.useContext(DailyDevicesContext), refreshDevices = _useContext.refreshDevices;
        var setCamera = React7.useCallback(/* @__PURE__ */ function() {
          var _ref = _asyncToGenerator(function* (deviceId) {
            yield daily == null ? void 0 : daily.setInputDevicesAsync({
              audioDeviceId: null,
              videoDeviceId: deviceId
            });
          });
          return function(_x) {
            return _ref.apply(this, arguments);
          };
        }(), [daily]);
        var setMicrophone = React7.useCallback(/* @__PURE__ */ function() {
          var _ref2 = _asyncToGenerator(function* (deviceId) {
            yield daily == null ? void 0 : daily.setInputDevicesAsync({
              audioDeviceId: deviceId,
              videoDeviceId: null
            });
          });
          return function(_x2) {
            return _ref2.apply(this, arguments);
          };
        }(), [daily]);
        var setSpeaker = React7.useCallback(/* @__PURE__ */ function() {
          var _ref3 = _asyncToGenerator(function* (deviceId) {
            yield daily == null ? void 0 : daily.setOutputDeviceAsync({
              outputDeviceId: deviceId
            });
          });
          return function(_x3) {
            return _ref3.apply(this, arguments);
          };
        }(), [daily]);
        return {
          /**
           * A list of the user's camera (videoinput) devices. See [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) for more info.
           */
          cameras: camDevices,
          /**
           * The general state for camera access.
           */
          camState,
          /**
           * Indicates that there's an issue with camera devices.
           */
          hasCamError: ["blocked", "in-use", "not-found"].includes(camState),
          /**
           * Indicates that there's an issue with microphone devices.
           */
          hasMicError: ["blocked", "in-use", "not-found"].includes(micState),
          /**
           * A list of the user's microphone (audioinput) devices. See [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) for more info.
           */
          microphones: micDevices,
          /**
           * The general state for microphone access.
           */
          micState,
          /**
           * Refreshes the list of devices using [enumerateDevices](https://docs.daily.co/reference/daily-js/instance-methods/enumerate-devices).
           */
          refreshDevices,
          /**
           * Allows to switch to the camera with the specified deviceId. Calls [setInputDevicesAsync](https://docs.daily.co/reference/daily-js/instance-methods/set-input-devices-async) internally.
           */
          setCamera,
          /**
           * Allows to switch to the microphone with the specified deviceId. Calls [setInputDevicesAsync](https://docs.daily.co/reference/daily-js/instance-methods/set-input-devices-async) internally.
           */
          setMicrophone,
          /**
           * Allows to switch to the speaker with the specified deviceId. Calls [setOutputDevice](https://docs.daily.co/reference/daily-js/instance-methods/set-output-device) internally.
           */
          setSpeaker,
          /**
           * A list of the user's speaker (audiooutput) devices. See [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) for more info.
           */
          speakers: speakerDevices
        };
      };
      var inputSettingsState = /* @__PURE__ */ recoil.atom({
        key: "input-settings",
        "default": null
      });
      var errorState = /* @__PURE__ */ recoil.atom({
        key: "input-settings-error",
        "default": null
      });
      var useInputSettings = function useInputSettings2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, onError = _ref.onError, onInputSettingsUpdated = _ref.onInputSettingsUpdated;
        var inputSettings = recoil.useRecoilValue(inputSettingsState);
        var errorMsg = recoil.useRecoilValue(errorState);
        var daily = useDaily();
        var updateInputSettingsState = recoil.useRecoilCallback(function(_ref2) {
          var set = _ref2.set;
          return function(inputSettings2) {
            set(inputSettingsState, inputSettings2);
          };
        }, []);
        React7.useEffect(function() {
          if (!daily)
            return;
          daily.getInputSettings().then(updateInputSettingsState);
        }, [daily, updateInputSettingsState]);
        useDailyEvent("input-settings-updated", React7.useCallback(function(ev) {
          updateInputSettingsState(ev.inputSettings);
          setTimeout(function() {
            return onInputSettingsUpdated == null ? void 0 : onInputSettingsUpdated(ev);
          }, 0);
        }, [onInputSettingsUpdated, updateInputSettingsState]));
        useDailyEvent("nonfatal-error", recoil.useRecoilCallback(function(_ref3) {
          var set = _ref3.set;
          return function(ev) {
            if (ev.type !== "input-settings-error")
              return;
            set(errorState, ev.errorMsg);
            setTimeout(function() {
              return onError == null ? void 0 : onError(ev);
            }, 0);
          };
        }, [onError]));
        var updateInputSettings = React7.useCallback(function(inputSettings2) {
          daily == null ? void 0 : daily.updateInputSettings(inputSettings2);
        }, [daily]);
        return {
          errorMsg,
          inputSettings,
          updateInputSettings
        };
      };
      var liveStreamingState = /* @__PURE__ */ recoil.atom({
        key: "live-streaming",
        "default": {
          errorMsg: void 0,
          isLiveStreaming: false,
          layout: void 0
        }
      });
      var useLiveStreaming = function useLiveStreaming2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, onLiveStreamingError = _ref.onLiveStreamingError, onLiveStreamingStarted = _ref.onLiveStreamingStarted, onLiveStreamingStopped = _ref.onLiveStreamingStopped;
        var daily = useDaily();
        var state = recoil.useRecoilValue(liveStreamingState);
        useDailyEvent("live-streaming-started", recoil.useRecoilCallback(function(_ref2) {
          var set = _ref2.set;
          return function(ev) {
            set(liveStreamingState, {
              isLiveStreaming: true,
              layout: ev == null ? void 0 : ev.layout
            });
            setTimeout(function() {
              return onLiveStreamingStarted == null ? void 0 : onLiveStreamingStarted(ev);
            }, 0);
          };
        }, [onLiveStreamingStarted]));
        useDailyEvent("live-streaming-stopped", recoil.useRecoilCallback(function(_ref3) {
          var set = _ref3.set;
          return function(ev) {
            set(liveStreamingState, function(prevState) {
              return _extends({}, prevState, {
                isLiveStreaming: false,
                layout: void 0
              });
            });
            setTimeout(function() {
              return onLiveStreamingStopped == null ? void 0 : onLiveStreamingStopped(ev);
            }, 0);
          };
        }, [onLiveStreamingStopped]));
        useDailyEvent("live-streaming-error", recoil.useRecoilCallback(function(_ref4) {
          var set = _ref4.set;
          return function(ev) {
            set(liveStreamingState, function(prevState) {
              return _extends({}, prevState, {
                errorMsg: ev.errorMsg
              });
            });
            setTimeout(function() {
              return onLiveStreamingError == null ? void 0 : onLiveStreamingError(ev);
            }, 0);
          };
        }, [onLiveStreamingError]));
        var startLiveStreaming = React7.useCallback(function(options) {
          if (!daily)
            return;
          daily.startLiveStreaming(options);
        }, [daily]);
        var stopLiveStreaming = React7.useCallback(function() {
          if (!daily)
            return;
          daily.stopLiveStreaming();
        }, [daily]);
        var updateLiveStreaming = React7.useCallback(function(_ref5) {
          var layout = _ref5.layout;
          if (!daily)
            return;
          daily.updateLiveStreaming({
            layout
          });
        }, [daily]);
        return _extends({}, state, {
          startLiveStreaming,
          stopLiveStreaming,
          updateLiveStreaming
        });
      };
      var useLocalParticipant = function useLocalParticipant2() {
        var localId = recoil.useRecoilValue(localIdState);
        return useParticipant(localId);
      };
      var useLocalSessionId = function useLocalSessionId2() {
        return recoil.useRecoilValue(localIdState) || null;
      };
      var topologyState = /* @__PURE__ */ recoil.atom({
        key: "topology",
        "default": "none"
      });
      var networkQualityState = /* @__PURE__ */ recoil.atom({
        key: "networkQuality",
        "default": 100
      });
      var networkThresholdState = /* @__PURE__ */ recoil.atom({
        key: "networkThreshold",
        "default": "good"
      });
      var useNetwork = function useNetwork2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, onNetworkConnection = _ref.onNetworkConnection, onNetworkQualityChange = _ref.onNetworkQualityChange;
        var daily = useDaily();
        var topology = recoil.useRecoilValue(topologyState);
        var quality = recoil.useRecoilValue(networkQualityState);
        var threshold = recoil.useRecoilValue(networkThresholdState);
        var initTopology = recoil.useRecoilCallback(function(_ref2) {
          var set = _ref2.set;
          return /* @__PURE__ */ _asyncToGenerator(function* () {
            if (!daily)
              return;
            var topology2 = yield daily.getNetworkTopology();
            if (!topology2 || (topology2 == null ? void 0 : topology2.topology) === "none")
              return;
            set(topologyState, topology2.topology);
          });
        }, [daily]);
        var handleNetworkConnection = recoil.useRecoilCallback(function(_ref4) {
          var transact_UNSTABLE = _ref4.transact_UNSTABLE;
          return function(ev) {
            transact_UNSTABLE(function(_ref5) {
              var set = _ref5.set;
              switch (ev.event) {
                case "connected":
                  if (ev.type === "peer-to-peer")
                    set(topologyState, "peer");
                  if (ev.type === "sfu")
                    set(topologyState, "sfu");
                  break;
              }
            });
            setTimeout(function() {
              return onNetworkConnection == null ? void 0 : onNetworkConnection(ev);
            }, 0);
          };
        }, [onNetworkConnection]);
        var handleNetworkQualityChange = recoil.useRecoilCallback(function(_ref6) {
          var transact_UNSTABLE = _ref6.transact_UNSTABLE;
          return function(ev) {
            transact_UNSTABLE(function(_ref7) {
              var set = _ref7.set;
              set(networkQualityState, function(prevQuality) {
                return prevQuality !== ev.quality ? ev.quality : prevQuality;
              });
              set(networkThresholdState, function(prevThreshold) {
                return prevThreshold !== ev.threshold ? ev.threshold : prevThreshold;
              });
            });
            setTimeout(function() {
              return onNetworkQualityChange == null ? void 0 : onNetworkQualityChange(ev);
            }, 0);
          };
        }, [onNetworkQualityChange]);
        useDailyEvent("joined-meeting", initTopology);
        useDailyEvent("network-connection", handleNetworkConnection);
        useDailyEvent("network-quality-change", handleNetworkQualityChange);
        React7.useEffect(function() {
          if (!daily || topology)
            return;
          initTopology();
        }, [daily, initTopology, topology]);
        var getStats = React7.useCallback(/* @__PURE__ */ _asyncToGenerator(function* () {
          var newStats = yield daily == null ? void 0 : daily.getNetworkStats();
          return newStats == null ? void 0 : newStats.stats;
        }), [daily]);
        return {
          getStats,
          quality,
          threshold,
          topology
        };
      };
      var defaultFilter = Boolean;
      var defaultSort = function defaultSort2() {
        return 0;
      };
      var useParticipantIds = function useParticipantIds2(_temp) {
        var _ref = _temp === void 0 ? {
          filter: defaultFilter,
          sort: defaultSort
        } : _temp, _ref$filter = _ref.filter, filter = _ref$filter === void 0 ? defaultFilter : _ref$filter, onActiveSpeakerChange = _ref.onActiveSpeakerChange, onParticipantJoined = _ref.onParticipantJoined, onParticipantLeft = _ref.onParticipantLeft, onParticipantUpdated = _ref.onParticipantUpdated, _ref$sort = _ref.sort, sort = _ref$sort === void 0 ? defaultSort : _ref$sort;
        var allParticipants = recoil.useRecoilValue(participantsState);
        var sortedIds = React7.useMemo(function() {
          var filterFn = defaultFilter;
          switch (filter) {
            case "local":
              filterFn = function filterFn2(p2) {
                return p2.local;
              };
              break;
            case "owner":
              filterFn = function filterFn2(p2) {
                return p2.owner;
              };
              break;
            case "record":
              filterFn = function filterFn2(p2) {
                return p2.record;
              };
              break;
            case "remote":
              filterFn = function filterFn2(p2) {
                return !p2.local;
              };
              break;
            case "screen":
              filterFn = function filterFn2(p2) {
                return p2.screen;
              };
              break;
            default:
              filterFn = filter;
          }
          var sortFn;
          switch (sort) {
            case "joined_at":
            case "session_id":
            case "user_id":
            case "user_name":
              sortFn = function sortFn2(a2, b2) {
                var aSort = a2[sort];
                var bSort = b2[sort];
                if (aSort !== void 0 || bSort !== void 0) {
                  if (aSort === void 0)
                    return -1;
                  if (bSort === void 0)
                    return 1;
                  if (aSort > bSort)
                    return 1;
                  if (aSort < bSort)
                    return -1;
                }
                return 0;
              };
              break;
            default:
              sortFn = sort;
              break;
          }
          return allParticipants.filter(filterFn).sort(sortFn).map(function(p2) {
            return p2.session_id;
          }).filter(Boolean);
        }, [allParticipants, filter, sort]);
        useThrottledDailyEvent("participant-joined", React7.useCallback(function(evts) {
          if (!evts.length)
            return;
          evts.forEach(function(ev) {
            return setTimeout(function() {
              return onParticipantJoined == null ? void 0 : onParticipantJoined(ev);
            }, 0);
          });
        }, [onParticipantJoined]));
        useThrottledDailyEvent("participant-updated", React7.useCallback(function(evts) {
          if (!evts.length)
            return;
          evts.forEach(function(ev) {
            return setTimeout(function() {
              return onParticipantUpdated == null ? void 0 : onParticipantUpdated(ev);
            }, 0);
          });
        }, [onParticipantUpdated]));
        useThrottledDailyEvent("active-speaker-change", React7.useCallback(/* @__PURE__ */ function() {
          var _ref2 = _asyncToGenerator(function* (evts) {
            if (!evts.length)
              return;
            evts.forEach(function(ev) {
              return setTimeout(function() {
                return onActiveSpeakerChange == null ? void 0 : onActiveSpeakerChange(ev);
              }, 0);
            });
          });
          return function(_x) {
            return _ref2.apply(this, arguments);
          };
        }(), [onActiveSpeakerChange]));
        useThrottledDailyEvent("participant-left", React7.useCallback(function(evts) {
          if (!evts.length)
            return;
          evts.forEach(function(ev) {
            return setTimeout(function() {
              return onParticipantLeft == null ? void 0 : onParticipantLeft(ev);
            }, 0);
          });
        }, [onParticipantLeft]));
        return sortedIds;
      };
      var participantReceiveSettingsState = /* @__PURE__ */ recoil.atomFamily({
        key: "participant-receive-settings",
        "default": {}
      });
      var useReceiveSettings = function useReceiveSettings2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$id = _ref.id, id = _ref$id === void 0 ? "base" : _ref$id, onReceiveSettingsUpdated = _ref.onReceiveSettingsUpdated;
        var baseSettings = recoil.useRecoilValue(participantReceiveSettingsState("base"));
        var receiveSettings = recoil.useRecoilValue(participantReceiveSettingsState(id));
        var daily = useDaily();
        useDailyEvent("receive-settings-updated", recoil.useRecoilCallback(function(_ref2) {
          var transact_UNSTABLE = _ref2.transact_UNSTABLE;
          return function(ev) {
            transact_UNSTABLE(function(_ref3) {
              var reset = _ref3.reset, set = _ref3.set;
              var ids = _extends({}, ev.receiveSettings);
              for (var _i = 0, _Object$entries = Object.entries(ids); _i < _Object$entries.length; _i++) {
                var _Object$entries$_i = _Object$entries[_i], _id = _Object$entries$_i[0], settings = _Object$entries$_i[1];
                set(participantReceiveSettingsState(_id), settings);
              }
              if (!(id in ids)) {
                reset(participantReceiveSettingsState(id));
              }
            });
            setTimeout(function() {
              return onReceiveSettingsUpdated == null ? void 0 : onReceiveSettingsUpdated(ev);
            }, 0);
          };
        }, [id, onReceiveSettingsUpdated]));
        var updateReceiveSettings = React7.useCallback(function(receiveSettings2) {
          if (!(daily && daily.meetingState() === "joined-meeting")) {
            return;
          }
          daily == null ? void 0 : daily.updateReceiveSettings == null ? void 0 : daily.updateReceiveSettings(receiveSettings2);
        }, [daily]);
        return {
          receiveSettings: id === "base" || Object.keys(receiveSettings).length === 0 ? baseSettings : receiveSettings,
          updateReceiveSettings
        };
      };
      var recordingState = /* @__PURE__ */ recoil.atom({
        key: "recording",
        "default": {
          isLocalParticipantRecorded: false,
          isRecording: false
        }
      });
      var useRecording = function useRecording2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, onRecordingData = _ref.onRecordingData, onRecordingError = _ref.onRecordingError, onRecordingStarted = _ref.onRecordingStarted, onRecordingStopped = _ref.onRecordingStopped;
        var daily = useDaily();
        var state = recoil.useRecoilValue(recordingState);
        var setState = recoil.useSetRecoilState(recordingState);
        var localSessionId = useLocalSessionId();
        var recordingParticipantIds = useParticipantIds({
          filter: "record"
        });
        React7.useEffect(function() {
          var hasRecordingParticipants = recordingParticipantIds.length > 0;
          var isLocalParticipantRecording = recordingParticipantIds.includes(localSessionId != null ? localSessionId : "local");
          setState(function(s2) {
            return _extends({}, s2, {
              // In case type is local or not set, determine based on recording participants
              isLocalParticipantRecorded: (s2 == null ? void 0 : s2.type) === "local" || !(s2 == null ? void 0 : s2.type) ? hasRecordingParticipants : s2.isLocalParticipantRecorded,
              isRecording: (s2 == null ? void 0 : s2.type) === "local" || !(s2 == null ? void 0 : s2.type) ? hasRecordingParticipants : s2.isRecording,
              local: ((s2 == null ? void 0 : s2.type) === "local" || !(s2 == null ? void 0 : s2.type)) && hasRecordingParticipants ? isLocalParticipantRecording : s2 == null ? void 0 : s2.local,
              /**
               * Set type in case recording participants are detected.
               * We only set `record` on participants, when recording type is 'local'.
               */
              type: hasRecordingParticipants ? "local" : s2 == null ? void 0 : s2.type
            });
          });
        }, [localSessionId, recordingParticipantIds, setState]);
        useDailyEvent("recording-started", recoil.useRecoilCallback(function(_ref2) {
          var set = _ref2.set;
          return function(ev) {
            var isLocalParticipantRecorded = true;
            switch (ev.type) {
              case "cloud-beta":
              case "cloud": {
                var _ev$layout;
                if (localSessionId && ((_ev$layout = ev.layout) == null ? void 0 : _ev$layout.preset) === "single-participant" && ev.layout.session_id !== localSessionId) {
                  isLocalParticipantRecorded = false;
                }
                break;
              }
            }
            set(recordingState, {
              error: false,
              isLocalParticipantRecorded,
              isRecording: true,
              layout: ev == null ? void 0 : ev.layout,
              local: ev == null ? void 0 : ev.local,
              recordingId: ev == null ? void 0 : ev.recordingId,
              recordingStartedDate: /* @__PURE__ */ new Date(),
              startedBy: ev == null ? void 0 : ev.startedBy,
              type: ev == null ? void 0 : ev.type
            });
            setTimeout(function() {
              return onRecordingStarted == null ? void 0 : onRecordingStarted(ev);
            }, 0);
          };
        }, [localSessionId, onRecordingStarted]));
        useDailyEvent("recording-stopped", recoil.useRecoilCallback(function(_ref3) {
          var set = _ref3.set;
          return function(ev) {
            set(recordingState, function(prevState) {
              return _extends({}, prevState, {
                isLocalParticipantRecorded: false,
                isRecording: false
              });
            });
            setTimeout(function() {
              return onRecordingStopped == null ? void 0 : onRecordingStopped(ev);
            }, 0);
          };
        }, [onRecordingStopped]));
        useDailyEvent("recording-error", recoil.useRecoilCallback(function(_ref4) {
          var set = _ref4.set;
          return function(ev) {
            set(recordingState, function(prevState) {
              return _extends({}, prevState, {
                error: true,
                isLocalParticipantRecorded: false,
                isRecording: false
              });
            });
            setTimeout(function() {
              return onRecordingError == null ? void 0 : onRecordingError(ev);
            }, 0);
          };
        }, [onRecordingError]));
        useDailyEvent("recording-data", React7.useCallback(function(ev) {
          onRecordingData == null ? void 0 : onRecordingData(ev);
        }, [onRecordingData]));
        var startRecording = React7.useCallback(function(options) {
          if (!daily)
            return;
          daily.startRecording(options);
        }, [daily]);
        var stopRecording = React7.useCallback(function() {
          if (!daily)
            return;
          daily.stopRecording();
        }, [daily]);
        var updateRecording = React7.useCallback(function(options) {
          if (!daily)
            return;
          daily.updateRecording(options);
        }, [daily]);
        return _extends({}, state, {
          startRecording,
          stopRecording,
          updateRecording
        });
      };
      var useRoom = function useRoom2() {
        var room = recoil.useRecoilValue(roomState);
        return room;
      };
      var useScreenAudioTrack = function useScreenAudioTrack2(participantId) {
        return useMediaTrack2(participantId, "screenAudio");
      };
      var useScreenShare = function useScreenShare2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, onLocalScreenShareStarted = _ref.onLocalScreenShareStarted, onLocalScreenShareStopped = _ref.onLocalScreenShareStopped;
        var daily = useDaily();
        var startScreenShare = React7.useCallback(function(captureOptions) {
          daily == null ? void 0 : daily.startScreenShare(captureOptions);
        }, [daily]);
        var stopScreenShare = React7.useCallback(function() {
          daily == null ? void 0 : daily.stopScreenShare();
        }, [daily]);
        useDailyEvent("local-screen-share-started", React7.useCallback(function() {
          return onLocalScreenShareStarted == null ? void 0 : onLocalScreenShareStarted();
        }, [onLocalScreenShareStarted]));
        useDailyEvent("local-screen-share-stopped", React7.useCallback(function() {
          return onLocalScreenShareStopped == null ? void 0 : onLocalScreenShareStopped();
        }, [onLocalScreenShareStopped]));
        var screenIds = useParticipantIds({
          filter: "screen"
        });
        var screens = React7.useMemo(function() {
          return screenIds.map(function(id) {
            var _daily$participants;
            var participants = Object.values((_daily$participants = daily == null ? void 0 : daily.participants == null ? void 0 : daily.participants()) != null ? _daily$participants : {});
            var p2 = participants.find(function(p3) {
              return p3.session_id === id;
            });
            if (!p2)
              return;
            return {
              local: p2.local,
              screenAudio: p2.tracks.screenAudio,
              screenVideo: p2.tracks.screenVideo,
              screenId: id + "-screen",
              session_id: id
            };
          }).filter(function(p2) {
            return !!p2;
          });
        }, [daily, screenIds]);
        return {
          isSharingScreen: screens.some(function(s2) {
            return s2.local;
          }),
          screens,
          startScreenShare,
          stopScreenShare
        };
      };
      var useScreenVideoTrack = function useScreenVideoTrack2(participantId) {
        return useMediaTrack2(participantId, "screenVideo");
      };
      var transcriptionState = /* @__PURE__ */ recoil.atom({
        key: "transcription",
        "default": {
          isTranscriptionEnabled: false,
          isTranscribing: false,
          model: "general",
          language: "en",
          transcriptions: []
        }
      });
      var useTranscription = function useTranscription2(_temp) {
        var _room$domainConfig2;
        var _ref = _temp === void 0 ? {} : _temp, onTranscriptionAppData = _ref.onTranscriptionAppData, onTranscriptionError = _ref.onTranscriptionError, onTranscriptionStarted = _ref.onTranscriptionStarted, onTranscriptionStopped = _ref.onTranscriptionStopped;
        var daily = useDaily();
        var state = recoil.useRecoilValue(transcriptionState);
        var setState = recoil.useSetRecoilState(transcriptionState);
        var room = useRoom();
        React7.useEffect(function() {
          var _room$domainConfig;
          if (!(room == null ? void 0 : (_room$domainConfig = room.domainConfig) == null ? void 0 : _room$domainConfig.enable_transcription))
            return;
          setState(function(prevState) {
            return _extends({}, prevState, {
              isTranscriptionEnabled: true
            });
          });
        }, [room == null ? void 0 : (_room$domainConfig2 = room.domainConfig) == null ? void 0 : _room$domainConfig2.enable_transcription, setState]);
        useDailyEvent("transcription-started", recoil.useRecoilCallback(function(_ref2) {
          var set = _ref2.set;
          return function(ev) {
            set(transcriptionState, {
              isTranscriptionEnabled: true,
              error: false,
              isTranscribing: true,
              model: ev.model,
              language: ev.language,
              transcriptionStartDate: /* @__PURE__ */ new Date(),
              startedBy: ev.startedBy,
              transcriptions: []
            });
            setTimeout(function() {
              return onTranscriptionStarted == null ? void 0 : onTranscriptionStarted(ev);
            }, 0);
          };
        }, [onTranscriptionStarted]));
        useDailyEvent("transcription-stopped", recoil.useRecoilCallback(function(_ref3) {
          var set = _ref3.set;
          return function(ev) {
            set(transcriptionState, function(prevState) {
              return _extends({}, prevState, {
                updatedBy: ev == null ? void 0 : ev.updatedBy,
                isTranscribing: false
              });
            });
            setTimeout(function() {
              return onTranscriptionStopped == null ? void 0 : onTranscriptionStopped(ev);
            }, 0);
          };
        }, [onTranscriptionStopped]));
        useDailyEvent("transcription-error", recoil.useRecoilCallback(function(_ref4) {
          var set = _ref4.set;
          return function(ev) {
            set(transcriptionState, function(prevState) {
              return _extends({}, prevState, {
                error: true,
                isTranscribing: false
              });
            });
            setTimeout(function() {
              return onTranscriptionError == null ? void 0 : onTranscriptionError(ev);
            }, 0);
          };
        }, [onTranscriptionError]));
        useDailyEvent("app-message", recoil.useRecoilCallback(function(_ref5) {
          var set = _ref5.set;
          return function(ev) {
            var _ev$data;
            if ((ev == null ? void 0 : ev.fromId) === "transcription" && (ev == null ? void 0 : (_ev$data = ev.data) == null ? void 0 : _ev$data.is_final)) {
              set(transcriptionState, function(prevState) {
                return _extends({}, prevState, {
                  // setting it to true whenever a new message is received
                  // as the participants who joined after the transcription-started event
                  // won't be knowing if transcription is started or not
                  isTranscribing: true,
                  transcriptions: [].concat(prevState.transcriptions, [ev.data])
                });
              });
              setTimeout(function() {
                return onTranscriptionAppData == null ? void 0 : onTranscriptionAppData(ev);
              }, 0);
            }
          };
        }, [onTranscriptionAppData]));
        var startTranscription = React7.useCallback(function(options) {
          if (!daily)
            return;
          daily.startTranscription(options);
        }, [daily]);
        var stopTranscription = React7.useCallback(function() {
          if (!daily)
            return;
          daily.stopTranscription();
        }, [daily]);
        return _extends({}, state, {
          startTranscription,
          stopTranscription
        });
      };
      var useVideoTrack2 = function useVideoTrack3(participantId) {
        return useMediaTrack2(participantId, "video");
      };
      var waitingParticipantsState = /* @__PURE__ */ recoil.atom({
        key: "waiting-participants",
        "default": []
      });
      var waitingParticipantState = /* @__PURE__ */ recoil.atomFamily({
        key: "waiting-participant",
        "default": {
          awaitingAccess: {
            level: "full"
          },
          id: "",
          name: ""
        }
      });
      var allWaitingParticipantsSelector = /* @__PURE__ */ recoil.selector({
        key: "waitingParticipantsSelector",
        get: function get(_ref) {
          var _get = _ref.get;
          var ids = _get(waitingParticipantsState);
          return ids.map(function(id) {
            return _get(waitingParticipantState(id));
          });
        }
      });
      var useWaitingParticipants = function useWaitingParticipants2(_temp) {
        var _ref2 = _temp === void 0 ? {} : _temp, onWaitingParticipantAdded = _ref2.onWaitingParticipantAdded, onWaitingParticipantRemoved = _ref2.onWaitingParticipantRemoved, onWaitingParticipantUpdated = _ref2.onWaitingParticipantUpdated;
        var daily = useDaily();
        var waitingParticipants = recoil.useRecoilValue(allWaitingParticipantsSelector);
        var handleAdded = recoil.useRecoilCallback(function(_ref3) {
          var transact_UNSTABLE = _ref3.transact_UNSTABLE;
          return function(ev) {
            transact_UNSTABLE(function(_ref4) {
              var set = _ref4.set;
              set(waitingParticipantsState, function(wps) {
                if (!wps.includes(ev.participant.id)) {
                  return [].concat(wps, [ev.participant.id]);
                }
                return wps;
              });
              set(waitingParticipantState(ev.participant.id), ev.participant);
            });
            setTimeout(function() {
              return onWaitingParticipantAdded == null ? void 0 : onWaitingParticipantAdded(ev);
            }, 0);
          };
        }, [onWaitingParticipantAdded]);
        var handleRemoved = recoil.useRecoilCallback(function(_ref5) {
          var transact_UNSTABLE = _ref5.transact_UNSTABLE;
          return function(ev) {
            transact_UNSTABLE(function(_ref6) {
              var reset = _ref6.reset, set = _ref6.set;
              set(waitingParticipantsState, function(wps) {
                return wps.filter(function(wp) {
                  return wp !== ev.participant.id;
                });
              });
              reset(waitingParticipantState(ev.participant.id));
            });
            setTimeout(function() {
              return onWaitingParticipantRemoved == null ? void 0 : onWaitingParticipantRemoved(ev);
            }, 0);
          };
        }, [onWaitingParticipantRemoved]);
        var handleUpdated = recoil.useRecoilCallback(function(_ref7) {
          var set = _ref7.set;
          return function(ev) {
            set(waitingParticipantState(ev.participant.id), ev.participant);
            setTimeout(function() {
              return onWaitingParticipantUpdated == null ? void 0 : onWaitingParticipantUpdated(ev);
            }, 0);
          };
        }, [onWaitingParticipantUpdated]);
        useDailyEvent("waiting-participant-added", handleAdded);
        useDailyEvent("waiting-participant-removed", handleRemoved);
        useDailyEvent("waiting-participant-updated", handleUpdated);
        var updateWaitingParticipantAccess = React7.useCallback(function(id, grantRequestedAccess) {
          if (id === "*") {
            daily == null ? void 0 : daily.updateWaitingParticipants({
              "*": {
                grantRequestedAccess
              }
            });
            return;
          }
          daily == null ? void 0 : daily.updateWaitingParticipant(id, {
            grantRequestedAccess
          });
        }, [daily]);
        var grantAccess = React7.useCallback(function(id) {
          updateWaitingParticipantAccess(id, true);
        }, [updateWaitingParticipantAccess]);
        var denyAccess = React7.useCallback(function(id) {
          updateWaitingParticipantAccess(id, false);
        }, [updateWaitingParticipantAccess]);
        return {
          waitingParticipants,
          grantAccess,
          denyAccess
        };
      };
      exports.DailyProvider = DailyProvider2;
      exports.useActiveParticipant = useActiveParticipant;
      exports.useAppMessage = useAppMessage;
      exports.useAudioTrack = useAudioTrack;
      exports.useDaily = useDaily;
      exports.useDailyEvent = useDailyEvent;
      exports.useDevices = useDevices;
      exports.useInputSettings = useInputSettings;
      exports.useLiveStreaming = useLiveStreaming;
      exports.useLocalParticipant = useLocalParticipant;
      exports.useLocalSessionId = useLocalSessionId;
      exports.useMediaTrack = useMediaTrack2;
      exports.useNetwork = useNetwork;
      exports.useParticipant = useParticipant;
      exports.useParticipantIds = useParticipantIds;
      exports.useParticipantProperty = useParticipantProperty;
      exports.useReceiveSettings = useReceiveSettings;
      exports.useRecording = useRecording;
      exports.useRoom = useRoom;
      exports.useScreenAudioTrack = useScreenAudioTrack;
      exports.useScreenShare = useScreenShare;
      exports.useScreenVideoTrack = useScreenVideoTrack;
      exports.useThrottledDailyEvent = useThrottledDailyEvent;
      exports.useTranscription = useTranscription;
      exports.useVideoTrack = useVideoTrack2;
      exports.useWaitingParticipants = useWaitingParticipants;
    }
  });

  // ../assets/node_modules/@daily-co/daily-react-hooks/dist/index.js
  var require_dist32 = __commonJS({
    "../assets/node_modules/@daily-co/daily-react-hooks/dist/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_daily_react_hooks_cjs_production_min();
      } else {
        module.exports = require_daily_react_hooks_cjs_development();
      }
    }
  });

  // ../assets/node_modules/@stitches/react/dist/index.mjs
  var import_react = __toESM(require_react(), 1);
  var e = "colors";
  var t = "sizes";
  var r = "space";
  var n = { gap: r, gridGap: r, columnGap: r, gridColumnGap: r, rowGap: r, gridRowGap: r, inset: r, insetBlock: r, insetBlockEnd: r, insetBlockStart: r, insetInline: r, insetInlineEnd: r, insetInlineStart: r, margin: r, marginTop: r, marginRight: r, marginBottom: r, marginLeft: r, marginBlock: r, marginBlockEnd: r, marginBlockStart: r, marginInline: r, marginInlineEnd: r, marginInlineStart: r, padding: r, paddingTop: r, paddingRight: r, paddingBottom: r, paddingLeft: r, paddingBlock: r, paddingBlockEnd: r, paddingBlockStart: r, paddingInline: r, paddingInlineEnd: r, paddingInlineStart: r, top: r, right: r, bottom: r, left: r, scrollMargin: r, scrollMarginTop: r, scrollMarginRight: r, scrollMarginBottom: r, scrollMarginLeft: r, scrollMarginX: r, scrollMarginY: r, scrollMarginBlock: r, scrollMarginBlockEnd: r, scrollMarginBlockStart: r, scrollMarginInline: r, scrollMarginInlineEnd: r, scrollMarginInlineStart: r, scrollPadding: r, scrollPaddingTop: r, scrollPaddingRight: r, scrollPaddingBottom: r, scrollPaddingLeft: r, scrollPaddingX: r, scrollPaddingY: r, scrollPaddingBlock: r, scrollPaddingBlockEnd: r, scrollPaddingBlockStart: r, scrollPaddingInline: r, scrollPaddingInlineEnd: r, scrollPaddingInlineStart: r, fontSize: "fontSizes", background: e, backgroundColor: e, backgroundImage: e, borderImage: e, border: e, borderBlock: e, borderBlockEnd: e, borderBlockStart: e, borderBottom: e, borderBottomColor: e, borderColor: e, borderInline: e, borderInlineEnd: e, borderInlineStart: e, borderLeft: e, borderLeftColor: e, borderRight: e, borderRightColor: e, borderTop: e, borderTopColor: e, caretColor: e, color: e, columnRuleColor: e, fill: e, outline: e, outlineColor: e, stroke: e, textDecorationColor: e, fontFamily: "fonts", fontWeight: "fontWeights", lineHeight: "lineHeights", letterSpacing: "letterSpacings", blockSize: t, minBlockSize: t, maxBlockSize: t, inlineSize: t, minInlineSize: t, maxInlineSize: t, width: t, minWidth: t, maxWidth: t, height: t, minHeight: t, maxHeight: t, flexBasis: t, gridTemplateColumns: t, gridTemplateRows: t, borderWidth: "borderWidths", borderTopWidth: "borderWidths", borderRightWidth: "borderWidths", borderBottomWidth: "borderWidths", borderLeftWidth: "borderWidths", borderStyle: "borderStyles", borderTopStyle: "borderStyles", borderRightStyle: "borderStyles", borderBottomStyle: "borderStyles", borderLeftStyle: "borderStyles", borderRadius: "radii", borderTopLeftRadius: "radii", borderTopRightRadius: "radii", borderBottomRightRadius: "radii", borderBottomLeftRadius: "radii", boxShadow: "shadows", textShadow: "shadows", transition: "transitions", zIndex: "zIndices" };
  var i = (e2, t2) => "function" == typeof t2 ? { "()": Function.prototype.toString.call(t2) } : t2;
  var o = () => {
    const e2 = /* @__PURE__ */ Object.create(null);
    return (t2, r2, ...n2) => {
      const o2 = ((e3) => JSON.stringify(e3, i))(t2);
      return o2 in e2 ? e2[o2] : e2[o2] = r2(t2, ...n2);
    };
  };
  var l = Symbol.for("sxs.internal");
  var s = (e2, t2) => Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2));
  var a = (e2) => {
    for (const t2 in e2)
      return true;
    return false;
  };
  var { hasOwnProperty: c } = Object.prototype;
  var d = (e2) => e2.includes("-") ? e2 : e2.replace(/[A-Z]/g, (e3) => "-" + e3.toLowerCase());
  var g = /\s+(?![^()]*\))/;
  var p = (e2) => (t2) => e2(..."string" == typeof t2 ? String(t2).split(g) : [t2]);
  var u = { appearance: (e2) => ({ WebkitAppearance: e2, appearance: e2 }), backfaceVisibility: (e2) => ({ WebkitBackfaceVisibility: e2, backfaceVisibility: e2 }), backdropFilter: (e2) => ({ WebkitBackdropFilter: e2, backdropFilter: e2 }), backgroundClip: (e2) => ({ WebkitBackgroundClip: e2, backgroundClip: e2 }), boxDecorationBreak: (e2) => ({ WebkitBoxDecorationBreak: e2, boxDecorationBreak: e2 }), clipPath: (e2) => ({ WebkitClipPath: e2, clipPath: e2 }), content: (e2) => ({ content: e2.includes('"') || e2.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e2) ? e2 : `"${e2}"` }), hyphens: (e2) => ({ WebkitHyphens: e2, hyphens: e2 }), maskImage: (e2) => ({ WebkitMaskImage: e2, maskImage: e2 }), maskSize: (e2) => ({ WebkitMaskSize: e2, maskSize: e2 }), tabSize: (e2) => ({ MozTabSize: e2, tabSize: e2 }), textSizeAdjust: (e2) => ({ WebkitTextSizeAdjust: e2, textSizeAdjust: e2 }), userSelect: (e2) => ({ WebkitUserSelect: e2, userSelect: e2 }), marginBlock: p((e2, t2) => ({ marginBlockStart: e2, marginBlockEnd: t2 || e2 })), marginInline: p((e2, t2) => ({ marginInlineStart: e2, marginInlineEnd: t2 || e2 })), maxSize: p((e2, t2) => ({ maxBlockSize: e2, maxInlineSize: t2 || e2 })), minSize: p((e2, t2) => ({ minBlockSize: e2, minInlineSize: t2 || e2 })), paddingBlock: p((e2, t2) => ({ paddingBlockStart: e2, paddingBlockEnd: t2 || e2 })), paddingInline: p((e2, t2) => ({ paddingInlineStart: e2, paddingInlineEnd: t2 || e2 })) };
  var h = /([\d.]+)([^]*)/;
  var f = (e2, t2) => e2.length ? e2.reduce((e3, r2) => (e3.push(...t2.map((e4) => e4.includes("&") ? e4.replace(/&/g, /[ +>|~]/.test(r2) && /&.*&/.test(e4) ? `:is(${r2})` : r2) : r2 + " " + e4)), e3), []) : t2;
  var m = (e2, t2) => e2 in b && "string" == typeof t2 ? t2.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t3, r2, n2, i2) => r2 + ("stretch" === n2 ? `-moz-available${i2};${d(e2)}:${r2}-webkit-fill-available` : `-moz-fit-content${i2};${d(e2)}:${r2}fit-content`) + i2) : String(t2);
  var b = { blockSize: 1, height: 1, inlineSize: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, width: 1 };
  var S = (e2) => e2 ? e2 + "-" : "";
  var k = (e2, t2, r2) => e2.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e3, n2, i2, o2, l2) => "$" == o2 == !!i2 ? e3 : (n2 || "--" == o2 ? "calc(" : "") + "var(--" + ("$" === o2 ? S(t2) + (l2.includes("$") ? "" : S(r2)) + l2.replace(/\$/g, "-") : l2) + ")" + (n2 || "--" == o2 ? "*" + (n2 || "") + (i2 || "1") + ")" : ""));
  var y = /\s*,\s*(?![^()]*\))/;
  var B = Object.prototype.toString;
  var $ = (e2, t2, r2, n2, i2) => {
    let o2, l2, s2;
    const a2 = (e3, t3, r3) => {
      let c3, g2;
      const p2 = (e4) => {
        for (c3 in e4) {
          const R2 = 64 === c3.charCodeAt(0), z2 = R2 && Array.isArray(e4[c3]) ? e4[c3] : [e4[c3]];
          for (g2 of z2) {
            const e5 = /[A-Z]/.test($2 = c3) ? $2 : $2.replace(/-[^]/g, (e6) => e6[1].toUpperCase()), z3 = "object" == typeof g2 && g2 && g2.toString === B && (!n2.utils[e5] || !t3.length);
            if (e5 in n2.utils && !z3) {
              const t4 = n2.utils[e5];
              if (t4 !== l2) {
                l2 = t4, p2(t4(g2)), l2 = null;
                continue;
              }
            } else if (e5 in u) {
              const t4 = u[e5];
              if (t4 !== s2) {
                s2 = t4, p2(t4(g2)), s2 = null;
                continue;
              }
            }
            if (R2 && (b2 = c3.slice(1) in n2.media ? "@media " + n2.media[c3.slice(1)] : c3, c3 = b2.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e6, t4, r4, n3, i3, o3) => {
              const l3 = h.test(t4), s3 = 0.0625 * (l3 ? -1 : 1), [a3, c4] = l3 ? [n3, t4] : [t4, n3];
              return "(" + ("=" === r4[0] ? "" : ">" === r4[0] === l3 ? "max-" : "min-") + a3 + ":" + ("=" !== r4[0] && 1 === r4.length ? c4.replace(h, (e7, t5, n4) => Number(t5) + s3 * (">" === r4 ? 1 : -1) + n4) : c4) + (i3 ? ") and (" + (">" === i3[0] ? "min-" : "max-") + a3 + ":" + (1 === i3.length ? o3.replace(h, (e7, t5, r5) => Number(t5) + s3 * (">" === i3 ? -1 : 1) + r5) : o3) : "") + ")";
            })), z3) {
              const e6 = R2 ? r3.concat(c3) : [...r3], n3 = R2 ? [...t3] : f(t3, c3.split(y));
              void 0 !== o2 && i2(x(...o2)), o2 = void 0, a2(g2, n3, e6);
            } else
              void 0 === o2 && (o2 = [[], t3, r3]), c3 = R2 || 36 !== c3.charCodeAt(0) ? c3 : `--${S(n2.prefix)}${c3.slice(1).replace(/\$/g, "-")}`, g2 = z3 ? g2 : "number" == typeof g2 ? g2 && e5 in I ? String(g2) + "px" : String(g2) : k(m(e5, null == g2 ? "" : g2), n2.prefix, n2.themeMap[e5]), o2[0].push(`${R2 ? `${c3} ` : `${d(c3)}:`}${g2}`);
          }
        }
        var b2, $2;
      };
      p2(e3), void 0 !== o2 && i2(x(...o2)), o2 = void 0;
    };
    a2(e2, t2, r2);
  };
  var x = (e2, t2, r2) => `${r2.map((e3) => `${e3}{`).join("")}${t2.length ? `${t2.join(",")}{` : ""}${e2.join(";")}${t2.length ? "}" : ""}${Array(r2.length ? r2.length + 1 : 0).join("}")}`;
  var I = { animationDelay: 1, animationDuration: 1, backgroundSize: 1, blockSize: 1, border: 1, borderBlock: 1, borderBlockEnd: 1, borderBlockEndWidth: 1, borderBlockStart: 1, borderBlockStartWidth: 1, borderBlockWidth: 1, borderBottom: 1, borderBottomLeftRadius: 1, borderBottomRightRadius: 1, borderBottomWidth: 1, borderEndEndRadius: 1, borderEndStartRadius: 1, borderInlineEnd: 1, borderInlineEndWidth: 1, borderInlineStart: 1, borderInlineStartWidth: 1, borderInlineWidth: 1, borderLeft: 1, borderLeftWidth: 1, borderRadius: 1, borderRight: 1, borderRightWidth: 1, borderSpacing: 1, borderStartEndRadius: 1, borderStartStartRadius: 1, borderTop: 1, borderTopLeftRadius: 1, borderTopRightRadius: 1, borderTopWidth: 1, borderWidth: 1, bottom: 1, columnGap: 1, columnRule: 1, columnRuleWidth: 1, columnWidth: 1, containIntrinsicSize: 1, flexBasis: 1, fontSize: 1, gap: 1, gridAutoColumns: 1, gridAutoRows: 1, gridTemplateColumns: 1, gridTemplateRows: 1, height: 1, inlineSize: 1, inset: 1, insetBlock: 1, insetBlockEnd: 1, insetBlockStart: 1, insetInline: 1, insetInlineEnd: 1, insetInlineStart: 1, left: 1, letterSpacing: 1, margin: 1, marginBlock: 1, marginBlockEnd: 1, marginBlockStart: 1, marginBottom: 1, marginInline: 1, marginInlineEnd: 1, marginInlineStart: 1, marginLeft: 1, marginRight: 1, marginTop: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, offsetDistance: 1, offsetRotate: 1, outline: 1, outlineOffset: 1, outlineWidth: 1, overflowClipMargin: 1, padding: 1, paddingBlock: 1, paddingBlockEnd: 1, paddingBlockStart: 1, paddingBottom: 1, paddingInline: 1, paddingInlineEnd: 1, paddingInlineStart: 1, paddingLeft: 1, paddingRight: 1, paddingTop: 1, perspective: 1, right: 1, rowGap: 1, scrollMargin: 1, scrollMarginBlock: 1, scrollMarginBlockEnd: 1, scrollMarginBlockStart: 1, scrollMarginBottom: 1, scrollMarginInline: 1, scrollMarginInlineEnd: 1, scrollMarginInlineStart: 1, scrollMarginLeft: 1, scrollMarginRight: 1, scrollMarginTop: 1, scrollPadding: 1, scrollPaddingBlock: 1, scrollPaddingBlockEnd: 1, scrollPaddingBlockStart: 1, scrollPaddingBottom: 1, scrollPaddingInline: 1, scrollPaddingInlineEnd: 1, scrollPaddingInlineStart: 1, scrollPaddingLeft: 1, scrollPaddingRight: 1, scrollPaddingTop: 1, shapeMargin: 1, textDecoration: 1, textDecorationThickness: 1, textIndent: 1, textUnderlineOffset: 1, top: 1, transitionDelay: 1, transitionDuration: 1, verticalAlign: 1, width: 1, wordSpacing: 1 };
  var R = (e2) => String.fromCharCode(e2 + (e2 > 25 ? 39 : 97));
  var z = (e2) => ((e3) => {
    let t2, r2 = "";
    for (t2 = Math.abs(e3); t2 > 52; t2 = t2 / 52 | 0)
      r2 = R(t2 % 52) + r2;
    return R(t2 % 52) + r2;
  })(((e3, t2) => {
    let r2 = t2.length;
    for (; r2; )
      e3 = 33 * e3 ^ t2.charCodeAt(--r2);
    return e3;
  })(5381, JSON.stringify(e2)) >>> 0);
  var W = ["themed", "global", "styled", "onevar", "resonevar", "allvar", "inline"];
  var j = (e2) => {
    if (e2.href && !e2.href.startsWith(location.origin))
      return false;
    try {
      return !!e2.cssRules;
    } catch (e3) {
      return false;
    }
  };
  var E = (e2) => {
    let t2;
    const r2 = () => {
      const { cssRules: e3 } = t2.sheet;
      return [].map.call(e3, (r3, n3) => {
        const { cssText: i2 } = r3;
        let o2 = "";
        if (i2.startsWith("--sxs"))
          return "";
        if (e3[n3 - 1] && (o2 = e3[n3 - 1].cssText).startsWith("--sxs")) {
          if (!r3.cssRules.length)
            return "";
          for (const e4 in t2.rules)
            if (t2.rules[e4].group === r3)
              return `--sxs{--sxs:${[...t2.rules[e4].cache].join(" ")}}${i2}`;
          return r3.cssRules.length ? `${o2}${i2}` : "";
        }
        return i2;
      }).join("");
    }, n2 = () => {
      if (t2) {
        const { rules: e3, sheet: r3 } = t2;
        if (!r3.deleteRule) {
          for (; 3 === Object(Object(r3.cssRules)[0]).type; )
            r3.cssRules.splice(0, 1);
          r3.cssRules = [];
        }
        for (const t3 in e3)
          delete e3[t3];
      }
      const i2 = Object(e2).styleSheets || [];
      for (const e3 of i2)
        if (j(e3)) {
          for (let i3 = 0, o3 = e3.cssRules; o3[i3]; ++i3) {
            const l3 = Object(o3[i3]);
            if (1 !== l3.type)
              continue;
            const s2 = Object(o3[i3 + 1]);
            if (4 !== s2.type)
              continue;
            ++i3;
            const { cssText: a2 } = l3;
            if (!a2.startsWith("--sxs"))
              continue;
            const c3 = a2.slice(14, -3).trim().split(/\s+/), d2 = W[c3[0]];
            d2 && (t2 || (t2 = { sheet: e3, reset: n2, rules: {}, toString: r2 }), t2.rules[d2] = { group: s2, index: i3, cache: new Set(c3) });
          }
          if (t2)
            break;
        }
      if (!t2) {
        const i3 = (e3, t3) => ({ type: t3, cssRules: [], insertRule(e4, t4) {
          this.cssRules.splice(t4, 0, i3(e4, { import: 3, undefined: 1 }[(e4.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
        }, get cssText() {
          return "@media{}" === e3 ? `@media{${[].map.call(this.cssRules, (e4) => e4.cssText).join("")}}` : e3;
        } });
        t2 = { sheet: e2 ? (e2.head || e2).appendChild(document.createElement("style")).sheet : i3("", "text/css"), rules: {}, reset: n2, toString: r2 };
      }
      const { sheet: o2, rules: l2 } = t2;
      for (let e3 = W.length - 1; e3 >= 0; --e3) {
        const t3 = W[e3];
        if (!l2[t3]) {
          const r3 = W[e3 + 1], n3 = l2[r3] ? l2[r3].index : o2.cssRules.length;
          o2.insertRule("@media{}", n3), o2.insertRule(`--sxs{--sxs:${e3}}`, n3), l2[t3] = { group: o2.cssRules[n3 + 1], index: n3, cache: /* @__PURE__ */ new Set([e3]) };
        }
        v(l2[t3]);
      }
    };
    return n2(), t2;
  };
  var v = (e2) => {
    const t2 = e2.group;
    let r2 = t2.cssRules.length;
    e2.apply = (e3) => {
      try {
        t2.insertRule(e3, r2), ++r2;
      } catch (e4) {
      }
    };
  };
  var T = Symbol();
  var w = o();
  var M = (e2, t2) => w(e2, () => (...r2) => {
    let n2 = { type: null, composers: /* @__PURE__ */ new Set() };
    for (const t3 of r2)
      if (null != t3)
        if (t3[l]) {
          null == n2.type && (n2.type = t3[l].type);
          for (const e3 of t3[l].composers)
            n2.composers.add(e3);
        } else
          t3.constructor !== Object || t3.$$typeof ? null == n2.type && (n2.type = t3) : n2.composers.add(C(t3, e2));
    return null == n2.type && (n2.type = "span"), n2.composers.size || n2.composers.add(["PJLV", {}, [], [], {}, []]), P(e2, n2, t2);
  });
  var C = (_a2, i2) => {
    var _b = _a2, { variants: e2, compoundVariants: t2, defaultVariants: r2 } = _b, n2 = __objRest(_b, ["variants", "compoundVariants", "defaultVariants"]);
    const o2 = `${S(i2.prefix)}c-${z(n2)}`, l2 = [], s2 = [], d2 = /* @__PURE__ */ Object.create(null), g2 = [];
    for (const e3 in r2)
      d2[e3] = String(r2[e3]);
    if ("object" == typeof e2 && e2)
      for (const t3 in e2) {
        p2 = d2, u2 = t3, c.call(p2, u2) || (d2[t3] = "undefined");
        const r3 = e2[t3];
        for (const e3 in r3) {
          const n3 = { [t3]: String(e3) };
          "undefined" === String(e3) && g2.push(t3);
          const i3 = r3[e3], o3 = [n3, i3, !a(i3)];
          l2.push(o3);
        }
      }
    var p2, u2;
    if ("object" == typeof t2 && t2)
      for (const e3 of t2) {
        let _a3 = e3, { css: t3 } = _a3, r3 = __objRest(_a3, ["css"]);
        t3 = "object" == typeof t3 && t3 || {};
        for (const e4 in r3)
          r3[e4] = String(r3[e4]);
        const n3 = [r3, t3, !a(t3)];
        s2.push(n3);
      }
    return [o2, n2, l2, s2, d2, g2];
  };
  var P = (e2, t2, r2) => {
    const [n2, i2, o2, a2] = L(t2.composers), c3 = "function" == typeof t2.type || t2.type.$$typeof ? ((e3) => {
      function t3() {
        for (let r3 = 0; r3 < t3[T].length; r3++) {
          const [n3, i3] = t3[T][r3];
          e3.rules[n3].apply(i3);
        }
        return t3[T] = [], null;
      }
      return t3[T] = [], t3.rules = {}, W.forEach((e4) => t3.rules[e4] = { apply: (r3) => t3[T].push([e4, r3]) }), t3;
    })(r2) : null, d2 = (c3 || r2).rules, g2 = `.${n2}${i2.length > 1 ? `:where(.${i2.slice(1).join(".")})` : ""}`, p2 = (l2) => {
      l2 = "object" == typeof l2 && l2 || A;
      const _a2 = l2, { css: s2 } = _a2, p3 = __objRest(_a2, ["css"]), u2 = {};
      for (const e3 in o2)
        if (delete p3[e3], e3 in l2) {
          let t3 = l2[e3];
          "object" == typeof t3 && t3 ? u2[e3] = __spreadValues({ "@initial": o2[e3] }, t3) : (t3 = String(t3), u2[e3] = "undefined" !== t3 || a2.has(e3) ? t3 : o2[e3]);
        } else
          u2[e3] = o2[e3];
      const h2 = /* @__PURE__ */ new Set([...i2]);
      for (const [n3, i3, o3, l3] of t2.composers) {
        r2.rules.styled.cache.has(n3) || (r2.rules.styled.cache.add(n3), $(i3, [`.${n3}`], [], e2, (e3) => {
          d2.styled.apply(e3);
        }));
        const t3 = O(o3, u2, e2.media), s3 = O(l3, u2, e2.media, true);
        for (const i4 of t3)
          if (void 0 !== i4)
            for (const [t4, o4, l4] of i4) {
              const i5 = `${n3}-${z(o4)}-${t4}`;
              h2.add(i5);
              const s4 = (l4 ? r2.rules.resonevar : r2.rules.onevar).cache, a3 = l4 ? d2.resonevar : d2.onevar;
              s4.has(i5) || (s4.add(i5), $(o4, [`.${i5}`], [], e2, (e3) => {
                a3.apply(e3);
              }));
            }
        for (const t4 of s3)
          if (void 0 !== t4)
            for (const [i4, o4] of t4) {
              const t5 = `${n3}-${z(o4)}-${i4}`;
              h2.add(t5), r2.rules.allvar.cache.has(t5) || (r2.rules.allvar.cache.add(t5), $(o4, [`.${t5}`], [], e2, (e3) => {
                d2.allvar.apply(e3);
              }));
            }
      }
      if ("object" == typeof s2 && s2) {
        const t3 = `${n2}-i${z(s2)}-css`;
        h2.add(t3), r2.rules.inline.cache.has(t3) || (r2.rules.inline.cache.add(t3), $(s2, [`.${t3}`], [], e2, (e3) => {
          d2.inline.apply(e3);
        }));
      }
      for (const e3 of String(l2.className || "").trim().split(/\s+/))
        e3 && h2.add(e3);
      const f2 = p3.className = [...h2].join(" ");
      return { type: t2.type, className: f2, selector: g2, props: p3, toString: () => f2, deferredInjector: c3 };
    };
    return s(p2, { className: n2, selector: g2, [l]: t2, toString: () => (r2.rules.styled.cache.has(n2) || p2(), n2) });
  };
  var L = (e2) => {
    let t2 = "";
    const r2 = [], n2 = {}, i2 = [];
    for (const [o2, , , , l2, s2] of e2) {
      "" === t2 && (t2 = o2), r2.push(o2), i2.push(...s2);
      for (const e3 in l2) {
        const t3 = l2[e3];
        (void 0 === n2[e3] || "undefined" !== t3 || s2.includes(t3)) && (n2[e3] = t3);
      }
    }
    return [t2, r2, n2, new Set(i2)];
  };
  var O = (e2, t2, r2, n2) => {
    const i2 = [];
    e:
      for (let [o2, l2, s2] of e2) {
        if (s2)
          continue;
        let e3, a2 = 0, c3 = false;
        for (e3 in o2) {
          const n3 = o2[e3];
          let i3 = t2[e3];
          if (i3 !== n3) {
            if ("object" != typeof i3 || !i3)
              continue e;
            {
              let e4, t3, o3 = 0;
              for (const l3 in i3) {
                if (n3 === String(i3[l3])) {
                  if ("@initial" !== l3) {
                    const e5 = l3.slice(1);
                    (t3 = t3 || []).push(e5 in r2 ? r2[e5] : l3.replace(/^@media ?/, "")), c3 = true;
                  }
                  a2 += o3, e4 = true;
                }
                ++o3;
              }
              if (t3 && t3.length && (l2 = { ["@media " + t3.join(", ")]: l2 }), !e4)
                continue e;
            }
          }
        }
        (i2[a2] = i2[a2] || []).push([n2 ? "cv" : `${e3}-${o2[e3]}`, l2, c3]);
      }
    return i2;
  };
  var A = {};
  var N = o();
  var D = (e2, t2) => N(e2, () => (...r2) => {
    const n2 = () => {
      for (let n3 of r2) {
        n3 = "object" == typeof n3 && n3 || {};
        let r3 = z(n3);
        if (!t2.rules.global.cache.has(r3)) {
          if (t2.rules.global.cache.add(r3), "@import" in n3) {
            let e3 = [].indexOf.call(t2.sheet.cssRules, t2.rules.themed.group) - 1;
            for (let r4 of [].concat(n3["@import"]))
              r4 = r4.includes('"') || r4.includes("'") ? r4 : `"${r4}"`, t2.sheet.insertRule(`@import ${r4};`, e3++);
            delete n3["@import"];
          }
          $(n3, [], [], e2, (e3) => {
            t2.rules.global.apply(e3);
          });
        }
      }
      return "";
    };
    return s(n2, { toString: n2 });
  });
  var H = o();
  var V = (e2, t2) => H(e2, () => (r2) => {
    const n2 = `${S(e2.prefix)}k-${z(r2)}`, i2 = () => {
      if (!t2.rules.global.cache.has(n2)) {
        t2.rules.global.cache.add(n2);
        const i3 = [];
        $(r2, [], [], e2, (e3) => i3.push(e3));
        const o2 = `@keyframes ${n2}{${i3.join("")}}`;
        t2.rules.global.apply(o2);
      }
      return n2;
    };
    return s(i2, { get name() {
      return i2();
    }, toString: i2 });
  });
  var G = class {
    constructor(e2, t2, r2, n2) {
      this.token = null == e2 ? "" : String(e2), this.value = null == t2 ? "" : String(t2), this.scale = null == r2 ? "" : String(r2), this.prefix = null == n2 ? "" : String(n2);
    }
    get computedValue() {
      return "var(" + this.variable + ")";
    }
    get variable() {
      return "--" + S(this.prefix) + S(this.scale) + this.token;
    }
    toString() {
      return this.computedValue;
    }
  };
  var F = o();
  var J = (e2, t2) => F(e2, () => (r2, n2) => {
    n2 = "object" == typeof r2 && r2 || Object(n2);
    const i2 = `.${r2 = (r2 = "string" == typeof r2 ? r2 : "") || `${S(e2.prefix)}t-${z(n2)}`}`, o2 = {}, l2 = [];
    for (const t3 in n2) {
      o2[t3] = {};
      for (const r3 in n2[t3]) {
        const i3 = `--${S(e2.prefix)}${t3}-${r3}`, s3 = k(String(n2[t3][r3]), e2.prefix, t3);
        o2[t3][r3] = new G(r3, s3, t3, e2.prefix), l2.push(`${i3}:${s3}`);
      }
    }
    const s2 = () => {
      if (l2.length && !t2.rules.themed.cache.has(r2)) {
        t2.rules.themed.cache.add(r2);
        const i3 = `${n2 === e2.theme ? ":root," : ""}.${r2}{${l2.join(";")}}`;
        t2.rules.themed.apply(i3);
      }
      return r2;
    };
    return __spreadProps(__spreadValues({}, o2), { get className() {
      return s2();
    }, selector: i2, toString: s2 });
  });
  var U = o();
  var Y = o();
  var q = (e2) => {
    const t2 = ((e3) => {
      let t3 = false;
      const r2 = U(e3, (e4) => {
        t3 = true;
        const r3 = "prefix" in (e4 = "object" == typeof e4 && e4 || {}) ? String(e4.prefix) : "", i2 = "object" == typeof e4.media && e4.media || {}, o2 = "object" == typeof e4.root ? e4.root || null : globalThis.document || null, l2 = "object" == typeof e4.theme && e4.theme || {}, s2 = { prefix: r3, media: i2, theme: l2, themeMap: "object" == typeof e4.themeMap && e4.themeMap || __spreadValues({}, n), utils: "object" == typeof e4.utils && e4.utils || {} }, a2 = E(o2), c3 = { css: M(s2, a2), globalCss: D(s2, a2), keyframes: V(s2, a2), createTheme: J(s2, a2), reset() {
          a2.reset(), c3.theme.toString();
        }, theme: {}, sheet: a2, config: s2, prefix: r3, getCssText: a2.toString, toString: a2.toString };
        return String(c3.theme = c3.createTheme(l2)), c3;
      });
      return t3 || r2.reset(), r2;
    })(e2);
    return t2.styled = (({ config: e3, sheet: t3 }) => Y(e3, () => {
      const r2 = M(e3, t3);
      return (...e4) => {
        const t4 = r2(...e4), n2 = t4[l].type, i2 = import_react.default.forwardRef((e5, r3) => {
          const i3 = e5 && e5.as || n2, { props: o2, deferredInjector: l2 } = t4(e5);
          return delete o2.as, o2.ref = r3, l2 ? import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(i3, o2), import_react.default.createElement(l2, null)) : import_react.default.createElement(i3, o2);
        });
        return i2.className = t4.className, i2.displayName = `Styled.${n2.displayName || n2.name || n2}`, i2.selector = t4.selector, i2.toString = () => t4.selector, i2[l] = t4[l], i2;
      };
    }))(t2), t2;
  };

  // ../assets/js/themes/colors.ts
  var dark = {
    black: "rgba(0,0,0,0.95)",
    gray1: "rgb(20, 22, 26)",
    gray2: "rgb(30, 34, 41)",
    //'rgb(36, 36, 44)',
    gray3: "rgb(65, 65, 65)",
    gray4: "rgb(72, 83, 94)",
    gray5: "rgb(87, 98, 109)",
    gray8: "rgb(110, 121, 132)",
    gray9: "rgb(145, 145, 149)",
    silver: "rgb(198, 203, 209)",
    white: "rgba(255, 255, 255, 0.95)",
    teal: "rgb(38, 181, 206)",
    lightBlue: "rgba(100, 198, 251, 1)",
    darkBlue: "rgb(38, 150, 255)",
    blue: "rgba(75, 177, 232, 1)",
    turquise: "rgb(14, 152, 173)",
    purple: "rgb(155, 129, 188)",
    lightPurple: "rgb(167, 159, 253)",
    candy: "rgb(249, 174, 170)",
    orange: "rgb(242, 153, 74)",
    red: "rgb(235, 87, 87)",
    darkRed: "rgb(197, 40, 40)",
    darkGreen: "rgb(15, 120, 60)",
    green: "rgb(76, 183, 130)",
    yellow: "rgb(242, 201, 76)",
    textSelectionFg: "$lightPurple",
    textSelectionBg: "rgba(40, 44, 51)",
    shellBg: "rgb(20, 22, 28)",
    shellFg: "rgb(255, 255, 255)",
    shellBorderColor: "rgba(255, 255, 255, 0.075)",
    shellBlur1: "rgba(15, 100, 222, 0.25)",
    scrollTrackBg: "",
    scrollThumbBg: "rgba(59, 63, 67)",
    scrollDarkThumbBg: "rgba(225, 235, 245, 0.08)",
    headerFg: "rgba(255, 255, 255, 0.9)",
    navigationFocusFg: "$white",
    navigationFocusBg: "rgba(125, 145, 200, 0.08)",
    navigationFg: "rgba(255, 255, 255, 0.6)",
    navigationUnreadFg: "$white",
    navigationBlur2: "rgba(126, 33, 50, 0.125)",
    navigationBlur1: "rgba(15, 100, 222, 0.125)",
    dockBg: "rgba(34, 37, 42, 0.4)",
    dockFocusBg: "rgba(37, 40, 45, 0.7)",
    dockFocusSectionBg: "rgba(37, 40, 45, 0.5)",
    dockBorderColor: "rgba(255, 255, 255, 0.05)",
    dockFocusBorderColor: "rgba(255, 255, 255, 0.07)",
    dockSeparator: "rgba(255, 255, 255, 0.05)",
    dockFg: "$white",
    dockPresenceFg: "rgba(255, 255, 255, 0.4)",
    dockIconBorderColor: "$gray2",
    dockIconReadyBg: "$gray3",
    dockIconConnectingBg: "$yellow",
    dockIconFailedBg: "$red",
    dockIconConnectedBg: "rgb(20, 130, 80)",
    dockButtonIconFg: "rgba(255, 255, 255, 0.7)",
    dockButtonBg: "rgba(255, 255, 255, 0.0185)",
    dockButtonHoverBg: "rgba(255, 255, 255, 0.05)",
    dockButtonHoverFg: "rgba(255, 255, 255, 0.6)",
    dockButtonHighlightedBg: "rgba(255, 255, 255, 0.03)",
    dockButtonOffFg: "rgba(255, 255, 255, 0.3)",
    dockButtonOnFg: "$green",
    dockButtonFg: "rgba(255, 255, 255, 0.7)",
    statusIconOnlineBg: "$green",
    statusIconActiveBg: "$green",
    statusIconFocusBg: "$yellow",
    statusIconZenBg: "$purple",
    statusIconOfflineBg: "rgb(50, 54, 61, 1)",
    presenceModelineFocusFg: "rgba(242, 201, 76, 0.9)",
    presenceModelineFocusBlur: "rgba(242, 201, 76, 0.2)",
    presenceModelineSoloFg: "rgba(255, 93, 224, 0.9)",
    presenceModelineSoloBlur: "rgba(255, 93, 224, 0.12)",
    presenceModelineZenFg: "rgba(235, 87, 87, 0.9)",
    presenceModelineZenBlur: "rgba(235, 87, 87, 0.15)",
    presenceModelineActiveFg: "rgb(24, 255, 167)",
    presenceModelineActiveBlur: "rgba(24, 255, 167, 0.18)",
    presenceModelineSocialFg: "rgb(24, 255, 167)",
    presenceModelineSocialBlur: "rgba(24, 255, 167, 0.18)",
    contextMenuBg: "rgba(30, 34, 41, 0.6)",
    contextMenuFg: "rgba(255, 255, 255, 0.6)",
    contextMenuLeftSlotFg: "rgba(100, 106, 110, 0.8)",
    contextMenuRightSlotFg: "rgba(100, 106, 110, 0.8)",
    contextMenuHighlightBg: "rgba(255, 245, 240, 0.07)",
    contextMenuHighlightFg: "rgba(255, 255, 255, 0.9)",
    commandPaletteBg: "rgba(30, 34, 41, 0.6)",
    commandPaletteFg: "$white",
    commandPaletteTitleFg: "rgba(255, 255, 255, 0.6)",
    commandPaletteTitleBg: "rgba(255, 255, 255, 0.08)",
    commandPaletteHeaderBorderColor: "rgba(255, 255, 255, 0.1)",
    commandPaletteInputFg: "$white",
    commandPaletteCaretColor: "$purple",
    commandPalettePlaceholderFg: "rgba(255, 255, 255, 0.4)",
    commandPaletteCommandFg: "rgba(255, 255, 255, 0.4)",
    commandPaletteHintFg: "rgba(255, 255, 255, 0.2)",
    commandPaletteErrorFg: "$red",
    commandPaletteCommandIconFg: "rgba(255, 255, 255, 0.3)",
    commandPaletteSelectedCommandFg: "$white",
    commandPaletteSelectedCommandIconFg: "rgba(255, 210, 200, 1)",
    commandPaletteSelectedCommandBg: "rgba(255, 245, 240, 0.07)",
    commandPaletteSelectedCommandBorder: "rgba(38, 181, 206, 0.9)",
    commandPaletteHighlightedCommandFg: "$silver",
    commandPaletteSelectedHintFg: "rgba(255, 255, 255, 0.4)",
    commandPaletteShortcutBg: "rgba(149, 149, 189, 0.2)",
    commandPaletteSelectedShortcutBg: "rgba(149, 149, 189, 0.25)",
    commandPaletteSelectedShortcutFg: "rgba(255, 255, 255, 0.85)",
    commandPaletteSeparatorBg: "rgba(255, 255, 255, 0.06)",
    participantBg: "rgba(255, 255, 255, 0.05)",
    participantBorder: "rgba(150, 190, 255, 0.1)",
    participantLabelFg: "rgba(255, 255, 255, 0.9)",
    participantLabelBg: "rgba(255, 255, 255, 0.08)",
    participantFocusBg: "$yellow",
    participantFocusFg: "rgba(25, 20, 0, 0.85)",
    participantSoloBg: "rgba(255, 93, 224, 0.7)",
    participantSoloFg: "rgba(25, 20, 0, 0.9)",
    participantZenBg: "rgba(235, 87, 87, 0.7)",
    participantZenFg: "rgba(55, 10, 0, 0.9)",
    participantSocialBg: "rgba(235, 87, 87, 0.7)",
    participantSocialFg: "rgba(55, 10, 0, 0.9)",
    participantActiveBg: "rgba(24, 255b, 167, 0.7)",
    participantActiveFg: "rgba(0, 55, 24, 0.85)",
    roomTitleFg: "$white",
    dropdownBg: "rgba(45, 49, 56, 0.7)",
    dropdownFg: "rgb(235, 238, 242, 0.8)",
    dropdownBorder: "rgba(82, 82, 111, 0.5)",
    dropdownLabelFg: "rgb(255, 255, 255, 0.3)",
    dropdownKbdFg: "rgb(255, 255, 255, 0.4)",
    dropdownItemHighlightedBg: "rgba(225, 235, 255, 0.055)",
    tooltipBg: "$dropdownBg",
    tooltipFg: "$dropdownFg",
    tooltipBorder: "rgba(82, 82, 111, 0.3)",
    tooltipKeyBg: "rgba(149, 149, 189, 0.25)",
    switchBg: "rgba(255, 255, 255, 0.2)",
    switchFg: "rgba(255, 255, 255, 0.65)",
    switchCheckedBg: "$blue",
    switchCheckedFg: "$white",
    chatInputBg: "rgb(30, 34, 41)",
    chatInputFg: "rgb(235, 238, 242, 0.8)",
    chatInputFocusBg: "rgba(36, 40, 47)",
    chatInputFocusFg: "$white",
    chatInputCaret: "$purple",
    chatMessageAuthorFg: "rgb(232, 233, 237)",
    chatMessageDateFg: "rgb(100, 106, 111)",
    chatMessageBodyFg: "rgb(209, 210, 215)",
    chatMessageLinkFg: "$lightBlue",
    chatMessageEditedFg: "rgba(209, 210, 215, 0.5)",
    focusItemBg: "radial-gradient(circle farthest-corner at 0px 0px, $lightPurple, transparent), radial-gradient(circle farthest-corner at 0px 90%, $candy, transparent)",
    electronTrayWindowBg: "$shellBg",
    electronTrayWindowFg: "$white",
    electronTrayDockBg: "rgb(30, 34, 41)",
    electronTrayDockOpenBg: "rgba(36, 40, 47)",
    electronTrayDropdownBg: "rgb(34, 37, 42)",
    electronTrayDropdownOpenBg: "rgba(52, 55, 60, 0.95)",
    electronTrayUserTimeFg: "$electronTrayUserStatusFg",
    electronTrayUsernameFg: "rgba(255, 255, 255, 0.85)",
    electronTrayUserStatusFg: "rgba(255, 255, 255, 0.5)",
    electronTrayHighlightedUsernameFg: "$white",
    electronTrayHighlightedUserStatusFg: "rgba(255, 255, 255, 0.65)",
    electronTrayHighlightedUserBg: "rgba(255, 255, 255, 0.04)",
    electronTrayTextFieldFg: "rgba(255, 255, 255, 0.8)",
    electronTrayTextFieldFocusFg: "rgba(255, 255, 255, 0.9)",
    electronTrayTextFieldCaret: "$candy",
    electronTrayTextFieldSelectionBg: "rgba(255, 225, 250, 0.25)",
    electronTrayTextFieldPlaceholder: "rgba(255, 245, 255, 0.3)",
    electronPipContainerBg: "rgba(10, 12, 16, 0.9)",
    electronPipCallBg: "rgba(35, 39, 46, 0.9)",
    electronPipCallFg: "$white",
    electronPipHandleFg: "rgb(245, 249, 251, 0.4)",
    electronPipButtonFg: "rgba(155, 160, 165, 0.8)",
    electronPipButtonHoverBg: "rgba(235, 239, 245, 0.12)",
    electronPipButtonHoverFg: "rgba(255, 255, 255, 0.95)",
    electronPipOnButtonFg: "rgba(245, 249, 255, 0.8)",
    electronPipHangUpButtonFg: "rgb(234, 68, 54)",
    electronPipHangUpButtonHoverFg: "rgb(254, 88, 74)"
  };
  var participantLabelBg = [
    [94, 106, 210],
    [38, 150, 255],
    [56, 163, 110],
    [209, 114, 100],
    [235, 87, 87],
    [187, 135, 252],
    [78, 167, 252],
    [15, 116, 136],
    [0, 166, 86],
    [219, 110, 31],
    [197, 40, 40]
    //[36, 143, 90],
    /*dark.blue,
    dark.green,
    dark.teal,
    dark.orange,
    dark.red,
    dark.purple,
    dark.candy,*/
  ];

  // ../assets/js/themes/tokens.ts
  var tokens = {
    colors: dark,
    space: {
      space1: "2px",
      space2: "4px",
      space3: "6px",
      space4: "8px",
      space5: "12px",
      space6: "16px",
      space7: "20px",
      space8: "24px",
      space9: "36px",
      space10: "40px",
      space11: "48px",
      space12: "64px"
    },
    fontSizes: {
      xsmall: "10px",
      small: "12px",
      base: "14px",
      medium: "16px",
      large: "21px",
      xlarge: "36px"
    },
    fonts: {
      sans: '"Inter", -apple-system, BlinkMacSystemFont, sans-serif'
    },
    fontWeights: {
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600
    },
    lineHeights: {
      base: "1",
      tight: "1.33",
      normal: "1.5",
      relaxed: "1.71",
      loose: "2"
    },
    letterSpacings: {
      tight: "-0.2px",
      normal: "0",
      wide: "0.2px"
    },
    borderWidths: {},
    borderStyles: {},
    radii: {
      none: 0,
      xsmall: "2px",
      small: "4px",
      medium: "6px",
      large: "12px",
      xlarge: "24px",
      circle: "100%"
    },
    zIndices: {
      belowBase: 1,
      base: 10,
      aboveBase: 20,
      content: 30,
      aboveContent: 35,
      navigation: 40,
      aboveNavigation: 45,
      modal: 60,
      aboveModal: 65,
      overlay: 90,
      aboveOverlay: 95,
      window: 100
    },
    transitions: {}
  };

  // ../assets/js/themes/utils.ts
  var BASELINE_UNIT = 4;
  var utils = {
    space: (options) => {
      const ret = {};
      const margin = options.outer ? !Array.isArray(options.outer) ? [options.outer] : options.outer : void 0;
      if (margin)
        ret["margin"] = margin.map((n2) => `${n2 * BASELINE_UNIT}px`).join(" ");
      const padding = options.inner ? !Array.isArray(options.inner) ? [options.inner] : options.inner : void 0;
      if (padding)
        ret["padding"] = padding.map((n2) => `${n2 * BASELINE_UNIT}px`).join(" ");
      if (options.gap)
        ret["gap"] = `${options.gap * BASELINE_UNIT}px`;
      return ret;
    },
    colors: (options) => {
      const ret = mapCSSOptions(options, {
        fg: "color",
        bg: "backgroundColor",
        caret: "caretColor",
        border: "borderColor"
      });
      if (options.placeholderBg) {
        ret["::placeholder"] = __spreadProps(__spreadValues({}, ret["::placeholder"]), {
          background: options.placeholderBg
        });
      }
      if (options.placeholderFg) {
        ret["::placeholder"] = __spreadProps(__spreadValues({}, ret["::placeholder"]), {
          color: options.placeholderFg
        });
      }
      if (options.selectionBg) {
        ret["::selection"] = __spreadProps(__spreadValues({}, ret["::selection"]), {
          color: options.selectionBg
        });
      }
      if (options.selectionFg) {
        ret["::selection"] = __spreadProps(__spreadValues({}, ret["::selection"]), {
          color: options.selectionFg
        });
      }
      return ret;
    },
    baselineBlock: (span) => {
      return {
        display: "flex",
        alignItems: "flex-end",
        unitHeight: span
      };
    },
    baselineGrid: (limit) => {
      return {
        display: "grid",
        gridTemplateRows: `repeat(${limit}, minmax(0, ${BASELINE_UNIT}px))`
      };
    },
    baselineGridRow: (span) => {
      return {
        gridRow: `span ${span} / span ${span}`
      };
    },
    unitHeight: (units) => {
      return {
        height: `${units * BASELINE_UNIT}px`
      };
    },
    unitWidth: (units) => {
      return {
        width: `${units * BASELINE_UNIT}px`
      };
    },
    baselineFontSize: (tokenName) => {
      return {
        fontSize: `$${tokenName}`,
        extendDescender: `var(--fontSizes-${tokenName})`,
        lineHeight: "$base"
      };
    },
    extendDescender: (fontSize) => {
      return {
        position: "relative",
        bottom: `calc(${fontSize} * -0.14)`
      };
    },
    round: (radi) => {
      return {
        borderRadius: radi === void 0 || radi === true ? "100%" : `$${radi}`
      };
    },
    center: () => {
      return {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexDirection: "column"
      };
    },
    vcenter: () => {
      return {
        display: "flex",
        alignItems: "center"
      };
    },
    hcenter: () => {
      return {
        display: "flex",
        justifyContent: "center"
      };
    },
    label: () => {
      return {
        cursor: "default",
        userSelect: "none"
      };
    },
    ellipsis: () => {
      return {
        overflowX: "hidden",
        overflowY: "hidden",
        whiteSpace: "nowrap",
        textOverflow: "ellipsis"
      };
    },
    backdrop: (options) => {
      return {
        backdropFilter: `blur(${options.blur}px) saturate(${options.saturate}%) contrast(${options.contrast}%) brightness(${options.brightness}%)`
      };
    },
    fade: (options) => {
      const effect = options.effect || "ease-in-out";
      return {
        transition: `${options.props.join(" ")} ${options.time}s ${effect}`
      };
    },
    capitalizeFirstLetter: (_) => {
      return {
        "&::first-letter": {
          textTransform: "uppercase"
        }
      };
    },
    scrollbar: (opts) => {
      return {
        overflow: "hidden",
        "&:hover": {
          overflowX: opts.x ? "overlay" : "hidden",
          overflowY: opts.y ? "overlay" : "hidden"
        },
        "&::-webkit-scrollbar": {
          width: "5px",
          opacity: "0",
          background: "transparent",
          position: "absolute",
          zIndex: "9999999"
        },
        "&::-webkit-scrollbar-track": {
          background: "$scrollTrackBg"
        },
        "&::-webkit-scrollbar-thumb": {
          background: opts.dark ? "$scrollDarkThumbBg" : "$scrollThumbBg",
          borderRadius: "10px",
          width: "4.5px"
        },
        "&::-webkit-scrollbar:hover": {
          opacity: "1"
        }
      };
    }
  };
  function mapCSSOptions(options, dict) {
    const ret = {};
    for (const key in options) {
      if (dict[key]) {
        ret[dict[key]] = options[key];
      }
    }
    return ret;
  }

  // ../assets/js/themes/index.ts
  var { styled, css, theme } = q({
    media: {
      mobile: "(max-width: 399px)",
      xs: "(min-width: 640px) and (min-height: 399px)",
      s: "(min-width: 800px) and (max-width: 899px)",
      m: "(min-width: 1024px) and (min-height: 599px)",
      l: "(min-width: 1200px) and (min-height: 700px)",
      xl: "(min-width: 1600px) and (min-height: 1000px)",
      pipSingleColumn: "(max-width: 200px)",
      pipDoubleColumn: "(min-width: 200px)",
      pipTripleColumn: "(min-width: 300px)"
    },
    theme: tokens,
    utils
  });

  // ../assets/js/features/ElectronPipWindow/index.tsx
  var import_react8 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // ../assets/js/features/ElectronPipWindow/Handle.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function HandleButton(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", __spreadProps(__spreadValues({ width: 46, height: 11, fill: "none" }, props), { children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 21, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 17, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 13, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 21, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 21, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 17, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 13, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 17, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 13, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 9, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 5, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 1, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 9, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 9, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 5, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 1, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 5, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 1, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 33, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 29, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 25, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 33, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 33, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 29, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 25, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 29, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 25, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 45, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 41, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 37, cy: 1.005, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 45, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 45, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 41, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 37, cy: 5.01, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 41, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ellipse", { cx: 37, cy: 9.015, fill: "currentColor", rx: 1, ry: 1.001 })
    ] }));
  }

  // ../assets/js/components/Icon/Headphones.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  function HeadphonesIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "0 0 24 24",
        width: "100%",
        height: "100%",
        stroke: "currentColor",
        strokeWidth: 2,
        fill: "none",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "M3 18v-6a9 9 0 0 1 18 0v6" }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z" })
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Coffee.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  function CoffeeIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "path",
          {
            d: "M19.25 17.25v-8.5H7.75v8.5a2 2 0 0 0 2 2h7.5a2 2 0 0 0 2-2ZM7.5 10.75h-.75a2 2 0 0 0-2 2v1.5a2 2 0 0 0 2 2h.75M13.25 4.75v1.5M8.25 4.75s1 0 1 1.5M18.25 4.75s-1 0-1 1.5",
            stroke: "currentColor",
            strokeWidth: 1.5,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/PhoneCall.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  function PhoneCallIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M8.893 4.75H6.068c-.728 0-1.318.59-1.318 1.318 0 7.28 5.902 13.182 13.182 13.182.728 0 1.318-.59 1.318-1.318v-2.825l-3.107-2.071-1.611 1.61c-.28.28-.698.368-1.05.186a11.093 11.093 0 0 1-2.518-1.796 8.726 8.726 0 0 1-1.836-2.542c-.16-.34-.067-.733.199-1l1.637-1.637L8.893 4.75ZM14 5.03a7.264 7.264 0 0 1 5 5.076"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Night.tsx
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  function NightIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "path",
          {
            d: "M18.25 15.031a6.876 6.876 0 0 1-1.53.172c-3.912 0-7.084-3.284-7.084-7.336 0-1.114.24-2.171.67-3.117-3.178.724-5.556 3.657-5.556 7.164 0 4.052 3.172 7.336 7.085 7.336 2.836 0 5.283-1.726 6.415-4.219Z",
            stroke: "currentColor",
            strokeWidth: 1.5,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Sliders.tsx
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  function SlidersIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M4.75 8h2.5M12.75 8h6.5M4.75 16h7.5M17.75 16h1.5"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            "circle",
            {
              cx: 10,
              cy: 8,
              r: 2.25,
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            "circle",
            {
              cx: 15,
              cy: 16,
              r: 2.25,
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Terminal.tsx
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  function Terminal(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            "rect",
            {
              width: 14.5,
              height: 14.5,
              x: 4.75,
              y: 4.75,
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              rx: 2
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "m8.75 10.75 2.5 2.25-2.5 2.25"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Command.tsx
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  function Command(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          "path",
          {
            d: "M4.75 6.5a1.75 1.75 0 1 1 3.5 0v1.75H6.5A1.75 1.75 0 0 1 4.75 6.5ZM15.75 6.5a1.75 1.75 0 1 1 1.75 1.75h-1.75V6.5ZM15.75 15.75h1.75a1.75 1.75 0 1 1-1.75 1.75v-1.75ZM4.75 17.5c0-.966.784-1.75 1.75-1.75h1.75v1.75a1.75 1.75 0 1 1-3.5 0ZM8.25 8.25h7.5v7.5h-7.5v-7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.5,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Mic.tsx
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  function MicIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("svg", __spreadProps(__spreadValues({ viewBox: "4 4 16 16", width: "100%", height: "100%", fill: "none" }, props), { children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "path",
        {
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 1.5,
          d: "M8.75 8a3.25 3.25 0 0 1 6.5 0v3a3.25 3.25 0 0 1-6.5 0V8Z"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "path",
        {
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 1.5,
          d: "M5.75 12.75s.25 4.5 6.25 4.5 6.25-4.5 6.25-4.5M12 17.75v1.5"
        }
      )
    ] }));
  }

  // ../assets/js/components/Icon/Video.tsx
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  function VideoIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "path",
          {
            fill: "currentColor",
            d: "M15.114 9.357a.75.75 0 0 0 .772 1.286l-.772-1.286ZM19.25 7.75H20a.75.75 0 0 0-1.136-.643l.386.643Zm0 8.5-.386.643A.75.75 0 0 0 20 16.25h-.75Zm-3.364-2.893a.75.75 0 1 0-.772 1.286l.772-1.286Zm0-2.714 3.75-2.25-.772-1.286-3.75 2.25.772 1.286ZM18.5 7.75v8.5H20v-8.5h-1.5Zm1.136 7.857-3.75-2.25-.772 1.286 3.75 2.25.772-1.286ZM6.75 7.5h6.5V6h-6.5v1.5Zm7.75 1.25v6.5H16v-6.5h-1.5Zm-1.25 7.75h-6.5V18h6.5v-1.5ZM5.5 15.25v-6.5H4v6.5h1.5Zm1.25 1.25c-.69 0-1.25-.56-1.25-1.25H4A2.75 2.75 0 0 0 6.75 18v-1.5Zm7.75-1.25c0 .69-.56 1.25-1.25 1.25V18A2.75 2.75 0 0 0 16 15.25h-1.5ZM13.25 7.5c.69 0 1.25.56 1.25 1.25H16A2.75 2.75 0 0 0 13.25 6v1.5ZM6.75 6A2.75 2.75 0 0 0 4 8.75h1.5c0-.69.56-1.25 1.25-1.25V6Z"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Monitor.tsx
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  function MonitorIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "0 0 24 24",
        width: "100%",
        height: "100%",
        stroke: "currentColor",
        strokeWidth: 2,
        fill: "none",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("rect", { x: 2, y: 3, width: 20, height: 14, rx: 2, ry: 2 }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { d: "M8 21h8M12 17v4" })
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Speaker.tsx
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  function SpeakerIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            "path",
            {
              d: "M5.75 6.75a2 2 0 0 1 2-2h8.5a2 2 0 0 1 2 2v10.5a2 2 0 0 1-2 2h-8.5a2 2 0 0 1-2-2V6.75Z",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            "path",
            {
              d: "M14.25 14a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Z",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            "path",
            {
              d: "M12.5 8a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Mic-off.tsx
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  function MicOffIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("svg", __spreadProps(__spreadValues({ viewBox: "4 4 16 16", width: "100%", height: "100%", fill: "none" }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 1.5,
        d: "M15.25 8.5V8a3.25 3.25 0 0 0-6.5 0v3.18c0 .047 0 .092.004.139.024.378.2 2.212 1.277 2.478M18.25 12.75s-.25 4.5-6.25 4.5c-.342 0-.666-.015-.972-.042M5.75 12.75s.105 1.891 1.814 3.222M12 17.75v1.5M18.25 5.75l-12.5 12.5"
      }
    ) }));
  }

  // ../assets/js/components/Icon/Video-off.tsx
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  function VideoOffIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("svg", __spreadProps(__spreadValues({ viewBox: "4 4 16 16", width: "100%", height: "100%", fill: "none" }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M4.463 6.057a.75.75 0 0 1 .817.163l10.5 10.5 2 2a.75.75 0 1 1-1.06 1.06L14.94 18H6.75A2.75 2.75 0 0 1 4 15.25v-8.5a.75.75 0 0 1 .463-.693ZM13.439 16.5 5.5 8.56v6.69c0 .69.56 1.25 1.25 1.25h6.69Zm-.189-9h-3.5a.75.75 0 0 1 0-1.5h3.5A2.75 2.75 0 0 1 16 8.718l2.882-1.622A.75.75 0 0 1 20 7.75v8.5a.75.75 0 0 1-1.118.654l-4-2.25A.75.75 0 0 1 14.5 14V8.75c0-.69-.56-1.25-1.25-1.25ZM16 10.439v3.122l2.5 1.407V9.032L16 10.44Z",
        clipRule: "evenodd"
      }
    ) }));
  }

  // ../assets/js/lib/log.ts
  var c2 = 0;
  var colors = ["red", "blue", "green", "purple", "orange"];
  function logger(name) {
    const color = colors[c2++ % colors.length];
    return {
      info,
      error
    };
    function info(msg, ...props) {
      log7(console.info, msg, props);
    }
    function error(msg, ...props) {
      log7(console.error, msg, props);
    }
    function log7(fn, msg, props) {
      const args = [
        `%c<${name}>%c ${msg}`,
        `color: ${color};font-weight: bold;`,
        "color: inherit"
      ];
      if (props.length > 1) {
        args.push(...props.slice(0, -1));
        args.push(props[props.length - 1]);
      } else if (props.length > 0) {
        args.push(props[0]);
      }
      fn.apply(console, args);
    }
  }

  // ../assets/js/components/Icon/Checkmark.tsx
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  function CheckmarkIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          "path",
          {
            d: "m7.75 12.75 2.25 2.5 6.25-6.5",
            stroke: "currentColor",
            strokeWidth: 1.5,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Undo.tsx
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  function Undo(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M9.25 4.75 4.75 9l4.5 4.25"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M5.5 9h9.75a4 4 0 0 1 4 4v6.25"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/SpeakerVolumeHigh.tsx
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  function SpeakerVolumeHigh(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          "path",
          {
            d: "M15.75 10.75s.5.484.5 1.25-.5 1.25-.5 1.25M17.75 7.75s1.5 1.25 1.5 4.249c0 2.998-1.5 4.25-1.5 4.25M13.25 4.75l-4.75 4H5.75a1 1 0 0 0-1 1v4.5a1 1 0 0 0 1 1H8.5l4.75 4V4.75Z",
            stroke: "currentColor",
            strokeWidth: 1.5,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/SpeakerOff.tsx
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  function SpeakerOff(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          "path",
          {
            d: "m13.25 4.75-4.75 4H5.75a1 1 0 0 0-1 1v4.5a1 1 0 0 0 1 1H8.5l4.75 4V4.75Z",
            stroke: "currentColor",
            strokeWidth: 1.5,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Projector.tsx
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  function ProjectorIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M18.25 7.75H5.75v7.5a2 2 0 0 0 2 2h8.5a2 2 0 0 0 2-2v-7.5ZM18.25 4.75H5.75a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h12.5a1 1 0 0 0 1-1v-1a1 1 0 0 0-1-1ZM12 17.5v1.75"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Press.tsx
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  function PressIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            "path",
            {
              d: "m10 19.25-2.246-5.99a.018.018 0 0 1 .004-.018 1.605 1.605 0 0 1 2.388.086l1.604 1.922V9a1.25 1.25 0 1 1 2.5 0v4.25h2a3 3 0 0 1 3 3v3",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            "path",
            {
              d: "M7.75 10.25V10a5.25 5.25 0 1 1 10.5 0v.25",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Dots.tsx
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  function DotsIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "path",
          {
            d: "M12.5 6a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM12.5 12a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM18.5 6a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM18.5 12a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM6.5 6a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM6.5 12a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM12.5 18a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM18.5 18a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM6.5 18a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z",
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Airpods.tsx
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  function AirpodsIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
          "path",
          {
            d: "M6.75 10.75h.75a.75.75 0 0 0-.932-.728l.182.728Zm-.757.19.181.727-.181-.728ZM6.75 5.5h.5V4h-.5v1.5ZM9.5 7.75v9.75H11V7.75H9.5Zm-2 9.75v-6.75H6v6.75h1.5Zm-.932-7.478-.757.19.363 1.455.758-.19-.364-1.455ZM5.5 9.97V6.75H4v3.22h1.5Zm3 8.531a1 1 0 0 1-1-1H6A2.5 2.5 0 0 0 8.5 20v-1.5Zm1-1a1 1 0 0 1-1 1V20a2.5 2.5 0 0 0 2.5-2.5H9.5Zm-2.25-12A2.25 2.25 0 0 1 9.5 7.75H11A3.75 3.75 0 0 0 7.25 4v1.5Zm-1.44 4.712a.25.25 0 0 1-.31-.243H4a1.75 1.75 0 0 0 2.174 1.698l-.363-1.455ZM6.75 4A2.75 2.75 0 0 0 4 6.75h1.5c0-.69.56-1.25 1.25-1.25V4ZM17.25 10.75l.182-.728a.75.75 0 0 0-.932.728h.75Zm.758.19-.182.727.181-.728ZM17.25 4h-.5v1.5h.5V4ZM13 7.75v9.75h1.5V7.75H13Zm5 9.75v-6.75h-1.5v6.75H18Zm-.932-6.022.758.189.363-1.455-.757-.19-.364 1.456ZM20 9.969V6.75h-1.5v3.22H20ZM15.5 20a2.5 2.5 0 0 0 2.5-2.5h-1.5a1 1 0 0 1-1 1V20ZM13 17.5a2.5 2.5 0 0 0 2.5 2.5v-1.5a1 1 0 0 1-1-1H13ZM16.75 4A3.75 3.75 0 0 0 13 7.75h1.5a2.25 2.25 0 0 1 2.25-2.25V4Zm1.076 7.667A1.75 1.75 0 0 0 20 9.969h-1.5a.25.25 0 0 1-.31.243l-.364 1.455ZM17.25 5.5c.69 0 1.25.56 1.25 1.25H20A2.75 2.75 0 0 0 17.25 4v1.5Z",
            fill: "currentColor"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Zoom.tsx
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  function ZoomInIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
            "circle",
            {
              cx: 11,
              cy: 11,
              r: 6.25,
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "m15.5 15.5 3.75 3.75M11 8.75v4.5M13.25 11h-4.5"
            }
          )
        ]
      })
    );
  }
  function ZoomOutIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
            "circle",
            {
              cx: 11,
              cy: 11,
              r: 6.25,
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "m15.5 15.5 3.75 3.75M13.25 11h-4.5"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Eye.tsx
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  function EyeIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M19.25 12c0 1-1.75 6.25-7.25 6.25S4.75 13 4.75 12 6.5 5.75 12 5.75 19.25 11 19.25 12Z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
            "circle",
            {
              cx: 12,
              cy: 12,
              r: 2.25,
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Sunrise.tsx
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  function SunriseIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "path",
          {
            d: "m9.25 16.25-.687-.75a4.25 4.25 0 1 1 6.875 0l-.688.75M4.74 16.25h14.51M6.74 19.25h10.51M12 4.75v.5M15.625 5.721l-.25.433M18.279 8.375l-.433.25M19.25 12h-.5M5.25 12h-.5M6.154 8.625l-.433-.25M8.625 6.154l-.25-.433",
            stroke: "currentColor",
            strokeWidth: 1.5,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Incognito.tsx
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  function IncognitoIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M13.25 16.75h-2.5m-6-4s.409-.354 1.25-.764m0 0c1.16-.564 3.139-1.236 6-1.236s4.84.672 6 1.236m-12 0 .564-5.442a2 2 0 0 1 1.99-1.794h6.893a2 2 0 0 1 1.989 1.794L18 11.986m0 0c.841.41 1.25.764 1.25.764m-9 4.25a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Zm8 0a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Z"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Livestream.tsx
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  function LiveStreamIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            "path",
            {
              d: "M15.75 5.75c1.959 1.298 3.5 3.724 3.5 6.25s-1.541 4.952-3.5 6.25M8.25 5.75C6.291 7.048 4.75 9.474 4.75 12s1.541 4.952 3.5 6.25",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            "path",
            {
              d: "M14.75 8.75c.772.77 1.5 2.074 1.5 3.25 0 1.176-.728 2.48-1.5 3.25M9.25 8.75c-.772.77-1.5 2.074-1.5 3.25 0 1.176.728 2.48 1.5 3.25",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            "path",
            {
              d: "M12.5 12a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Plus.tsx
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  function PlusIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M12 5.75v12.5M18.25 12H5.75"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Hashtag.tsx
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  function HashtagIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "m10.25 4.75-2.5 14.5M16.25 4.75l-2.5 14.5M19.25 8.75H5.75M18.25 15.25H4.75"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Edit.tsx
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  function EditIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "m4.75 19.25 4.25-1 9.293-9.293a1 1 0 0 0 0-1.414l-1.836-1.836a1 1 0 0 0-1.414 0L5.75 15l-1 4.25ZM19.25 19.25h-5.5"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Trash.tsx
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  function TrashIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "m6.75 7.75.841 9.673a2 2 0 0 0 1.993 1.827h4.832a2 2 0 0 0 1.993-1.827l.841-9.673M9.75 7.5v-.75a2 2 0 0 1 2-2h.5a2 2 0 0 1 2 2v.75M5 7.75h14"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Logout.tsx
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  function LogoutIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "m15.75 8.75 3.5 3.25-3.5 3.25M19 12h-8.25M15.25 4.75h-8.5a2 2 0 0 0-2 2v10.5a2 2 0 0 0 2 2h8.5"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Avatar.tsx
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  function AvatarIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M6.75 19S8 15.75 12 15.75 17.25 19 17.25 19m-3-9a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Zm-6.5 9.25h8.5a3 3 0 0 0 3-3v-8.5a3 3 0 0 0-3-3h-8.5a3 3 0 0 0-3 3v8.5a3 3 0 0 0 3 3Z"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Mail.tsx
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  function MailIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M4.75 7.75a2 2 0 0 1 2-2h10.5a2 2 0 0 1 2 2v8.5a2 2 0 0 1-2 2H6.75a2 2 0 0 1-2-2v-8.5Z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "m5.5 6.5 6.5 5.75 6.5-5.75"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Passport.tsx
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  function PassportIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
            "path",
            {
              d: "M18.25 6.75a2 2 0 0 0-2-2H5.75v14.5h10.5a2 2 0 0 0 2-2V6.75Z",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
            "path",
            {
              d: "M14.25 10a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0ZM9.75 15.25h4.5",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/NewHire.tsx
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  function NewHireIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M6.75 19.25s1.575-2.5 5.25-2.5 5.25 2.5 5.25 2.5M12 4.75v.5m3.625.471-.25.433m2.904 2.22-.433.25M19.25 12h-.5m-.471 3.625-.433-.25m-11.692 0-.433.25M5.25 12h-.5m1.404-3.375-.433-.25m2.904-2.22-.25-.434M14.25 12a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Z"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Send.tsx
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  function SendIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M4.75 19.25 12 4.75l7.25 14.5-7.25-3.5-7.25 3.5ZM12 15.5v-2.75"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/LightBulb.tsx
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  function LightBulbIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          "path",
          {
            d: "M12 4.75C8.5 4.75 6.75 7.5 6.75 10c0 4 3 4.5 3 6v2.25a1 1 0 0 0 1 1h2.5a1 1 0 0 0 1-1V16c0-1.5 3-2 3-6 0-2.5-1.75-5.25-5.25-5.25ZM10 16.75h4",
            stroke: "currentColor",
            strokeWidth: 1.5,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Emoji.tsx
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  function EmojiIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
            "path",
            {
              d: "M19.25 12a7.25 7.25 0 1 1-14.5 0 7.25 7.25 0 0 1 14.5 0Z",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
            "path",
            {
              d: "M9.75 13.75s.25 1.5 2.25 1.5 2.25-1.5 2.25-1.5",
              stroke: "currentColor",
              strokeWidth: 1.5,
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
            "path",
            {
              d: "M10.5 10a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM14.5 10a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Search.tsx
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  function SearchIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M19.25 19.25 15.5 15.5M4.75 11a6.25 6.25 0 1 1 12.5 0 6.25 6.25 0 0 1-12.5 0Z"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Bell.tsx
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  function BellIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M17.25 12v-2a5.25 5.25 0 1 0-10.5 0v2l-2 4.25h14.5l-2-4.25ZM9 16.75s0 2.5 3 2.5 3-2.5 3-2.5"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Users.tsx
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  function UsersIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M5.782 19.25h7.436c.565 0 1.009-.468.896-1.021C13.804 16.7 12.79 14 9.5 14s-4.304 2.701-4.615 4.229c-.112.553.332 1.021.897 1.021ZM15.75 14c2.079 0 2.93 2.148 3.274 3.696.185.836-.49 1.554-1.347 1.554h-.927"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
            "circle",
            {
              cx: 9.5,
              cy: 7.5,
              r: 2.75,
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M14.75 10.25c1.519 0 2.5-1.231 2.5-2.75s-.981-2.75-2.5-2.75"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Sidebar.tsx
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  function SidebarIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M12.75 4.75h4.5a2 2 0 0 1 2 2v10.5a2 2 0 0 1-2 2h-4.5m-8-2V6.75a2 2 0 0 1 2-2h2.5v14.5h-2.5a2 2 0 0 1-2-2Z"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/Chat.tsx
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  function ChatIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "5 5 15 15",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M12 18.25c3.5 0 7.25-1.75 7.25-6.25S15.5 5.75 12 5.75 4.75 7.5 4.75 12c0 1.03.196 1.916.541 2.67.215.47.336.987.24 1.495l-.262 1.399a1 1 0 0 0 1.168 1.167l3.207-.602a2.24 2.24 0 0 1 .764-.003c.527.084 1.062.124 1.592.124Z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              d: "M9.5 12a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM12.5 12a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM15.5 12a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/DoorEnter.tsx
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  function DoorEnterIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M10.25 4.75h-3.5a2 2 0 0 0-2 2v12.5h10.5v-6.5"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              d: "M12.5 12a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M4.75 19.25h14.5M16.25 9.25 13.75 7m0 0 2.5-2.25M13.75 7h5.5"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/Activity.tsx
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  function ActivityIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
          "path",
          {
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 1.5,
            d: "M4.75 11.75h3.5l2-7 3.5 14.5 2-7.5h3.5"
          }
        )
      })
    );
  }

  // ../assets/js/components/Icon/UserPlus.tsx
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  function UserPlusIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        viewBox: "4 4 16 16",
        width: "100%",
        height: "100%",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
            "circle",
            {
              cx: 12,
              cy: 8,
              r: 3.25,
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              d: "M12.25 19.25h-5.3c-1.18 0-2.06-1.04-1.46-2.055C6.363 15.723 8.24 14 12.25 14M17 14.75v4.5M19.25 17h-4.5"
            }
          )
        ]
      })
    );
  }

  // ../assets/js/components/Icon/PhoneHangup.tsx
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  function PhoneHangUp(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
      "svg",
      __spreadProps(__spreadValues({
        width: "100%",
        height: "100%",
        viewBox: "0 0 200 200",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, props), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("g", { clipPath: "url(#a)", transform: "translate(0, 56)", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
            "path",
            {
              fill: "currentColor",
              d: "M17.037 85.837a212.008 212.008 0 0 1-6.523-6.273c-4.047-5.067-7.248-10.978-9.242-17.191-1.872-9.169-1.45-18.7 1.148-27.807 1.752-5.791 5.678-10.556 10.993-13.27 53.758-27.989 117.724-28.11 171.663-.483 6.101 3.197 10.752 8.806 12.504 15.441 1.268 4.947 2.174 9.893 2.295 14.779.181 11.46-3.322 22.439-9.725 31.728-.725 1.146-2.174 1.87-3.624 1.87-.725 0-1.57-.302-2.174-.724l-38.718-23.163c-1.994-1.146-2.718-3.74-1.571-5.79l6.826-12.426c.423-.724.543-1.448.543-2.172 0-2.473-1.993-4.343-4.469-4.343H54.124c-2.476 0-4.47 1.87-4.47 4.343 0 .845.303 1.69.725 2.413l4.772 6.997c1.148 1.87.846 4.162-.604 5.61l-31.59 30.28c-.846.724-1.873 1.146-3.02 1.146-1.027 0-2.054-.422-2.9-.965Z"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("clipPath", { id: "a", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", { fill: "currentColor", d: "M0 0h200v87H0z" }) }) })
        ]
      })
    );
  }

  // ../assets/js/components/Icon/index.tsx
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var icons = {
    headphones: HeadphonesIcon,
    coffee: CoffeeIcon,
    phoneCall: PhoneCallIcon,
    night: NightIcon,
    sliders: SlidersIcon,
    terminal: Terminal,
    checkmark: CheckmarkIcon,
    command: Command,
    mic: MicIcon,
    video: VideoIcon,
    micOff: MicOffIcon,
    videoOff: VideoOffIcon,
    monitor: MonitorIcon,
    speaker: SpeakerIcon,
    speakerVolumeHigh: SpeakerVolumeHigh,
    speakerOff: SpeakerOff,
    airpods: AirpodsIcon,
    projector: ProjectorIcon,
    undo: Undo,
    press: PressIcon,
    dots: DotsIcon,
    zoomIn: ZoomInIcon,
    zoomOut: ZoomOutIcon,
    eye: EyeIcon,
    sunrise: SunriseIcon,
    incognito: IncognitoIcon,
    livestream: LiveStreamIcon,
    plus: PlusIcon,
    hashtag: HashtagIcon,
    edit: EditIcon,
    trash: TrashIcon,
    logout: LogoutIcon,
    avatar: AvatarIcon,
    mail: MailIcon,
    passport: PassportIcon,
    newHire: NewHireIcon,
    send: SendIcon,
    emoji: EmojiIcon,
    lightbulb: LightBulbIcon,
    search: SearchIcon,
    bell: BellIcon,
    users: UsersIcon,
    sidebar: SidebarIcon,
    chat: ChatIcon,
    doorEnter: DoorEnterIcon,
    activity: ActivityIcon,
    userPlus: UserPlusIcon,
    phoneHangUp: PhoneHangUp
  };
  var log = logger("icons");
  function Icon(props) {
    if (!props.name)
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(import_jsx_runtime49.Fragment, {});
    const IconComponent = icons[props.name] || icons[props.name.replace(/-([a-z])/g, function(g2) {
      return g2[1].toUpperCase();
    })];
    if (IconComponent) {
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(IconComponent, __spreadValues({}, props));
    } else {
      log.error("Can not find icon", props.name, Object.keys(icons));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(import_jsx_runtime49.Fragment, {});
  }
  var Icon_default = Icon;

  // ../assets/js/components/Tooltip/index.tsx
  var import_react_tooltip = __toESM(require_dist18());

  // ../assets/js/lib/shortcuts.ts
  var shortcutMap = {
    cmd: "\u2318",
    opt: "\u2387",
    alt: "\u2387",
    shift: "\u21E7",
    ctrl: "\u2303",
    control: "\u2303",
    up: "\u2191",
    down: "\u2193"
  };
  function keySymbol(key) {
    return shortcutMap[key] || shortcutMap[key.toLowerCase()] || key;
  }

  // ../assets/js/components/Kbd/index.tsx
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  function Kbd(props) {
    return props.keys.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Keys, { children: props.keys.map((s2, ind) => /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(import_jsx_runtime50.Fragment, { children: [
      props.sep && ind !== 0 ? /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Sep, { children: "+" }, "step" + ind) : null,
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Key, { children: keySymbol(s2) }, ind)
    ] })) }) : null;
  }
  var Keys = styled("div", {
    display: "inline-flex",
    gap: "$space1",
    marginLeft: "auto",
    color: "$tooltipKeyFg"
  });
  var Key = styled("div", {
    display: "inline-flex",
    background: "$tooltipKeyBg",
    round: "small",
    textTransform: "capitalize",
    minWidth: "14px",
    padding: "0 5px",
    height: "20px",
    center: true
  });
  var Sep = styled("div", {
    display: "inline-flex",
    vcenter: true
  });

  // ../assets/js/components/Tooltip/index.tsx
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  function Tooltip(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_react_tooltip.Root, { delayDuration: 400, children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(import_react_tooltip.Trigger, { asChild: true, children: props.children }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(import_react_tooltip.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(StyledContent, { sideOffset: 10, hideWhenDetached: true, children: [
        props.content,
        props.shortcut ? /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Kbd, { keys: props.shortcut }) : null
      ] }) })
    ] });
  }
  var StyledContent = styled(import_react_tooltip.Content, {
    colors: {
      bg: "$tooltipBg",
      fg: "$tooltipFg"
    },
    display: "flex",
    vcenter: true,
    border: "0.5px solid $tooltipBorder",
    round: "medium",
    padding: "$space3 7px",
    fontSize: "$small",
    fontWeight: "$medium",
    gap: "$space4",
    boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.25)",
    backdrop: { blur: 10, saturate: 190, contrast: 70, brightness: 80 },
    cursor: "default",
    zIndex: "$aboveOverlay"
  });

  // ../assets/js/features/ElectronPipWindow/index.tsx
  var import_react_tooltip2 = __toESM(require_dist18());

  // ../assets/js/lib/electron.ts
  var log2 = logger("electron");
  var isNode2 = isRunningInElectron() && (process == null ? void 0 : process.type) !== "renderer";
  var _a;
  var ipcRenderer = typeof window !== "undefined" ? (_a = window.electron) == null ? void 0 : _a.ipcRenderer : null;
  var isElectron = !isNode2 && /electron/i.test(window.navigator.userAgent);
  var messageMainWindow = createMessageFn("main-window" /* Main */);
  var messageTrayWindow = createMessageFn("tray-window" /* Tray */);
  var messagePipWindow = createMessageFn("pip" /* Pip */);
  var messageWindowManager = createMessageFn(
    "window-manager" /* WindowManager */
  );
  function sendMessage(chan, message) {
    if (isNode2)
      throw Error("Not implemented for Node");
    if (!isElectron)
      return;
    if (!ipcRenderer) {
      log2.error("ipcRenderer undefined");
      return;
    }
    log2.info("Sending message", chan, message);
    ipcRenderer.send(chan, message);
  }
  function createMessageFn(target) {
    return (payload) => {
      return sendMessage("message", {
        target,
        payload
      });
    };
  }
  function isRunningInElectron() {
    return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.electron !== "undefined";
  }
  function getIpcRenderer() {
    return ipcRenderer;
  }

  // ../assets/js/components/UserView/index.tsx
  var import_react5 = __toESM(require_react());

  // ../assets/js/components/Avatar/index.tsx
  var import_react_avatar = __toESM(require_dist19());

  // ../assets/js/lib/string.ts
  function firstName(fullName) {
    return fullName.split(" ")[0];
  }
  function initials(fullName) {
    return fullName.split(" ").map((f2) => f2.slice(0, 1).toUpperCase()).join("");
  }

  // ../assets/js/components/Avatar/index.tsx
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  function Avatar(props) {
    const css2 = { fontSize: props.fontSize || "$small" };
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(AvatarRoot, { css: css2, onClick: props.onClick, children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(StyledImage, { src: props.src, alt: props.alt }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(StyledFallback, { children: initials(props.fallback) })
    ] });
  }
  var AvatarRoot = styled(import_react_avatar.Root, {
    center: true,
    display: "inline-flex",
    overflow: "hidden",
    userSelect: "none",
    height: "20px",
    aspectRatio: "1",
    fontSize: "$small",
    color: "$white",
    fontWeight: "500",
    "border-radius": "30%"
  });
  var StyledFallback = styled(import_react_avatar.Fallback, {
    "background-color": "$purple",
    width: "100%",
    height: "100%",
    objectFit: "cover",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  });
  var StyledImage = styled(import_react_avatar.Image, {
    width: "100%",
    height: "100%",
    objectFit: "cover"
  });

  // ../assets/js/components/ContextMenu/index.tsx
  var import_react_context_menu = __toESM(require_dist31());

  // ../assets/js/components/Emoji/index.tsx
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  function Emoji(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("em-emoji", { id: props.id, size: props.size });
  }

  // ../assets/js/components/ContextMenu/index.tsx
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  function LocalContent(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(import_react_context_menu.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(StyledContent2, { children: props.children }) });
  }
  var StyledContent2 = styled(import_react_context_menu.Content, {
    minWidth: "220px",
    fontSize: "13px",
    fontFamily: "$sans",
    background: "$contextMenuBg",
    color: "$contextMenuFg",
    boxShadow: "rgb(0 0 0 / 50%) 0px 16px 70px",
    border: "0.5px solid rgba(82, 82, 111, 0.44)",
    backdropFilter: "blur(20px) saturate(190%) contrast(70%) brightness(80%)",
    padding: "4px",
    round: "medium",
    zIndex: "$aboveContent"
  });
  function LocalItem(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(StyledItem, { onClick: props.onClick, children: [
      /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(LeftSlot, { children: [
        props.icon ? /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Icon_default, { name: props.icon }) : null,
        props.emoji ? /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Emoji, { id: props.emoji }) : null
      ] }),
      props.label,
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(RightSlot, { children: props.kbd ? /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Kbd, { keys: props.kbd }) : null })
    ] });
  }
  var RightSlot = styled("div", {
    color: "$contextMenuRightSlotFg"
  });
  var LeftSlot = styled("div", {
    color: "$contextMenuLeftSlotFg",
    center: true,
    opacity: "0.9",
    "& svg": {
      display: "block",
      height: "14px"
    },
    "& em-emoji": {
      fontSize: "16px"
    }
  });
  var StyledItem = styled(import_react_context_menu.Item, {
    vcenter: true,
    display: "grid",
    gridTemplateColumns: "36px auto 50px",
    height: "32px",
    fontWeight: "$medium",
    label: true,
    outline: "none",
    round: "small",
    "&[data-highlighted]": {
      background: "$contextMenuHighlightBg",
      color: "$contextMenuHighlightFg",
      [`& ${LeftSlot}`]: {
        opacity: "1",
        color: "$candy"
      }
    }
  });
  var StyledSeparator = styled(import_react_context_menu.Separator, {
    margin: "8px 0",
    height: "1px",
    background: "rgba(255, 255, 255, 0.07)"
  });
  var ContextMenu = {
    Root: import_react_context_menu.Root,
    Portal: import_react_context_menu.Portal,
    Content: LocalContent,
    Trigger: import_react_context_menu.Trigger,
    Item: LocalItem,
    Label: import_react_context_menu.Label,
    Separator: StyledSeparator,
    SubContent: import_react_context_menu.SubContent,
    Switch: import_react_context_menu.Item,
    Sub: import_react_context_menu.Sub,
    SubTrigger: import_react_context_menu.SubTrigger
  };

  // ../assets/js/components/Timestamp/index.tsx
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());

  // ../assets/js/components/StatusUpdate/index.tsx
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var StyledStatusUpdate = styled("div", {
    display: "flex",
    gap: "8px"
  });
  var Right = styled("div", {
    display: "flex",
    flexDirection: "column",
    gap: "4px",
    justifyContent: "center",
    label: true
  });
  var StatusHeader = styled("header", {
    fontWeight: "$medium",
    color: "rgba(255, 255, 255, 0.95)",
    fontSize: "$base",
    "& em-emoji": {
      position: "relative",
      display: "inline-block",
      width: "18px",
      "& span": {
        position: "relative",
        left: "2px",
        fontSize: "16px"
      }
    }
  });
  var StyledStatus = styled("div", {
    color: "rgba(225, 232, 240, 0.5)",
    fontSize: "$small"
  });
  var Date2 = styled("span", {
    marginLeft: "4px",
    color: "$chatMessageDateFg",
    fontSize: "$small",
    fontWeight: "$medium",
    lineHeight: "17px"
  });
  var Author = styled("label", {
    margin: "0 4px"
  });

  // ../assets/js/state/presence.ts
  var Online = {
    status: "online" /* Online */,
    icon: "headphones",
    color: "$online",
    label: "Online",
    keywords: ["available", "present"],
    desc: "Be present",
    notifications: true
  };
  var Focus = {
    status: "focus" /* Focus */,
    icon: "headphones",
    color: "$focus",
    label: "Focus",
    desc: "Productive and responsive",
    keywords: [],
    notifications: true
  };
  var Zen = {
    status: "zen" /* Zen */,
    icon: "sunrise",
    color: "$zen",
    label: "Zen",
    desc: "Calm, undisturbed",
    keywords: ["mindful", "meditation", "dnd", "do not disturb"],
    notifications: false
  };
  var PresenceModes = [Online, Focus, Zen];
  function findModeByStatus(status) {
    return PresenceModes.find((m2) => m2.status === status);
  }

  // ../assets/js/features/Dock/StatusIcon.tsx
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  function StatusIcon(props) {
    var _a2, _b, _c;
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(StyledStatusIcon, { children: ((_a2 = props.status) == null ? void 0 : _a2.emoji) && !props.noEmoji && props.isOnline !== false ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Emoji, { id: (_b = props.status) == null ? void 0 : _b.emoji, size: "1.35em" }) : /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
      StatusCircle,
      {
        presence: (_c = props.status) == null ? void 0 : _c.status,
        isOnline: props.isOnline,
        isActive: props.isActive
      }
    ) });
  }
  var StyledStatusIcon = styled("div", {
    center: true
  });
  var StatusCircle = styled("div", {
    width: "10px",
    aspectRatio: "1",
    round: true,
    variants: {
      presence: {
        ["focus" /* Focus */]: {
          background: "$statusIconFocusBg"
        },
        ["online" /* Online */]: {
          background: "$statusIconOnlineBg"
        },
        ["zen" /* Zen */]: {
          background: "$statusIconZenBg"
        }
      },
      isActive: {
        true: {
          background: "$statusIconActiveBg !important"
        }
      },
      isOnline: {
        false: {
          background: "$statusIconOfflineBg !important"
        }
      }
    }
  });

  // ../assets/js/components/UserHeader/index.tsx
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  function UserHeader(props) {
    var _a2, _b, _c, _d, _e, _f, _g;
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(Container, { children: [
      props.status ? /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(StatusIcon, { status: props.status, noEmoji: true, isOnline: props.online }) : null,
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
        Avatar,
        {
          src: (_a2 = props.user) == null ? void 0 : _a2.profile_photo_url,
          alt: (_b = props.user) == null ? void 0 : _b.name,
          fallback: ((_c = props.user) == null ? void 0 : _c.name) || "User"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(Right, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(StatusHeader, { children: [
          firstName(((_d = props.user) == null ? void 0 : _d.name) || ""),
          ((_e = props.status) == null ? void 0 : _e.emoji) ? /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Emoji, { id: props.status.emoji }) : null
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(StyledStatus, { children: props.status ? ((_f = props.status) == null ? void 0 : _f.message) || ((_g = findModeByStatus(props.status.status)) == null ? void 0 : _g.label) : "" })
      ] })
    ] });
  }
  var Container = styled("div", {
    display: "flex",
    minWidth: "175px",
    padding: "4px 4px 0 4px",
    height: "48px",
    gap: "8px",
    position: "relative",
    [`& ${AvatarRoot}`]: {
      height: "100%"
    },
    [`& ${StyledStatusIcon}`]: {
      position: "absolute",
      top: "36px",
      left: "36px"
    }
  });

  // ../assets/js/components/UserContextMenu/UserContextMenuView.tsx
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  function UserContextMenuView(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(ContextMenu.Root, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ContextMenu.Trigger, { asChild: true, children: props.children }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(ContextMenu.Content, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
          UserHeader,
          {
            user: props.user,
            status: props.status,
            online: props.isOnline
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ContextMenu.Separator, {}),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
          ContextMenu.Item,
          {
            emoji: "wave",
            label: "Wave",
            onClick: () => props.tap(props.userId)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
          ContextMenu.Item,
          {
            icon: props.existingHook ? "checkmark" : "bell",
            label: "Notify when available",
            onClick: () => props.createStatusHook(props.userId)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ContextMenu.Item, { icon: "users", label: "Go to 1:1 room" }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ContextMenu.Item, { icon: "mail", label: "Send message" })
      ] })
    ] });
  }

  // ../assets/js/lib/colors.ts
  function stringToRGB(input, palette) {
    const hsl = intToHSL(hashCode(input));
    const rgb = hslToRGB(hsl[0], hsl[1], hsl[2]);
    if (!palette) {
      return "rgb(" + rgb.join(", ") + ")";
    }
    return "rgb(" + findClosestColor(rgb, palette).join(", ") + ")";
  }
  function hslToRGB(h2, s2, l2) {
    const a2 = s2 * Math.min(l2, 1 - l2);
    const f2 = (n2, k2 = (n2 + h2 / 30) % 12) => l2 - a2 * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
    return [
      Math.round(f2(0) * 255),
      Math.round(f2(8) * 255),
      Math.round(f2(4) * 255)
    ];
  }
  function intToHSL(i2) {
    const hue = i2 % 360;
    const saturation = i2 % 50 + 40;
    const lightness = i2 % 40 + 30;
    return [hue, saturation, lightness];
  }
  function hashCode(str) {
    let hash2 = 0;
    for (var i2 = 0; i2 < str.length; i2++) {
      hash2 = str.charCodeAt(i2) + ((hash2 << 5) - hash2);
    }
    return hash2;
  }
  function findClosestColor(rgb, palette) {
    let minDistance = Infinity;
    let closestColor = [0, 0, 0];
    palette.forEach((color) => {
      const distance = Math.sqrt(
        Math.pow(rgb[0] - color[0], 2) + Math.pow(rgb[1] - color[1], 2) + Math.pow(rgb[2] - color[2], 2)
      );
      if (distance < minDistance) {
        minDistance = distance;
        closestColor = color;
      }
    });
    return closestColor;
  }

  // ../assets/js/features/PictureInPicture/Video.tsx
  var import_react4 = __toESM(require_react());
  var import_daily_react_hooks = __toESM(require_dist32());
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var log3 = logger("picture-in-picture/video");
  function PictureInPictureVideo(props) {
    var _a2;
    const track2 = (0, import_daily_react_hooks.useVideoTrack)(props.participantId, "video");
    const el = (0, import_react4.useRef)(null);
    (0, import_react4.useEffect)(() => {
      const playerEl = el.current;
      if (!playerEl || !(track2 == null ? void 0 : track2.persistentTrack))
        return;
      log3.info("Set track", track2.persistentTrack);
      playerEl.srcObject = new MediaStream([track2 == null ? void 0 : track2.persistentTrack]);
    }, [(_a2 = track2 == null ? void 0 : track2.persistentTrack) == null ? void 0 : _a2.id]);
    const videoEl = (0, import_react4.useMemo)(() => {
      log3.info("Re-render element");
      return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Player, { autoPlay: true, muted: true, playsInline: true, ref: el });
    }, [track2.persistentTrack]);
    return videoEl;
  }
  var Player = styled("video", {
    aspectRatio: "1",
    width: "100%",
    height: "100%",
    "object-fit": "cover",
    variants: {
      mirror: {
        true: {
          transform: "rotateY(180deg)"
        }
      }
    }
  });

  // ../assets/js/components/UserView/index.tsx
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  function UserIconView(props) {
    var _a2, _b, _c, _d;
    const color = (0, import_react5.useMemo)(() => {
      var _a3;
      return stringToRGB(((_a3 = props.user) == null ? void 0 : _a3.name) || props.userId, participantLabelBg);
    }, [props.userId]);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
      UserContextMenuView,
      {
        userId: props.userId,
        user: props.user,
        status: props.status,
        tap: props.tap,
        existingHook: props.existingHook,
        isOnline: props.isOnline,
        createStatusHook: props.createStatusHook,
        children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)(StyledUserIconView, { small: props.small, tile: props.tile, children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)(
            Label2,
            {
              tile: props.tile,
              css: {
                backgroundColor: color
              },
              children: [
                !((_a2 = props.status) == null ? void 0 : _a2.mic_on) ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Icon_default, { name: "mic-off" }) : null,
                firstName(((_b = props.user) == null ? void 0 : _b.name) || "")
              ]
            }
          ),
          props.videoFrame ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(VideoFrame, { src: props.videoFrame, mirror: props.self }) : null,
          props.videoParticipantId ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
            PictureInPictureVideo,
            {
              participantId: props.videoParticipantId,
              mirror: props.self
            }
          ) : null,
          !props.videoFrame ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
            Avatar,
            {
              src: (_c = props.user) == null ? void 0 : _c.profile_photo_url,
              fallback: ((_d = props.user) == null ? void 0 : _d.name) || "User " + props.userId
            }
          ) : null
        ] })
      }
    );
  }
  var StyledUserIconView = styled("div", {
    maxWidth: "100%",
    maxHeight: "100%",
    position: "relative",
    center: true,
    borderRadius: "1.25rem",
    aspectRatio: "1",
    round: "xlarge",
    background: "$participantBg",
    zIndex: "$base",
    overflow: "hidden",
    [`& ${AvatarRoot}`]: {
      marginTop: "-10px",
      fontSize: "var(--avatar-font-size)",
      height: "50%",
      round: true
    },
    [`& video`]: {
      position: "absolute",
      top: "0",
      left: "0",
      width: "100%",
      height: "100%",
      zIndex: "$base"
    },
    variants: {
      tile: {
        true: {
          width: "var(--tile-box-width)",
          height: "var(--tile-box-height)"
        }
      },
      small: {
        true: {
          round: "large",
          [`${AvatarRoot}`]: {
            margin: "0",
            height: "100%",
            aspectRatio: "1",
            round: "large",
            zIndex: "0"
          }
        }
      }
    }
  });
  var VideoFrame = styled("img", {
    width: "100%",
    height: "100%",
    objectFit: "cover",
    round: "medium",
    variants: {
      mirror: {
        true: {
          transform: "rotateY(180deg)"
        }
      }
    }
  });
  var Label2 = styled("div", {
    position: "absolute",
    bottom: "10px",
    background: "rgb(80, 90, 100, 0.9)",
    padding: "4px 6px",
    zIndex: "$aboveBase",
    fontSize: "$small",
    round: "small",
    label: true,
    display: "flex",
    gap: "4px",
    variants: {
      tile: {
        true: {
          bottom: "var(--tile-box-label-bottom)"
        }
      }
    },
    "& svg": {
      height: "12px",
      position: "relative",
      top: "1px"
    }
  });

  // ../assets/js/components/BoxTile/index.tsx
  var import_react6 = __toESM(require_react());
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var log4 = logger("boxtile");
  var RESIZE_DEBOUNCE_MS = 200;
  var TILE_GAP = 8;
  function BoxTile(props) {
    const containerRef = (0, import_react6.useRef)(null);
    const [dimensions, setDimensions] = (0, import_react6.useState)({
      width: 1,
      height: 1
    });
    const tileSizeVars = (0, import_react6.useMemo)(() => {
      const size2 = getMaxBoxSize(
        dimensions.width,
        dimensions.height,
        props.numBoxes,
        TILE_GAP
      );
      log4.info("Recalculated tile", size2, Math.floor(size2 / 4));
      return {
        "--tile-box-width": size2 + "px",
        "--tile-box-height": size2 + "px",
        "--tile-box-cover-font-size": Math.floor(size2 / 8) + "px",
        "--tile-box-label-bottom": size2 < 200 ? "4px" : "8px"
      };
    }, [props.numBoxes, dimensions]);
    (0, import_react6.useEffect)(() => {
      let frame;
      const handleResize = () => {
        if (frame) {
          clearTimeout(frame);
        }
        frame = setTimeout(() => onResize(), RESIZE_DEBOUNCE_MS);
      };
      handleResize();
      window.addEventListener("resize", handleResize);
      window.addEventListener("orientationchange", handleResize);
      return () => {
        window.removeEventListener("resize", handleResize);
        window.removeEventListener("orientationchange", handleResize);
      };
    }, []);
    (0, import_react6.useEffect)(() => {
      onResize(-300);
      setTimeout(onResize, 250);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(StyledTile, { ref: containerRef, css: tileSizeVars, children: props.children });
    function onResize(add) {
      var _a2, _b;
      const width = (((_a2 = containerRef.current) == null ? void 0 : _a2.clientWidth) || 0) + (add || 0);
      const height = (_b = containerRef.current) == null ? void 0 : _b.clientHeight;
      width && height && setDimensions({ width, height });
      log4.info("resized", width, height);
    }
  }
  var StyledTile = styled("div", {
    display: "flex",
    flexFlow: "row wrap",
    width: "100%",
    height: "100%",
    overflow: "hidden",
    alignContent: "start",
    justifyContent: "center",
    gap: TILE_GAP
  });
  function getMaxBoxSize(containerWidth, containerHeight, numBoxes, gap) {
    let maxBoxSize = 0;
    for (let numRows = 1; numRows <= numBoxes; numRows++) {
      const numCols = Math.ceil(numBoxes / numRows);
      const availWidth = containerWidth - (numCols - 1) * gap;
      const availHeight = containerHeight - (numRows - 1) * gap;
      const boxWidth = availWidth / numCols;
      const boxHeight = availHeight / numRows;
      const boxSize = Math.min(boxWidth, boxHeight);
      log4.info("max box size => current: %d, boxSize:", maxBoxSize, boxSize);
      if (boxSize > maxBoxSize) {
        maxBoxSize = boxSize;
      }
    }
    return maxBoxSize;
  }

  // ../assets/js/features/ElectronPipWindow/PipCallProvider.tsx
  var import_react7 = __toESM(require_react());
  var import_daily_js = __toESM(require_daily_iframe());
  var import_daily_react_hooks2 = __toESM(require_dist32());
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  var log5 = logger("pip/pip-call-provider");
  function PipCallProvider(props) {
    const [callObject, setCallObject] = (0, import_react7.useState)();
    const [loadingState, setLoadingState] = (0, import_react7.useState)("ready" /* Ready */);
    (0, import_react7.useEffect)(() => {
      if (props.userId && props.roomUrl) {
        const callObj = createCallObject();
        setCallObject(callObj);
        joinDailyCall(callObj);
      }
    }, [props.userId, props.roomUrl]);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_daily_react_hooks2.DailyProvider, { callObject, children: props.children });
    function createCallObject() {
      log5.info("Creating call object");
      return import_daily_js.default.createCallObject({
        audioSource: false,
        videoSource: false,
        startVideoOff: true,
        startAudioOff: true
      }).on("loading", setLoadingStateFn("loading" /* Loading */)).on("loaded", setLoadingStateFn("loaded" /* Loaded */)).on("left-meeting", setLoadingStateFn("left" /* Left */)).on("started-camera", logEvent).on("camera-error", logEvent).on("joining-meeting", setLoadingStateFn("joining" /* Joining */)).on("joined-meeting", setLoadingStateFn("joined" /* Joined */)).on("participant-updated", logEvent).on("participant-joined", logEvent).on("participant-left", logEvent).on("active-speaker-change", logEvent).on("error", logEvent).on("network-connection", logEvent);
    }
    function joinDailyCall(callObject2) {
      return __async(this, null, function* () {
        callObject2.setLocalVideo(false);
        callObject2.setLocalAudio(false);
        yield callObject2.setInputDevicesAsync({
          videoSource: false,
          audioSource: false
        });
        callObject2.join({
          userData: { id: props.userId + ":pip" },
          url: props.roomUrl,
          videoSource: false,
          audioSource: false,
          startVideoOff: true,
          startAudioOff: true
        }).then((callParticipants) => {
          log5.info("Joined call:", callParticipants);
        }).catch((err) => {
          log5.error("Error", err);
        });
      });
    }
    function setLoadingStateFn(loadingState2) {
      return () => {
        log5.info("Setting call state as: ", loadingState2);
        setLoadingState(loadingState2);
      };
    }
    function handleError(err) {
      log5.error("Error", err);
    }
  }
  function logEvent(e2) {
    log5.info("Action: %s", e2.action, e2);
  }

  // ../assets/js/features/ElectronPipWindow/index.tsx
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var log6 = logger("electron-pip-window");
  function ElectronPipWindow(props) {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _i;
    const [pipState, setPipState] = (0, import_react8.useState)({});
    const [videoFrame, setVideoFrame] = (0, import_react8.useState)({});
    (0, import_react8.useEffect)(() => {
      var _a3;
      log6.info("Listen messages");
      (_a3 = getIpcRenderer()) == null ? void 0 : _a3.on("message", onMessage);
      messageMainWindow({ requestState: true });
      return () => {
        var _a4;
        (_a4 = getIpcRenderer()) == null ? void 0 : _a4.removeListener("message", onMessage);
      };
    }, []);
    const self2 = (_a2 = pipState.participants) == null ? void 0 : _a2.find((p2) => p2.isSelf);
    const active = ((_b = pipState.participants) == null ? void 0 : _b.filter((p2) => p2.isActive && !p2.isSelf)) || [];
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(import_react_tooltip2.TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
      PipCallProvider,
      {
        userId: (_c = pipState.localUser) == null ? void 0 : _c.id,
        roomUrl: "https://shtest.daily.co/bafapublic",
        children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(Container2, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Handle, { children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(HandleButton, {}) }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Call, { children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(BoxTile, { numBoxes: active.length + (self2 ? 1 : 0), children: [
            self2 ? /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
              UserIconView,
              {
                userId: self2.userId,
                user: self2.user,
                status: self2.status,
                small: active.length > 0,
                tap,
                isOnline: self2.isOnline,
                createStatusHook,
                videoParticipantId: ((_d = self2.participant) == null ? void 0 : _d.cameraOn) ? (_e = self2.participant) == null ? void 0 : _e.dailyUserId : void 0,
                self: true,
                tile: true
              }
            ) : null,
            active.map((p2) => {
              var _a3, _b2;
              return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
                UserIconView,
                {
                  userId: p2.userId,
                  user: p2.user,
                  status: p2.status,
                  small: active.length > 0,
                  tap,
                  isOnline: p2.isOnline,
                  createStatusHook,
                  videoParticipantId: ((_a3 = p2.participant) == null ? void 0 : _a3.cameraOn) ? (_b2 = p2.participant) == null ? void 0 : _b2.dailyUserId : void 0,
                  tile: true
                }
              );
            })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(Buttonset, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Tooltip, { content: "Turn off video", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
              Button,
              {
                onClick: toggleCamera,
                on: ((_f = pipState.localStatus) == null ? void 0 : _f.camera_on) || false,
                children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
                  Icon,
                  {
                    name: ((_g = pipState.localStatus) == null ? void 0 : _g.camera_on) ? "video" : "videoOff"
                  }
                )
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Tooltip, { content: "Turn off microphone", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
              Button,
              {
                onClick: toggleMic,
                on: ((_h = pipState.localStatus) == null ? void 0 : _h.mic_on) || false,
                children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Icon, { name: ((_i = pipState.localStatus) == null ? void 0 : _i.mic_on) ? "mic" : "micOff" })
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Tooltip, { content: "Hang up call", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(HangUpButton, { onClick: leaveCall, children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Icon, { name: "phoneHangUp" }) }) })
          ] })
        ] })
      }
    ) });
    function onMessage(event, msg) {
      var _a3;
      log6.info("Received message", msg);
      if (msg.payload.provideState) {
        setPipState(msg.payload.provideState.state);
        return;
      }
      if (msg.payload.sendVideoFrame) {
        const userId = (_a3 = msg.payload.sendVideoFrame) == null ? void 0 : _a3.userId;
        if (!userId)
          return;
        setVideoFrame((videoFrames) => {
          var _a4;
          return __spreadProps(__spreadValues({}, videoFrames), {
            [userId]: {
              frame: (_a4 = msg.payload.sendVideoFrame) == null ? void 0 : _a4.base64Image,
              ts: Date.now()
            }
          });
        });
      }
      if (msg.payload.sendTrack) {
        return;
      }
      log6.error("Unhandled message:", msg);
    }
    function tap(userId) {
      messageMainWindow({
        tap: {
          userId
        }
      });
    }
    function createStatusHook(targetUserId) {
      messageMainWindow({
        createStatusHook: {
          targetUserId
        }
      });
    }
    function toggleCamera() {
      var _a3;
      sendToggleCommand("setCameraOn", !((_a3 = pipState.localStatus) == null ? void 0 : _a3.camera_on));
    }
    function toggleMic() {
      var _a3;
      sendToggleCommand("setMicOn", !((_a3 = pipState.localStatus) == null ? void 0 : _a3.mic_on));
    }
    function leaveCall() {
      messageMainWindow({ leaveCall: true });
    }
    function sendToggleCommand(cmd, value) {
      messageMainWindow({
        [cmd]: {
          on: value
        }
      });
    }
  }
  var Container2 = styled("div", {
    display: "flex",
    flexDirection: "column",
    width: "100vw",
    height: "100vh",
    background: "$electronPipContainerBg",
    round: "large"
  });
  var Call = styled("div", {
    display: "flex",
    flexGrow: "1",
    background: "$electronPipCallBg",
    round: "large",
    height: "calc(100% - 40px)",
    color: "$electronPipCallFg",
    padding: "20px",
    fontSize: "$small",
    scrollbar: { y: true }
  });
  var Handle = styled("div", {
    center: true,
    height: "30px",
    color: "$electronPipHandleFg",
    cursor: "move",
    "-webkit-app-region": "drag"
  });
  var Buttonset = styled("div", {
    width: "100%",
    height: "48px",
    center: true,
    flexDirection: "row",
    gap: "8px"
  });
  var Button = styled("div", {
    width: "32px",
    height: "32px",
    color: "$electronPipButtonFg",
    center: true,
    round: "medium",
    "& svg": {
      height: "18px",
      aspectRatio: "1"
    },
    "&:hover": {
      background: "$electronPipButtonHoverBg",
      color: "$electronPipButtonHoverFg"
    },
    variants: {
      on: {
        true: {
          color: "$electronPipOnButtonFg"
        }
      }
    }
  });
  var HangUpButton = styled(Button, {
    color: "$electronPipHangUpButtonFg",
    "& svg": {
      height: "21px"
    },
    "&:hover": {
      color: "$electronPipHangUpButtonFg"
    }
  });
  import_react_dom.default.render(/* @__PURE__ */ (0, import_jsx_runtime64.jsx)(ElectronPipWindow, {}), document.getElementById("root"));
})();
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
